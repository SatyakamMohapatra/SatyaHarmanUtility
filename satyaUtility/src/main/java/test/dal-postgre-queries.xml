<queries>
	<!-- <query key="INSERT_USAGE_LOGGING">INSERT INTO VIS_LDSERVICES_USAGE_LOG(ID,LOG_LINK_ID,USER_ID,USER_IP,USER_AGENT,USER_COMPRESSION,
    SERVICE,REQUEST,RESPONSE_SIZE,RESPONSE_COUNT,REPORT_NAME,MODEL_NAME,STATUS,ERROR_CODE,ERROR_DETAIL,REQUEST_TIME,RESPONSE_TIME, OBJ_ID, ORG_NAME)
     VALUES (nextval('service_log_id_seq'),?::numeric, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?,?)</query> -->
	<query key="INSERT_USAGE_LOGGING">INSERT INTO VIS_LDSERVICES_USAGE_LOG(ID,LOG_LINK_ID,USER_ID,USER_IP,USER_AGENT,USER_COMPRESSION,SERVICE,REQUEST,RESPONSE_SIZE,RESPONSE_COUNT,
	REPORT_NAME,MODEL_NAME,STATUS,ERROR_CODE,ERROR_DETAIL,REQUEST_TIME,RESPONSE_TIME, OBJ_ID, ORG_NAME) VALUES (nextval('service_log_id_seq'),
	?::numeric, ?,?,?,?,?,?,?,?,?,?,?,?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?,?)</query>
	
	<!--START OF DESKTOP REFRESH QUERIES -->
	<query key="INSERT_DESKTOP_REFRESH_JOB">INSERT INTO ILD_DESKTOP_REFRESH_JOB (QUEUE_ITEM_ID,
		JOB_ID, STORY_ID, USER_ID, REQUEST_RECEIVED, REQUEST_RECEIVED_TIME,
		CURRENT_STATUS, SERVER_NAME) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP,
		?, ?)
	</query>

	<query key="GENERATE_SERVICE_LOG_ID">select nextval('service_log_id_seq')
	</query>

	<query key="INSERT_DESKTOP_REFRESH_JOB_DETAILS">INSERT INTO ILD_DESKTOP_REFRESH_JOB_DTL
		(REPORT_REFRESH_ID, JOB_ID, STORY_REPORT_ID) VALUES (?, ?, ?)
		WHERE CURRENT_STATUS = ? AND SERVER_NAME = ?
	</query>
	<query key="GET_ALL_QUEUED_JOBS">SELECT JOB_ID, USER_ID, REQUEST_RECEIVED FROM
		ILD_DESKTOP_REFRESH_JOB WHERE SERVER_NAME = ? AND CURRENT_STATUS = ?
		ORDER BY REQUEST_RECEIVED_TIME , USER_ID
	</query>
	<query key="UPDATE_RESOLVED_METADATA">UPDATE ILD_DESKTOP_REFRESH_JOB_DTL SET
		RESOLVED_MEMBER_DETAILS = ?, STATUS = ?, START_TIME = ?, END_TIME = ?
		WHERE JOB_ID = ? AND STORY_REPORT_ID = ?
	</query>
	<query key="GET_ALL_STORY_REPORT_IDS">SELECT STORY_REPORT_ID FROM STORY_REPORT_MAP WHERE
		STORY_ID = ?
	</query>
	<query key="IS_WORKSPACE_ACCESSE">SELECT STORY_ID FROM STORY_REPORT_MAP WHERE STORY_ID
	IN (SELECT DISTINCT A.STORY_ID FROM VIS_STORY_GRP_MAP_TBL A WHERE
	A.GROUP_ID IN ((SELECT CAST(GROUP_ID AS varchar) FROM ADM_GRP_USR_MAP
	WHERE USER_ID = ?
	)) UNION ALL SELECT DISTINCT B.STORY_ID FROM
	VIS_STORY_USER_MAP_TBL B
	WHERE USER_ID = ? UNION SELECT STORY_ID FROM
	STORY_TBL WHERE
	CREATED_BY = ?) AND STORY_ID = ?
</query>
	<query key="UPDATE_JOB_CURRENT_STATUS">UPDATE ILD_DESKTOP_REFRESH_JOB SET CURRENT_STATUS = ?
		WHERE JOB_ID = ?
	</query>
	<query key="UPDATE_JOB_STATUS_ERROR_DETAILS">UPDATE ILD_DESKTOP_REFRESH_JOB_DTL SET
		RESOLVED_MEMBER_DETAILS = ?,STATUS = ?,ERROR_DETAILS = ?,START_TIME =
		?,END_TIME = CURRENT_TIMESTAMP WHERE JOB_ID = ? AND STORY_REPORT_ID =
		?
	</query>
	<query key="RESET_CURENT_STATUS_RESPONSE_CREATED_TIME">UPDATE ILD_DESKTOP_REFRESH_JOB SET CURRENT_STATUS = ?
		,RESPONSE_CREATED_TIME = CURRENT_TIMESTAMP WHERE JOB_ID = ?
	</query>
	<query key="RESET_CURENT_STATUS">UPDATE ILD_DESKTOP_REFRESH_JOB SET CURRENT_STATUS = ?
		WHERE CURRENT_STATUS = ? AND SERVER_NAME = ?
	</query>
	<query key="GET_JOB_STATUS">SELECT CURRENT_STATUS , STORY_ID FROM
		ILD_DESKTOP_REFRESH_JOB WHERE JOB_ID = ?
	</query>
	<query key="GET_COMPLETED_REPORT_DATA">SELECT STORY_REPORT_ID, END_TIME, STATUS,
		ERROR_DETAILS, RESOLVED_MEMBER_DETAILS FROM
		ILD_DESKTOP_REFRESH_JOB_DTL WHERE JOB_ID = ?
	</query>
	<query key="GET_COMPLETED_DATA">SELECT STORY_ID, STORY_REPORT_ID, END_TIME, STATUS,
		ERROR_DETAILS, RESOLVED_MEMBER_DETAILS FROM ILD_DESKTOP_REFRESH_JOB A
		JOIN ILD_DESKTOP_REFRESH_JOB_DTL B ON A.JOB_ID = B.JOB_ID WHERE
		A.JOB_ID = ?
	</query>
	<query key="GET_ALL_DR_ALIASES_FOR_USER">SELECT * FROM VIS_ALIAS_TBL WHERE USER_ID = ? ORDER BY
		CREATED DESC
	</query>
	<query key="GET_ALL_DR_ALIASES_FOR_USER_AND_ORG_NAME">SELECT * FROM VIS_ALIAS_TBL WHERE USER_ID = ? and
		ORG_NAME = ? ORDER BY CREATED DESC
	</query>
	<query key="GET_DR_WORKSPACE_IN_LINE_EDIT_DATA">SELECT
		REPORT_ID,CHART_ID,ALIASED_COMPONENT_ID,ALIAS_VALUE FROM
		VIS_ALIAS_RPT_MAP_TBL WHERE REPORT_ID IN (??)
	</query>
	<query key="GET_JOB_REQUEST">SELECT REQUEST_RECEIVED FROM ILD_DESKTOP_REFRESH_JOB
		WHERE JOB_ID = ?
	</query>
	<query key="UPDATE_JOB_STATUS_TO_EXPIRED">
		UPDATE ILD_DESKTOP_REFRESH_JOB SET CURRENT_STATUS =
		'EXPIRED' WHERE (cast(extract(days from
		date_trunc('day',CURRENT_TIMESTAMP) -
		date_trunc('day',REQUEST_RECEIVED_TIME))as numeric)) > ?::integer
	</query>
	<query key="GET_EXPIRED_JOBS">
		SELECT JOB_ID FROM ILD_DESKTOP_REFRESH_JOB WHERE
		(cast(extract(days from
		date_trunc('day',CURRENT_TIMESTAMP) -
		date_trunc('day',REQUEST_RECEIVED_TIME))as numeric)) > ?::integer
	</query>
	<query key="GET_ORG_NAME_FOR_WORKSPACE">SELECT ORG_NAME FROM STORY_TBL WHERE STORY_ID = ?
	</query>
	<query key="UPDATE_LAST_ACCESS_FOR_STORY">UPDATE STORY_TBL SET LAST_ACCESSED = CURRENT_TIMESTAMP
		where STORY_ID = ?
	</query>
	<query key="GET_STORY_REPORT_INDEX">SELECT STORY_REPORT_ID,RPT_INDEX FROM STORY_REPORT_MAP
		WHERE STORY_ID = ?
	</query>
	<query key="UPDATE_REPSONSE_SENT_TIME_FOR_JOB">UPDATE ILD_DESKTOP_REFRESH_JOB SET RESPONSE_SENT_TIME
		= CURRENT_TIMESTAMP WHERE JOB_ID = ?
	</query>
	<query key="GET_AVAILABLE_NAMED_SELECTIONS">SELECT OBJECT_ID FROM NAMED_SELECTIONS_SUMM_TBL WHERE
		OBJECT_ID IN (??)
	</query>
	<query key="GET_CURRENT_TIMESTAMP">SELECT LOCALTIMESTAMP</query>
	<query key="GET_METADATA_LOOKUP_NAMES">SELECT DIMENSION_NAME_VALUE FROM
		VIS_DIMENSIONNAME_LOOKUP WHERE LOCALE= ? AND DIMENSION_NAME_KEYWORD =
		?
	</query>
	<query key="GET_METADATA">SELECT METADATA_VALUE FROM VIS_METADATA_TBL WHERE
		MODEL_ID = ?::integer AND METADATA_NAME = ?
	</query>
	<query key="GET_DESKTOP_JOB_LOG">
		SELECT A.REQUEST_RECEIVED_TIME,
		A.RESPONSE_CREATED_TIME,
		A.RESPONSE_SENT_TIME, B.START_TIME,
		B.END_TIME, A.STORY_ID,
		B.REPORT_REFRESH_ID, B.STORY_REPORT_ID,
		B.STATUS, A.USER_ID,
		FM.ORG_NAME FROM ILD_DESKTOP_REFRESH_JOB A,
		ILD_DESKTOP_REFRESH_JOB_DTL B, WSP_PAGE_TBL WSP, FOLDER_MASTER FM,
		FOLDER_OBJ_MAP FOM WHERE A.JOB_ID = B.JOB_ID AND WSP.PAGE_ID::VARCHAR
		=
		B.STORY_REPORT_ID AND FOM.FOLDER_ID = FM.FOLDER_ID AND FOM.OBJECT_ID
		=
		WSP.WSP_ID AND A.JOB_ID = ?
	</query>
	<query key="INSERT_DESKTOP_JOB_LOG">INSERT INTO ILD_DESKTOP_JOB_LOG(JOB_ID, STORY_ID,
		REPORT_ID, REPORT_PAGE_ID, REQUEST_RECEIVED_TIME,
		RESPONSE_CREATED_TIME, RESPONSE_SENT_TIME, JOB_START_TIME,
		JOB_END_TIME, JOB_STATUS, USER_ID, ORG_NAME, CREATED) VALUES (?, ?, ?,
		?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
	</query>
	<query key="GET_DIMENSION_NAME_MAP">SELECT LOCALE, DIMENSION_NAME_VALUE FROM
		VIS_DIMENSIONNAME_LOOKUP WHERE DIMENSION_NAME_KEYWORD = ?
	</query>
	<query key="GET_MIXED_FORMAT_PROPERTIES">SELECT PARAMETER_VALUE FROM VIS_REPORT_EXTN_TBL WHERE
		WSP_ID = ? AND PARAMETER_NAME IN
		('isGridFormatMaskMixed','isGridSortAndFilterDisabled')
	</query>
	<query key="CHECK_IS_ADHOC_WORKSPACE">SELECT PARAMETER_VALUE FROM VIS_REPORT_EXTN_TBL WHERE
		WSP_ID = ? AND PARAMETER_NAME='IsAdhoc'
	</query>
	<query key="CHECK_IF_REPORT_PUBLISHED">SELECT KEYWORD FROM CMN_SEARCH_TBL WHERE OBJECT_ID=?
		AND TYPE='IsConfigured' AND lower(KEYWORD)='true'
	</query>
	<query key="VALIDATE_WORKSPACE">SELECT WSP_ID FROM WSP_SUMM_TBL WHERE WSP_ID= ?
	</query>
	<query key="GET_STORY_REPORT_ID_FOR_STORY">SELECT SRM.STORY_REPORT_ID, ST.TITLE FROM STORY_TBL
		ST, STORY_REPORT_MAP SRM where ST.STORY_ID = ? and ST.STORY_ID =
		SRM.STORY_ID ORDER BY SRM.RPT_INDEX
	</query>
	<query key="WORKSPACE_TITLE">SELECT WSP_TITLE FROM WSP_SUMM_TBL WHERE WSP_ID = ?
	</query>
	<query key="CHECK_IS_UNIFY_TEMPLATE">SELECT OBJECT_ID ,KEYWORD FROM CMN_SEARCH_TBL WHERE
		OBJECT_ID IN (??) AND TYPE='IsUnifyTemplate'
	</query>

	<query key="GET_JOB_BY_QUEUE_ID">SELECT JOB_ID, USER_ID, REQUEST_RECEIVED FROM
		ILD_DESKTOP_REFRESH_JOB WHERE QUEUE_ITEM_ID = ?
	</query>

	<query key="GET_GROUP_ALIAS_INFO">SELECT GROUP_ID, GROUP_DISP_NAME, DEFAULT_USERID FROM
		GROUP_ALIAS_TBL
	</query>
	<query key="IS_GROUP_ACCESS_FOR_USER">SELECT 1 FROM ADM_GRP_USR_MAP WHERE LOWER(USER_ID) =?
	</query>
	<query key="UPDATE_GROUP_ACCESS_FOR_USER">INSERT INTO ADM_GRP_USR_MAP
		(USER_ID,GROUP_ID,CREATED,LAST_UPD,LAST_UPD_BY)
		VALUES(?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?)
	</query>


	<query key="GET_STORIES">
			SELECT srch.object_id,
		sty.title,
		sty.description,
		sty.created_by,
		TO_CHAR(sty.created,'mm/dd/yy hh24:mi:ss') CREATED,
		srch.type,
		srch.keyword,
		fav.favourite_id,
		TO_CHAR(sty.last_upd,
		'mm/dd/yy hh24:mi:ss') LAST_UPD,
		CurExec.countt AS Views,
		report_count_info.REPORT_CNT,
		report_count_info.RPT_CNT_EXCLUDING_TEXT_REPORTS,
		report_count_info.CACHE_CNT,
		objcolmap.collection_id
		FROM

		(SELECT DISTINCT object_id,
		type,
		keyword
		FROM cmn_search_tbl
		WHERE object_id IN
		(SELECT object_id
		FROM
		cmn_search_tbl
		WHERE lower(Type) = 'object type'
		AND lower(keyword)=
		'story'
		EXCEPT
		SELECT STORY_ID
		FROM VIS_DESK_STORY_MAP VM,
		VIS_DESK VD
		WHERE VM.DESK_ID = VD.DESK_ID
		AND VD.TARGET_APP = 'AE'
		EXCEPT
		SELECT
		object_id
		FROM cmn_search_tbl
		WHERE lower(Type) = 'isdisplayinlibrary'
		AND lower(keyword) = 'false'
		)
		AND lower(type) IN ('tags','object type')
		AND keyword IS NOT NULL
		) srch

		INNER JOIN (Select * from story_tbl WHERE
		TYPE IS NULL) sty
		ON
		sty.story_id = srch.object_id
		AND
		ORG_NAME_EQUALS_CURRENT
		AND
		sty.guided_story_id IS NULL
		LEFT OUTER JOIN
		favourites_tbl fav
		ON
		srch.object_id = fav.object_id
		AND
		LOWER(fav.user_id) = ?
		LEFT OUTER
		JOIN
		(SELECT COUNT(story_id) AS countt,
		story_id
		FROM story_exec_info_tbl
		WHERE executed_time BETWEEN
		CURRENT_TIMESTAMP - INTERVAL '30 DAYS' AND
		CURRENT_TIMESTAMP
		GROUP BY
		story_id
		) CurExec
		ON sty.story_id = CurExec.story_id
		LEFT OUTER JOIN
		(SELECT story_id,
		COUNT(1) REPORT_CNT,
		COUNT(WORKSPACE_ID)
		RPT_CNT_EXCLUDING_TEXT_REPORTS,
		COUNT(CACHE_ID) CACHE_CNT
		FROM
		story_report_map
		GROUP BY story_id
		) report_count_info
		ON sty.story_id =
		report_count_info.story_id
		LEFT OUTER JOIN  object_collection_map objcolmap
		ON srch.object_id      = objcolmap.obj_id

		WHERE
		LOWER(sty.created_by) = ?
		OR
		sty.story_id IN
		(SELECT story_id
		FROM vis_story_user_map_tbl
		WHERE
		LOWER(user_id) = ?
		AND ORG_NAME_EQUALS_CURRENT
		AND STORY_TYPE_ID='2'
		UNION
		SELECT story_id
		FROM vis_story_grp_map_tbl vsgmt
		WHERE group_id IN
		(SELECT
		CAST(GROUP_ID AS VARCHAR) FROM ADM_GRP_USR_MAP WHERE
		LOWER(USER_ID) = ?
		)
		AND
		ORG_NAME_EQUALS_CURRENT
		AND STORY_TYPE_ID='2'
		)
		ORDER BY object_id ASC
	</query>
	<query key="GET_STORY_CUBE_INFO"> SELECT
		sty.story_id,cube_info.cube_id,cube_info.cube_name FROM story_tbl
		sty,cmn_search_tbl cmn, cube_tbl cube_info,story_report_map srp WHERE
		sty.story_id IN( ??) AND cmn.Type ='AS Model Name' AND
		srp.workspace_id = cmn.object_id AND sty.story_id = srp.story_id AND
		cube_info.cube_name = cmn.keyword order by story_id
	</query>

	<query key="GET_STORY_LIST">
		SELECT S.STORY_ID,
		S.TITLE,
		S.DESCRIPTION,
		S.CREATED_BY,
		CAST (S.LAST_UPD
		AS TIMESTAMP) AS LAST_UPD,
		S.LAST_UPD_BY,
		CAST(MAX(EX.EXECUTED_TIME) AS
		TIMESTAMP) AS LAST_EXECUTED_TIME,
		'private' STORY_TYPE,
		COUNT(DISTINCT
		SRM.STORY_REPORT_ID) REPORTS,
		COUNT(DISTINCT F.FAVOURITE_ID) IS_FAV,
		CST.KEYWORD,
		COUNTER VIEWSS
		FROM
		STORY_TBL S LEFT OUTER JOIN STORY_REPORT_MAP SRM ON (S.STORY_ID =
		SRM.STORY_ID) LEFT OUTER JOIN FAVOURITES_TBL F ON (S.STORY_ID =
		F.OBJECT_ID)
		LEFT OUTER JOIN CMN_SEARCH_TBL CST ON (S.STORY_ID =
		CST.OBJECT_ID) LEFT OUTER JOIN
		(SELECT STORY_ID,MAX(EXECUTED_TIME)
		EXECUTED_TIME,COUNT(STORY_ID) COUNTER FROM STORY_EXEC_INFO_TBL WHERE
		EXECUTED_TIME BETWEEN CURRENT_TIMESTAMP - INTERVAL '30 DAYS' AND
		CURRENT_TIMESTAMP GROUP BY STORY_ID) EX ON (S.STORY_ID = EX.STORY_ID)
		WHERE (CST.TYPE IS NULL OR CST.TYPE = 'Tags')
		AND S.CREATED_BY = ?
		AND
		S.ORG_NAME_EQUALS_CURRENT
		AND
		S.STORY_ID NOT IN
		(SELECT STORY_ID
		FROM
		VIS_DESK_STORY_MAP VM,
		VIS_DESK VD
		WHERE VM.DESK_ID = VD.DESK_ID
		AND
		VD.TARGET_APP = 'AE'
		)
		GROUP BY S.STORY_ID,
		S.TITLE,
		S.DESCRIPTION,
		S.CREATED_BY,
		S.CREATED,
		S.LAST_UPD,
		S.LAST_UPD_BY,
		CST.KEYWORD,
		COUNTER
		UNION ALL
		SELECT S.STORY_ID,
		S.TITLE,
		S.DESCRIPTION,
		S.CREATED_BY,
		CAST
		(S.LAST_UPD AS TIMESTAMP) AS LAST_UPD,
		S.LAST_UPD_BY,
		CAST(MAX(EX.EXECUTED_TIME) AS TIMESTAMP) AS LAST_EXECUTED_TIME,
		'shared' STORY_TYPE,
		COUNT(DISTINCT SRM.STORY_REPORT_ID) REPORTS,
		COUNT(DISTINCT F.FAVOURITE_ID) IS_FAV,
		CST.KEYWORD,
		COUNTER VIEWSS
		FROM
		STORY_TBL S LEFT OUTER JOIN STORY_REPORT_MAP SRM ON (S.STORY_ID =
		SRM.STORY_ID) LEFT OUTER JOIN FAVOURITES_TBL F ON (S.STORY_ID =
		F.OBJECT_ID) LEFT OUTER JOIN
		CMN_SEARCH_TBL CST ON (S.STORY_ID =
		CST.OBJECT_ID) LEFT OUTER JOIN
		(SELECT STORY_ID,MAX(EXECUTED_TIME)
		EXECUTED_TIME,COUNT(STORY_ID)COUNTER FROM
		STORY_EXEC_INFO_TBL WHERE
		EXECUTED_TIME BETWEEN CURRENT_TIMESTAMP -
		INTERVAL '30 DAYS' AND
		CURRENT_TIMESTAMP GROUP BY STORY_ID) EX ON
		(S.STORY_ID = EX.STORY_ID),
		VIS_STORY_USER_MAP_TBL SUMT
		WHERE (CST.TYPE
		IS NULL OR CST.TYPE =
		'Tags')
		AND SUMT.STORY_ID = S.STORY_ID
		AND
		SUMT.STORY_ID IN
		(SELECT
		STORY_ID FROM VIS_STORY_USER_MAP_TBL WHERE
		USER_ID = ? AND
		ORG_NAME_EQUALS_CURRENT
		UNION
		SELECT STORY_ID
		FROM
		VIS_STORY_GRP_MAP_TBL
		WHERE GROUP_ID IN (??)
		)
		GROUP BY S.STORY_ID,
		S.TITLE,
		S.DESCRIPTION,
		S.CREATED_BY,
		S.CREATED,
		S.LAST_UPD,
		S.LAST_UPD_BY,
		CST.KEYWORD,
		COUNTER
	</query>
	<query key="GET_STORY_INFO">
		SELECT ST.STORY_ID,
		ST.TITLE,
		ST.DESCRIPTION,
		ST.CREATED_BY,
		CAST(ST.LAST_UPD AS TIMESTAMP) AS LAST_UPD,
		CAST(ST.CREATED AS TIMESTAMP) AS CREATED,
		ST.LAST_UPD_BY,
		ST.GUIDED_STORY_ID,
		F.FAV_COUNT IS_FAV,
		(SELECT CAST(MAX(EXECUTED_TIME)
		AS TIMESTAMP)
		FROM STORY_EXEC_INFO_TBL
		WHERE STORY_ID = ?
		) AS
		LAST_EXECUTED_TIME

		FROM STORY_TBL ST
		LEFT OUTER JOIN
		(SELECT COUNT(
		DISTINCT FAVOURITE_ID) FAV_COUNT,
		OBJECT_ID,
		USER_ID
		FROM FAVOURITES_TBL
		WHERE USER_ID=?
		GROUP BY OBJECT_ID,
		USER_ID
		) F
		ON ST.STORY_ID =
		F.OBJECT_ID
		WHERE ST.STORY_ID = ?
	</query>
	<query key="GET_STORY_DETAILS">
		SELECT STORY_ID, TITLE,DESCRIPTION FROM STORY_TBL
		WHERE STORY_ID IN(??)
	</query>
	<query key="DELETE_STORY">DELETE FROM STORY_TBL WHERE STORY_ID = ?</query>
	<query key="DELETE_STORY_REPORT_MAPPING">DELETE FROM STORY_REPORT_MAP WHERE STORY_ID = ?
	</query>
	<query key="DELETE_STORY_FAVOURITES"> DELETE FROM FAVOURITES_TBL WHERE OBJECT_ID = ?
	</query>
	<query key="RENAME_STORY">UPDATE STORY_TBL SET TITLE = ? WHERE STORY_ID = ?
	</query>

	<query key="LOAD_STORY_DETAIL">
		SELECT ST.STORY_ID, ST.TITLE, ST.DESCRIPTION,
		ST.CREATED_BY, CAST(ST.LAST_UPD AS TIMESTAMP) AS LAST_UPD,
		CAST(ST.CREATED AS TIMESTAMP) AS CREATED,
		ST.LAST_UPD_BY,
		SRM.STORY_REPORT_ID, SRM.RPT_INDEX, SRM.WORKSPACE_ID,
		SRM.TEXT_PANE_DATA, SRM.VIS_REPORT_PROPERTY, OIM.IMG_PATH, CHART.THUMBNAIL_PATH AS
		DEFAULT_IMG_PATH, WPT.PAGE_TITLE,
		WST.WSP_TITLE, WST.CREATED_BY AS WSP_CREATED_BY, CMN_UT.KEYWORD AS IS_UNIFY_TEMPLATE, SRM.NOTES,
		ST.GUIDED_STORY_ID, F.FAV_COUNT IS_FAV, CAST(SRM.RPT_INDEX
		AS INTEGER)
		RPT_INDEX_INT,
		(SELECT CAST(MAX(EXECUTED_TIME) AS TIMESTAMP) FROM
		STORY_EXEC_INFO_TBL WHERE
		STORY_ID = ?) AS LAST_EXECUTED_TIME,
		ST.ORG_NAME, SRM.TYPE
		FROM STORY_REPORT_MAP SRM
		LEFT OUTER JOIN
		OBJECT_IMG_MAP_TBL OIM ON OIM.OBJECT_ID = SRM.WORKSPACE_ID
		OR
		OIM.OBJECT_ID = SRM.STORY_REPORT_ID
		LEFT OUTER JOIN WSP_SUMM_TBL WST ON
		SRM.WORKSPACE_ID = WST.WSP_ID
		LEFT OUTER JOIN WSP_PAGE_TBL WPT ON
		WPT.WSP_ID = WST.WSP_ID
		LEFT OUTER JOIN STORY_TBL ST ON SRM.STORY_ID =
		ST.STORY_ID
		LEFT OUTER JOIN (SELECT OBJECT_ID, KEYWORD FROM CMN_SEARCH_TBL WHERE TYPE = 'IsUnifyTemplate' 
		    AND CTID IN (SELECT MAX(CTID) FROM CMN_SEARCH_TBL WHERE TYPE = 'IsUnifyTemplate' GROUP BY OBJECT_ID)) CMN_UT ON CMN_UT.OBJECT_ID = SRM.WORKSPACE_ID
		LEFT OUTER JOIN (SELECT * FROM CMN_SEARCH_TBL WHERE TYPE =
		'Thumbnail
		Type'
		AND CTID IN (SELECT MAX(CTID) FROM CMN_SEARCH_TBL
		WHERE
		TYPE =
		'Thumbnail Type' GROUP BY OBJECT_ID)) CMN ON CMN.OBJECT_ID
		=
		SRM.WORKSPACE_ID
		LEFT OUTER JOIN VIS_CHART_MAPPING_TBL CHART ON
		CMN.KEYWORD = CAST(CHART.CHART_MAPPING_ID as varchar)
		LEFT OUTER JOIN
		(SELECT
		COUNT(DISTINCT FAVOURITE_ID) FAV_COUNT, OBJECT_ID,
		USER_ID FROM
		FAVOURITES_TBL WHERE USER_ID=? GROUP BY OBJECT_ID,
		USER_ID
		) F
		ON
		SRM.STORY_ID = F.OBJECT_ID
		WHERE SRM.STORY_ID = ? ORDER BY
		RPT_INDEX_INT ASC
	</query>
	<query key="LOAD_STORY_DETAIL_FOR_DUPLICATE">
	SELECT ST.STORY_ID, ST.TITLE,ST.DESCRIPTION,SRM.SELECTIONS,SRM.VIS_REPORT_PROPERTY,VARMT.ALIAS_VALUE,SRM.RPT_INDEX, SRM.WORKSPACE_ID,SRM.STORY_REPORT_ID,
	SRM.NOTES,CAST(SRM.RPT_INDEX AS INTEGER) RPT_INDEX_INT,SRM.LAST_UPDATED,SRM.CACHE_ID, SRM.TEXT_PANE_DATA,WST.WSP_TITLE, SRM.TYPE, CMN.KEYWORD,OIM.IMG_PATH,CHART.THUMBNAIL_PATH AS DEFAULT_IMG_PATH
	FROM STORY_REPORT_MAP SRM
	LEFT OUTER JOIN OBJECT_IMG_MAP_TBL OIM ON OIM.OBJECT_ID = SRM.WORKSPACE_ID OR OIM.OBJECT_ID = SRM.STORY_REPORT_ID 
	LEFT OUTER JOIN WSP_SUMM_TBL WST ON SRM.WORKSPACE_ID = WST.WSP_ID
	LEFT OUTER JOIN STORY_TBL ST ON SRM.STORY_ID = ST.STORY_ID
	LEFT OUTER JOIN CMN_SEARCH_TBL CMN ON SRM.WORKSPACE_ID = CMN.OBJECT_ID AND CMN.TYPE = 'AS Model Name'
	LEFT JOIN (SELECT DISTINCT CMN1.OBJECT_ID, CHART.THUMBNAIL_PATH FROM VIS_CHART_MAPPING_TBL CHART, 
		        (SELECT MAX(KEYWORD) as KEYWORD,OBJECT_ID FROM CMN_SEARCH_TBL WHERE TYPE = 'Thumbnail Type' GROUP BY OBJECT_ID ) CMN1 
		        WHERE CMN1.KEYWORD = (CHART.CHART_MAPPING_ID)::varchar) chart on chart.OBJECT_ID = SRM.WORKSPACE_ID
	LEFT JOIN VIS_ALIAS_RPT_MAP_TBL VARMT ON SRM.STORY_REPORT_ID = VARMT.REPORT_ID AND VARMT.ALIASED_COMPONENT_ID=6 WHERE SRM.STORY_ID =? AND STORY_REPORT_ID IS NOT NULL
	ORDER BY RPT_INDEX_INT ASC
	</query>
<!-- 	<query key="GET_STORY"> 
	SELECT TITLE,DESCRIPTION,CREATED,CREATED_BY,to_date(LAST_UPD::varchar ,'MM/DD/YYYY HH.MI.SS') AS LAST_UPD FROM STORY_TBL WHERE STORY_ID = ?
	</query> -->
	<query key="GET_STORY"> 
	SELECT TITLE,DESCRIPTION,CREATED,CREATED_BY,LAST_UPD AS LAST_UPD FROM STORY_TBL WHERE STORY_ID = ?
	</query>
	<query key="UPDATE_STORY_DETAILS">UPDATE STORY_TBL SET TITLE = ?, DESCRIPTION= CASE WHEN
		? IS NULL THEN DESCRIPTION ELSE ? END, LAST_UPD=CURRENT_TIMESTAMP, LAST_ACCESSED=CURRENT_TIMESTAMP,
		LAST_UPD_BY=? WHERE STORY_ID =?
	</query>
	<query key="INSERT_STORY_REPORT_MAPPING">INSERT INTO STORY_REPORT_MAP (STORY_ID,
		STORY_REPORT_ID, RPT_INDEX, WORKSPACE_ID, NOTES,
		TEXT_PANE_DATA,VIS_REPORT_PROPERTY) VALUES (?,?,?,?,?,?,?)
	</query>
	<query key="INSERT_STORY_REPORT_MAPPING_FOR_DUPLICATE">
		INSERT INTO STORY_REPORT_MAP (STORY_ID,
		STORY_REPORT_ID, RPT_INDEX,
		WORKSPACE_ID, NOTES,SELECTIONS,
		LAST_UPDATED, CACHE_ID,
		TEXT_PANE_DATA,VIS_REPORT_PROPERTY, TYPE)
		VALUES
		(?,?,?,?,?,?,CURRENT_TIMESTAMP(6),?,?,?,?)
	</query>
	<query key="GET_FAVORITES">SELECT * FROM FAVOURITES_TBL WHERE OBJECT_ID = ? AND
		USER_ID = ?
	</query>
	<query key="CREATE_FAVORITES">INSERT INTO FAVOURITES_TBL(FAVOURITE_ID, USER_ID,
		OBJ_TYPE_ID, OBJECT_ID, CREATED, LAST_UPD_BY, LAST_UPD) VALUES
		(NEXTVAL('FAVOURITE_ID'), ?, '1', ?, CURRENT_TIMESTAMP, ?,
		CURRENT_TIMESTAMP)
	</query>
	<query key="GENERATE_STORY_ID">select nextval('story_id')</query>
	<query key="CREATE_STORY">INSERT INTO STORY_TBL(STORY_ID, TITLE, DESCRIPTION,
		CREATED, CREATED_BY, LAST_UPD, LAST_ACCESSED, LAST_UPD_BY, GUIDED_STORY_ID,
		ORG_NAME,TYPE) VALUES (?,?,?,CURRENT_TIMESTAMP,
		?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?,?,CURRENT_ORG_NAME,?)
	</query>
	<query key="GET_ALL_ALIAS_ASC">SELECT ALIAS_ID,SEARCH_KEY, REPLACE_VALUE, DIMENSION,
		MATCH_CASE, IS_SHARED ,USER_ID FROM VIS_ALIAS_TBL WHERE USER_ID IN
		(??) AND ORG_NAME_EQUALS_CURRENT ORDER BY USER_ID,CREATED
	</query>
	<query key="GET_ALL_ALIAS_FOR_STORY_ID">SELECT ALIAS_ID,SEARCH_KEY,REPLACE_VALUE,
		DIMENSION,MATCH_CASE,IS_SHARED FROM VIS_ALIAS_TBL WHERE
		ORG_NAME_EQUALS_CURRENT AND USER_ID = (SELECT CREATED_BY FROM
		STORY_TBL WHERE STORY_ID = ?)
	</query>
	<query key="INSERT_ALIAS_DATA">INSERT INTO
		VIS_ALIAS_TBL(ALIAS_ID,USER_ID,SEARCH_KEY,REPLACE_VALUE,DIMENSION,CREATED,MATCH_CASE,IS_SHARED,ORG_NAME,CREATED_BY)
		VALUES(?,?,?,?,?,CURRENT_TIMESTAMP,?,?,CURRENT_ORG_NAME,CURRENT_LOGGED_IN_USER)
	</query>
	<query key="UPDATE_ALIAS_DATA">UPDATE VIS_ALIAS_TBL SET SEARCH_KEY =?, REPLACE_VALUE
		=?, LAST_UPD_BY = CURRENT_LOGGED_IN_USER, LAST_UPD = CURRENT_TIMESTAMP
		WHERE ALIAS_ID=?
	</query>
	<query key="DELETE_ALIAS_DATA">DELETE FROM VIS_ALIAS_TBL WHERE ALIAS_ID IN (??)
	</query>
	<query key="DELETE_ALL_ALIAS_DATA">DELETE FROM VIS_ALIAS_TBL WHERE USER_ID = ? AND
		ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="DELETE_TAGS_FOR_STORY">DELETE FROM CMN_SEARCH_TBL WHERE OBJECT_ID = ? AND
		TYPE='Tags' AND CREATED_BY=?
	</query>
	<query key="INSERT_TAGS_FOR_STORY">INSERT INTO CMN_SEARCH_TBL (OBJECT_ID, KEYWORD, TYPE,
		CREATED_BY, CREATED, LAST_UPD_BY, LAST_UPD) VALUES (?, ?, 'Tags', ?,
		CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP)
	</query>
	<query key="DELETE_DISPLAY_LIB_TAGS">DELETE FROM CMN_SEARCH_TBL WHERE OBJECT_ID = ? AND
		TYPE='isDisplayInLibrary'
	</query>
	<query key="INSERT_DISPLAY_LIB_TAGS">INSERT INTO CMN_SEARCH_TBL (OBJECT_ID, KEYWORD, TYPE,
		CREATED_BY, CREATED, LAST_UPD_BY, LAST_UPD) VALUES (?, ?,
		'isDisplayInLibrary', ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP)
	</query>
	<query key="GET_STORY_NAME_FOR_STORY_ID">SELECT TITLE FROM STORY_TBL WHERE STORY_ID = ?</query>
	<query key="GET_REPORT_ALIAS_NAME">SELECT ALIAS_VALUE,REPORT_ID FROM
		VIS_ALIAS_RPT_MAP_TBL WHERE ALIASED_COMPONENT_ID = 6 AND REPORT_ID IN
		(??)
	</query>
	<query key="GET_REPORT_ALIAS_NAME_BY_STORYREPORTID">SELECT ALIAS_VALUE FROM VIS_ALIAS_RPT_MAP_TBL WHERE
		ALIASED_COMPONENT_ID = 6 AND REPORT_ID = ?
	</query>
	<query key="GET_STORY_REPORT_SELECTIONS">SELECT NOTES, SELECTIONS FROM STORY_REPORT_MAP WHERE
		STORY_REPORT_ID=?
	</query>
	<query key="GET_STORY_UPDATED_DATE">SELECT LAST_UPDATED FROM STORY_REPORT_MAP WHERE
		STORY_REPORT_ID = ?
	</query>
	<query key="GET_CHART_ALIAS">SELECT ALIAS_ID, ALIASED_COMPONENT_ID, ALIAS_VALUE
		FROM VIS_ALIAS_RPT_MAP_TBL WHERE REPORT_ID = ?
	</query>
	<!-- Dimension selection query -->
	<query key="SELECT_HIERARCHIES_VIS_REPORT_EXTN_TBL">SELECT PARAMETER_VALUE FROM VIS_REPORT_EXTN_TBL WHERE
		WSP_ID = ? AND lower(PARAMETER_NAME)='hierarchies'
	</query>
	<query key="SELECT_PARAM_VIS_REPORT_EXTN_TBL">SELECT PARAMETER_NAME, PARAMETER_VALUE FROM
		VIS_REPORT_EXTN_TBL WHERE WSP_ID = ?
	</query>
	<query key="GET_REPORT_PARAMETERS_EXCEPT_HIERARCHIES">SELECT PARAMETER_NAME,PARAMETER_VALUE FROM
		VIS_REPORT_EXTN_TBL WHERE WSP_ID = ? AND PARAMETER_NAME
		!='Hierarchies'
	</query>
	<query key="GET_DIMENSION_FAVOURITES_FILTER">SELECT FAVORITE_ID, MEMBER_ID, MEMBER_NAME, MEMBER_FULLPATH, MEMBER_LEVEL_NAME FROM VIS_FAVORITES_DIM_MEMBER_TBL, CUBE_TBL WHERE CUBE_ID = MODEL_ID AND USER_ID = ? AND ORG_NAME_EQUALS_CURRENT AND MODEL_ID = ?::integer AND DIMENSION_NAME = ? AND HIERARCHY_NAME = ?</query>
	<query key="GET_DIMENSION_FAVOURITES_NO_FILTER">SELECT FAVORITE_ID, MEMBER_ID, MEMBER_NAME, MEMBER_FULLPATH, MEMBER_LEVEL_NAME FROM VIS_FAVORITES_DIM_MEMBER_TBL, CUBE_TBL WHERE CUBE_ID = MODEL_ID AND USER_ID = ? AND ORG_NAME_EQUALS_CURRENT AND MODEL_ID = ?::integer AND DIMENSION_NAME = ?</query>
	<query key="GET_FAVOURITE_CUST_OBJS" >
    	   SELECT F.FAVOURITE_ID, F.OBJECT_ID, NS.TITLE, NS.DIMENSION_NAME, O.OBJ_TYPE FROM FAVOURITES_TBL F, NAMED_SELECTIONS_SUMM_TBL NS, OBJ_TYPES_TBL O
            WHERE F.USER_ID = ?
            AND F.OBJ_TYPE_ID = O.OBJ_TYPE_ID
            AND F.OBJECT_ID = NS.OBJECT_ID
            AND CAST(NS.CUBE_ID AS VARCHAR) = ?
            AND NS.DIMENSION_NAME = ?
            AND (F.ORG_NAME_EQUALS_CURRENT OR UPPER(F.ORG_NAME) = UPPER(CURRENT_ORG_NAME))
    </query>
    <query key="GET_FAVOURITE_CUST_OBJ" >
    	   SELECT F.FAVOURITE_ID, F.OBJECT_ID, NS.TITLE, NS.DIMENSION_NAME, O.OBJ_TYPE FROM FAVOURITES_TBL F, NAMED_SELECTIONS_SUMM_TBL NS, OBJ_TYPES_TBL O
            WHERE F.USER_ID = ?
            AND F.OBJ_TYPE_ID = O.OBJ_TYPE_ID
            AND F.OBJECT_ID = NS.OBJECT_ID
            AND CAST(NS.CUBE_ID AS VARCHAR) = ?
            AND NS.DIMENSION_NAME = ?
            AND (F.ORG_NAME_EQUALS_CURRENT OR UPPER(F.ORG_NAME) = UPPER(CURRENT_ORG_NAME))
            AND LOWER (OBJ_TYPE) IN ( ??)
    </query>
    <query key="IS_FAVOURITE_CUST_OBJ_EXIST">
    	   SELECT F.FAVOURITE_ID FROM FAVOURITES_TBL F, OBJ_TYPES_TBL O
            WHERE F.USER_ID = ?
            AND F.OBJECT_ID = ?
            AND F.OBJ_TYPE_ID = O.OBJ_TYPE_ID
            AND F.OBJ_TYPE_ID = ?
            AND (F.ORG_NAME_EQUALS_CURRENT OR UPPER(F.ORG_NAME) = UPPER(CURRENT_ORG_NAME))
    </query>
    <query key="IS_FAVOURITE_DIM_MEM_EXIST">SELECT FAVORITE_ID FROM VIS_FAVORITES_DIM_MEMBER_TBL, CUBE_TBL WHERE CUBE_ID = MODEL_ID AND (MEMBER_ID = ? OR MEMBER_FULLPATH = ?) AND USER_ID = ? AND MODEL_ID = ?::integer AND ORG_NAME_EQUALS_CURRENT AND DIMENSION_NAME=?</query>
	<query key="INSERT_VIS_DIMENSION_INFO">INSERT INTO
		VIS_DIMENSION_INFO(DIMENSION_NAME,
		CATEGORY, APPLICATION_ID, MODEL_ID,
		HIERARCHIES, CREATED_BY, CREATED,
		LAST_UPD_BY, LAST_UPD, IS_PRIMARY,DISPLAY_IN_TG)
		VALUES (?, ?, 2, ?, ?, ?,
		CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?,?)
	</query>
	<query key="DELETE_VIS_DIMENSION_INFO_BY_MODEL">DELETE from
		VIS_DIMENSION_INFO WHERE MODEL_ID =
		?::integer
	</query>
	<query key="HAS_NO_HIERARCHY">SELECT HAS_NO_HIERARCHY from VIS_DIMENSION_INFO WHERE
		DIMENSION_NAME = ? AND MODEL_ID = ?::integer
	</query>
	<query key="GET_VIS_DIMENSION_INFO">SELECT HAS_NO_HIERARCHY,IS_PRIMARY,HIERARCHIES from
		VIS_DIMENSION_INFO WHERE DIMENSION_NAME = ? AND MODEL_ID = ?::integer
	</query>
	<query key="GET_ADDITIONAL_DIMENSIONS"> SELECT
		DIMENSION_NAME,CATEGORY,HAS_NO_HIERARCHY,IS_PRIMARY FROM
		VIS_DIMENSION_INFO where MODEL_ID = ?::integer AND (CATEGORY IS NOT
		NULL OR
		LOWER(IS_PRIMARY) = 'true') ORDER BY CATEGORY,DIMENSION_NAME
	</query>
	<query key="GET_ADDITIONAL_DIMENSIONS_WITH_CATEGORY"> SELECT
		DIMENSION_NAME,CATEGORY,HAS_NO_HIERARCHY,IS_PRIMARY FROM
		VIS_DIMENSION_INFO where MODEL_ID = ?::integer AND CATEGORY = ? ORDER
		BY
		CATEGORY,DIMENSION_NAME
	</query>
	<query key="GET_ADDITIONAL_DIMENSIONS_WITH_TG"> SELECT
		DIMENSION_NAME,CATEGORY,HAS_NO_HIERARCHY,IS_PRIMARY FROM
		VIS_DIMENSION_INFO where MODEL_ID = ?::integer AND DISPLAY_IN_TG = ?
		AND
		CATEGORY IS NOT NULL ORDER BY CATEGORY,DIMENSION_NAME
	</query>
	<query key="GET_ADDITIONAL_DIMENSIONS_WITH_TG_WITH_CATEGORY"> SELECT
		DIMENSION_NAME,CATEGORY,HAS_NO_HIERARCHY,IS_PRIMARY FROM
		VIS_DIMENSION_INFO where MODEL_ID = ?::integer AND DISPLAY_IN_TG = ?
		AND
		CATEGORY = ? ORDER BY CATEGORY,DIMENSION_NAME
	</query>
	<query key="GET_DIMENSION_FROM_METADATA">SELECT DISTINCT(DIMENSION_NAME_VALUE) FROM
		VIS_DIMENSIONNAME_LOOKUP where DIMENSION_NAME_KEYWORD IN (SELECT
		METADATA_VALUE from VIS_METADATA_TBL where MODEL_ID = ?::integer OR
		MODEL_ID = ?::integer
		AND METADATA_NAME= ?) AND LOCALE= ?
	</query>

	<query key="GET_OBJ_TYPE_ID">select obj_type_id from obj_types_tbl where
		lower(obj_type) =?
	</query>
	<query key="CHECKOBJECTTYPEIDEXISTS">select OBJ_TYPE_ID from obj_types_tbl where OBJ_TYPE_ID =?</query>
	<query key="GENERATE_FAV_ID">select nextval('FAVOURITE_ID')</query>
	<query key="INSERT_FAVOURITE">INSERT INTO
		FAVOURITES_TBL(FAVOURITE_ID,USER_ID,OBJ_TYPE_ID,OBJECT_ID,CREATED,ORG_NAME)
		VALUES(?,?,?,?,CURRENT_TIMESTAMP,CURRENT_ORG_NAME)
	</query>
	<query key="REMOVE_FAVOURITE">DELETE FROM FAVOURITES_TBL where FAVOURITE_ID = ?</query>
	<query key="INSERT_FAVOURITE_DIMENSION">INSERT INTO VIS_FAVORITES_DIM_MEMBER_TBL(FAVORITE_ID, MEMBER_ID, MEMBER_NAME, MEMBER_FULLPATH, MEMBER_LEVEL_NAME, DIMENSION_NAME, HIERARCHY_NAME, USER_ID, MODEL_ID, ORG_NAME) VALUES(?::numeric, ?, ?, ?, ?, ?, ?, ?, ?::numeric, CURRENT_ORG_NAME)</query>
	<query key="REMOVE_FAVOURITE_DIMENSION">DELETE FROM VIS_FAVORITES_DIM_MEMBER_TBL where FAVORITE_ID = ?::varchar</query>
	<query key="SELECT_FOLDER_ID_FROM_FOLDER_MASTER_FORUSER">SELECT FOLDER_ID FROM FOLDER_MASTER WHERE NAME=? AND
		PARENT_ID=?::numeric AND SCOPE=?::integer AND CREATED_BY=? AND
		ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="SELECT_FOLDER_ID_FROM_FOLDER_MASTER_FOR_SHARED_USER">SELECT FOLDER_ID FROM FOLDER_MASTER WHERE NAME=? AND
		PARENT_ID=?::numeric AND SCOPE=?::integer AND ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="INSERT_INTO_FOLDER_MASTER_WHERE_1">INSERT INTO FOLDER_MASTER(FOLDER_ID, PARENT_ID, NAME,
		SCOPE, ASSET_ID, DESCRIPTION, CREATED, CREATED_BY, ORG_NAME) VALUES
		(?::numeric,?,?,?,?,?,?,?,CURRENT_ORG_NAME)
	</query>
	<query key="GET_ERROR_MSG">SELECT ERROR_CODE,ERROR_MSG,SEVERITY FROM
		ERROR_MESSAGES WHERE ERROR_CODE IN (?)
	</query>
	<query key="GET_ERROR_MESSAGES">SELECT ERROR_CODE, ERROR_MSG FROM ERROR_MESSAGES WHERE
		REGION || '_' || LANGUAGE = ?
	</query>



	<query key="GET_DESK_LIST_FOR_USER">
		SELECT VD.DESK_ID FROM VIS_DESK VD, (SELECT DESK_ID
		FROM VIS_DESK WHERE
		CREATED_BY = ?
		UNION SELECT DESK_ID FROM
		ADM_GRP_USR_MAP AGUM, VIS_DESK_GRP_MAP VDGM WHERE
		AGUM.GROUP_ID =
		VDGM.GROUP_ID AND AGUM.USER_ID = ?
		UNION SELECT DESK_ID FROM
		VIS_DESK_USER_MAP WHERE USER_ID = ?
		) OTH_VD
		WHERE
		ORG_NAME_EQUALS_CURRENT
		AND (VD.TARGET_APP IS NULL OR UPPER(VD.TARGET_APP) = 'MOBILE')
		AND
		(coalesce(VD.IS_DASHBOARD_DESK,'false') != ?)
		AND vd.DESK_ID =
		OTH_VD.DESK_ID
		ORDER BY DESK_NAME
	</query>
	<query key="GET_DESK_LIST_FOR_MOBILE_USER">
		SELECT VD.DESK_ID FROM VIS_DESK VD, (SELECT DESK_ID
		FROM VIS_DESK WHERE
		CREATED_BY = ?
		UNION SELECT DESK_ID FROM
		ADM_GRP_USR_MAP AGUM, VIS_DESK_GRP_MAP VDGM WHERE
		AGUM.GROUP_ID =
		VDGM.GROUP_ID AND AGUM.USER_ID = ?
		UNION SELECT DESK_ID FROM
		VIS_DESK_USER_MAP WHERE USER_ID = ?
		) OTH_VD
		WHERE
		ORG_NAME_EQUALS_CURRENT
		AND (UPPER(VD.TARGET_APP) = 'MOBILE')
		AND
		(coalesce(VD.IS_DASHBOARD_DESK,'false') != ?)
		AND vd.DESK_ID =
		OTH_VD.DESK_ID
		ORDER BY DESK_NAME
	</query>
	<query key="GET_DESK_PERSONALIZATION_DETAILS">
		SELECT DSK.DESK_ID,
		DSMAP.STORY_ID,
		SRMAP.WORKSPACE_ID,
		SRMAP.STORY_REPORT_ID,
		PRSZ.SELECTION AS DESK_SELECTIONS
		FROM VIS_DESK
		DSK, VIS_DESK_STORY_MAP DSMAP, STORY_TBL STY,
		STORY_REPORT_MAP SRMAP,
		WSP_SUMM_TBL WSP,
		(SELECT DESK_ID,STORY_ID,STORY_REPORT_ID,SELECTION
		FROM
		VIS_DESK_PERSONALIZATION_TBL WHERE CREATED_BY = ?) PRSZ
		WHERE
		DSMAP.DESK_ID = DSK.DESK_ID
		AND STY.STORY_ID = DSMAP.STORY_ID
		AND
		SRMAP.STORY_ID = STY.STORY_ID
		AND WSP.WSP_ID = SRMAP.WORKSPACE_ID
		AND
		PRSZ.DESK_ID = DSK.DESK_ID
		AND DSK.DESK_ID = ?
	</query>

	<query key="GET_DESK_CACHE_BLUE_PRINT">
		SELECT VD.DESK_NAME, VD.DESK_ID, VD.LAST_CACHED_ON,VD.LAST_UPD,
		vdc.cache_data, coalesce(IS_DASHBOARD_DESK, 'false') AS
		IS_DASHBOARD_DESK, DASHBOARD_CONFIGURATION
		,VDFAV.STORY_REPORT_ID ,CASE WHEN VDFAV.DESK_ID IS NULL THEN 'false' ELSE 'true' END as IS_FAV
		from VIS_DESK VD LEFT OUTER
		JOIN VIS_DESK_CACHE VDC ON (VD.DESK_ID =
		vdc.desk_id) LEFT OUTER
		JOIN VIS_DESK_REPORT_FAV VDFAV ON (VD.DESK_ID =
		VDFAV.desk_id)
		WHERE VD.DESK_ID =
		?
		AND coalesce(IS_DASHBOARD_DESK, 'false') != ?
		AND (STRY_IDX IS NULL OR
		STRY_IDX = -2)
		AND VDC.SECURITY_KEY IS NULL
	</query>
	
		<query key="GET_DESK_CACHE_BLUE_PRINT_BY_IDS">
		SELECT VD.DESK_NAME, VD.DESK_ID, VD.LAST_CACHED_ON, VD.LAST_UPD, vdc.cache_data, NVL(IS_DASHBOARD_DESK, 'false') "IS_DASHBOARD_DESK", DASHBOARD_CONFIGURATION 
				,VDFAV.STORY_REPORT_ID ,CASE WHEN VDFAV.DESK_ID IS NULL THEN 'false' ELSE 'true' END as IS_FAV
										from VIS_DESK VD 
										LEFT OUTER JOIN VIS_DESK_CACHE VDC ON VD.DESK_ID = VDC.desk_id
										LEFT OUTER JOIN VIS_DESK_REPORT_FAV VDFAV ON VD.DESK_ID = VDFAV.desk_id
																WHERE VD.DESK_ID IN (??)
																AND NVL(IS_DASHBOARD_DESK, 'false') != ?
																AND STRY_IDX = -2
																AND VDC.SECURITY_KEY IS NULL
	</query>
	
<query key="GET_DESK_CACHE_BLUE_PRINT_BY_ORG">
		SELECT VD.DESK_NAME, VD.DESK_ID, VD.LAST_CACHED_ON, VD.LAST_UPD, vdc.cache_data, NVL(IS_DASHBOARD_DESK, 'false') "IS_DASHBOARD_DESK", DASHBOARD_CONFIGURATION 
				,VDFAV.STORY_REPORT_ID ,CASE WHEN VDFAV.DESK_ID IS NULL THEN 'false' ELSE 'true' END as IS_FAV
										from VIS_DESK VD 
										LEFT OUTER JOIN VIS_DESK_CACHE VDC ON VD.DESK_ID = VDC.desk_id
										LEFT OUTER JOIN VIS_DESK_REPORT_FAV VDFAV ON VD.DESK_ID = VDFAV.desk_id
																WHERE NVL(lower(ORG_NAME), 'default') LIKE (lower(?))
																AND NVL(IS_DASHBOARD_DESK, 'false') != ?
																AND STRY_IDX = -2
																AND VDC.SECURITY_KEY IS NULL
	</query>
	
	<query key="GET_DESK_CACHE_STATUS_MESSAGE">
		SELECT STATUS_MESSAGE FROM VIS_DESK_CACHE WHERE
		DESK_ID = ? AND STRY_IDX = -2 AND SECURITY_KEY IS NULL
	</query> 


	<query key="GET_DESK_CACHE_STATUS_MESSAGE_WITH_SECURITY_KEY">
		SELECT STATUS_MESSAGE FROM VIS_DESK_CACHE WHERE
		DESK_ID = ? AND STRY_IDX = -2 AND SECURITY_KEY = ?
	</query>


	<query key="GET_DESK_CACHE_BLUE_PRINT_WITH_SEC">
		SELECT VD.DESK_NAME, VD.DESK_ID, VD.LAST_CACHED_ON,
		vdc.cache_data, coalesce(IS_DASHBOARD_DESK, 'false') AS
		IS_DASHBOARD_DESK, DASHBOARD_CONFIGURATION
		,VDFAV.STORY_REPORT_ID ,CASE WHEN VDFAV.DESK_ID IS NULL THEN 'false' ELSE 'true' END as IS_FAV
		from VIS_DESK VD LEFT OUTER
		JOIN VIS_DESK_CACHE VDC ON VD.DESK_ID = vdc.desk_id
		LEFT OUTER
		JOIN VIS_DESK_REPORT_FAV VDFAV ON (VD.DESK_ID =
		VDFAV.desk_id)
		WHERE VD.DESK_ID =
		?
		AND coalesce(IS_DASHBOARD_DESK, 'false') != ?
		AND (VDC.SECURITY_KEY IS
		NULL OR VDC.SECURITY_KEY = ?)
		AND (VDC.STRY_IDX IS NULL OR VDC.STRY_IDX
		= -2)
	</query>

	<query key="GET_FIRST_REPORT_LIST_FROM_DESK_CACHE">
		SELECT VD.DESK_NAME, VD.DESK_ID, VD.LAST_CACHED_ON,
		vdc.cache_data, coalesce(IS_DASHBOARD_DESK, 'false') as
		IS_DASHBOARD_DESK, DASHBOARD_CONFIGURATION
		from VIS_DESK VD LEFT OUTER
		JOIN VIS_DESK_CACHE VDC ON VD.DESK_ID = vdc.desk_id
		WHERE VD.DESK_ID =
		?
		AND coalesce(IS_DASHBOARD_DESK, 'false') != ?
		AND STRY_IDX = -1
	</query>

	<query key="GET_FIRST_REPORT_LIST_FROM_DESK_CACHE_MC">
		SELECT VD.DESK_NAME, VD.DESK_ID, VD.LAST_CACHED_ON,
		vdc.cache_data, coalesce(IS_DASHBOARD_DESK, 'false') as
		IS_DASHBOARD_DESK, DASHBOARD_CONFIGURATION
		from VIS_DESK VD LEFT OUTER
		JOIN VIS_DESK_CACHE VDC ON VD.DESK_ID = vdc.desk_id
		WHERE VD.DESK_ID =
		?
		AND coalesce(IS_DASHBOARD_DESK, 'false') != ?
		AND (VDC.SECURITY_KEY IS
		NULL OR VDC.SECURITY_KEY = ?)
		AND STRY_IDX = -1
	</query>

	<query key="GET_REST_REPORT_LIST_FROM_DESK_CACHE">
		SELECT VD.DESK_NAME, VD.DESK_ID, VD.LAST_CACHED_ON,
		vdc.cache_data, coalesce(IS_DASHBOARD_DESK, 'false') as
		IS_DASHBOARD_DESK, DASHBOARD_CONFIGURATION
		from VIS_DESK VD LEFT OUTER
		JOIN VIS_DESK_CACHE VDC ON VD.DESK_ID = vdc.desk_id
		WHERE VD.DESK_ID =
		?
		AND coalesce(IS_DASHBOARD_DESK, 'false') != ?
		AND STRY_IDX = ?
	</query>

	<query key="GET_REST_REPORT_LIST_FROM_DESK_CACHE_MC">
		SELECT VD.DESK_NAME, VD.DESK_ID, VD.LAST_CACHED_ON,
		vdc.cache_data, coalesce(IS_DASHBOARD_DESK, 'false') as
		IS_DASHBOARD_DESK, DASHBOARD_CONFIGURATION
		from VIS_DESK VD LEFT OUTER
		JOIN VIS_DESK_CACHE VDC ON VD.DESK_ID = vdc.desk_id
		WHERE VD.DESK_ID =
		?
		AND coalesce(IS_DASHBOARD_DESK, 'false') != ?
		AND STRY_IDX = ?
		AND
		(VDC.SECURITY_KEY IS NULL OR VDC.SECURITY_KEY = ?)
	</query>

	<query key="GET_ALL_DESK_INFO">
		SELECT DESK_ID, DESK_NAME, CREATED_BY, CAST(CREATED_ON
		AS TIMESTAMP) AS CREATED_ON,
		CAST(LAST_UPD AS TIMESTAMP) AS LAST_UPD,
		LAST_UPD_BY, coalesce(IS_DASHBOARD_DESK,
		'false') as IS_DASHBOARD_DESK,
		DASHBOARD_CONFIGURATION
		FROM VIS_DESK
		WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE') AND
		coalesce(ORG_NAME, 'default') LIKE (?)
		ORDER BY DESK_NAME
	</query>


	<query key="GET_DESKS_INFO_BY_ID">
		SELECT DESK.DESK_ID,
		DESK.DESK_NAME,
		DESK.CREATED_BY,
		CAST(DESK.CREATED_ON AS TIMESTAMP) AS CREATED_ON,
		CAST(DESK.LAST_UPD AS
		TIMESTAMP) AS LAST_UPD,
		DESK.LAST_UPD_BY,
		DESK.LAST_CACHED_ON,
		coalesce(IS_DASHBOARD_DESK, 'false') as IS_DASHBOARD_DESK,
		DASHBOARD_CONFIGURATION
		FROM VIS_DESK DESK WHERE DESK.DESK_ID IN (??)
	</query>

	<query key="GET_ALL_DESKS_EXCEPT">
		SELECT DESK_ID, DESK_NAME, CREATED_BY, CAST(CREATED_ON
		AS TIMESTAMP) AS
		CREATED_ON,
		CAST(LAST_UPD AS TIMESTAMP) AS LAST_UPD,
		LAST_UPD_BY
		FROM VIS_DESK WHERE DESK_ID IN (SELECT DESK_ID FROM
		VIS_DESK WHERE
		lower(CREATED_BY) = lower(?)
		UNION SELECT VD.DESK_ID FROM VIS_DESK VD
		JOIN
		VIS_DESK_GRP_MAP VDGM ON VD.DESK_ID = VDGM.DESK_ID JOIN
		ADM_GRP_USR_MAP AGUM ON VDGM.GROUP_ID = AGUM.GROUP_ID WHERE
		lower(AGUM.USER_ID) = lower(?)
		UNION SELECT VD.DESK_ID FROM VIS_DESK VD JOIN
		VIS_DESK_USER_MAP VDUM ON VD.DESK_ID = VDUM.DESK_ID WHERE lower(VDUM.USER_ID)
		=lower(?))
		AND DESK_ID NOT IN (?) AND ORG_NAME_EQUALS_CURRENT AND (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE')
		AND (coalesce(IS_DASHBOARD_DESK,'false') != ?)
		ORDER BY
		DESK_NAME
	</query>
	
	<query key="GET_ALL_DESKS_EXCEPT_4_MOBILE_USER">
		SELECT DESK_ID, DESK_NAME, CREATED_BY, CAST(CREATED_ON
		AS TIMESTAMP) AS
		CREATED_ON,
		CAST(LAST_UPD AS TIMESTAMP) AS LAST_UPD,
		LAST_UPD_BY
		FROM VIS_DESK WHERE DESK_ID IN (SELECT DESK_ID FROM
		VIS_DESK WHERE
		lower(CREATED_BY) = lower(?)
		UNION SELECT VD.DESK_ID FROM VIS_DESK VD
		JOIN
		VIS_DESK_GRP_MAP VDGM ON VD.DESK_ID = VDGM.DESK_ID JOIN
		ADM_GRP_USR_MAP AGUM ON VDGM.GROUP_ID = AGUM.GROUP_ID WHERE
		lower(AGUM.USER_ID) = lower(?)
		UNION SELECT VD.DESK_ID FROM VIS_DESK VD JOIN
		VIS_DESK_USER_MAP VDUM ON VD.DESK_ID = VDUM.DESK_ID WHERE lower(VDUM.USER_ID)
		=lower(?))
		AND DESK_ID NOT IN (?) AND ORG_NAME_EQUALS_CURRENT AND UPPER(TARGET_APP) = 'MOBILE'
		AND (coalesce(IS_DASHBOARD_DESK,'false') != ?)
		ORDER BY
		DESK_NAME
	</query>

	<query key="GET_DESK_LIST_WITH_STRY_N_RPT_COUNT">
		Select TBL.DESK_ID,
		DESK_NAME,
		IS_STATIC,
		CREATED_BY,
		CREATED_ON,
		LAST_UPD,
		LAST_UPD_BY,
		IS_DASHBOARD_DESK,
		STORY_COUNT,
		REPORTS_COUNT,
		LAST_CACHED_ON,
		LAST_CACHED_STATUS,
		LOGTBL.MESSAGE,
		DEFAULT_DESK,
		TARGET_APP
		FROM
		(
		Select DISTINCT
		DESK_ID,
		DESK_NAME,
		IS_STATIC,
		CREATED_BY,
		CREATED_ON,
		LAST_UPD,
		LAST_UPD_BY,
		IS_DASHBOARD_DESK,
		COUNT(STORY_ID) OVER (PARTITION BY DESK_ID)        AS STORY_COUNT,
		SUM(case when
		RPT_COUNT_PER_STORY > ?
		then ? else RPT_COUNT_PER_STORY end)
		OVER(partition by DESK_ID) as
		REPORTS_COUNT,
		LAST_CACHED_ON,
		LAST_CACHED_STATUS,
		TARGET_APP,
		(CASE
			      WHEN DEF_DESK_ID IS NOT NULL
			      THEN 'YES'
			      ELSE 'NO'
			    END) AS DEFAULT_DESK
		From (
		SELECT DISTINCT
		VD.DESK_ID,
		VD.DESK_NAME,
		VD.IS_STATIC,
		VD.CREATED_BY,
		SRM.STORY_ID,
		VD.TARGET_APP,
		CAST(VD.CREATED_ON
		AS
		TIMESTAMP) AS CREATED_ON,
		CAST(VD.LAST_UPD AS TIMESTAMP) AS
		LAST_UPD,
		VD.LAST_UPD_BY,
		coalesce(VD.IS_DASHBOARD_DESK, 'false') AS
		IS_DASHBOARD_DESK,
		COUNT(SRM.STORY_REPORT_ID) OVER
		(PARTITION BY VDSM.STORY_ID)
		AS RPT_COUNT_PER_STORY,
		VD.LAST_CACHED_ON,
		VD.STATUS AS LAST_CACHED_STATUS,
		VDD.DESK_ID AS DEF_DESK_ID
		FROM VIS_DESK VD LEFT OUTER JOIN
		VIS_DESK_STORY_MAP VDSM ON (VD.DESK_ID
		= VDSM.DESK_ID) LEFT OUTER JOIN
		STORY_REPORT_MAP SRM ON (VDSM.STORY_ID
		=
		SRM.STORY_ID)
		LEFT OUTER JOIN VIS_DEFAULT_DESK_TBL VDD
   		ON (VD.DESK_ID = VDD.DESK_ID)
		WHERE
		VD.ORG_NAME_EQUALS_CURRENT
		AND (VD.TARGET_APP IS NULL OR UPPER(VD.TARGET_APP) = 'MOBILE')) as tmp)
		TBL LEFT
		OUTER JOIN
		(Select TAB1.DESK_ID, TAB1.MESSAGE FROM
		VIS_DESK_FILE_GEN_LOG
		TAB1,
		(Select DESK_ID, MAX(END_TIME) AS END_TIME
		from
		VIS_DESK_FILE_GEN_LOG GROUP
		BY DESK_ID) TAB2
		WHERE TAB1.DESK_ID =
		TAB2.DESK_ID
		AND UPPER(TAB1.STATUS) = 'FAILURE'
		AND TAB1.END_TIME =
		TAB2.END_TIME)
		LOGTBL ON (TBL.DESK_ID
		= LOGTBL.DESK_ID)
		ORDER BY
		DESK_NAME
	</query>
	<query key="GET_DESK_DETAIL_WITH_STORY_INFO">
		SELECT DISTINCT (CASE WHEN IS_DEFAULT IS NULL THEN 'false' ELSE 'true' END) AS IS_DEFAULT_DESK,
		VD.IS_STATIC, VD.TARGET_APP, VD.RUNAS_USERID,
		VD.DESK_ID,
		VD.DESK_NAME, VDSM.STORY_INDEX, ST.STORY_ID,ST.TITLE,
		VDGM.GROUP_ID,
		VDUM.USER_ID,
		COUNT (SRM.STORY_REPORT_ID) over (PARTITION
		BY
		SRM.STORY_ID) AS REPORTS_COUNT,
		CAST(VD.LAST_UPD AS TIMESTAMP) AS
		LAST_UPD,VD.LAST_UPD_BY, VD.IS_DASHBOARD_DESK,
		CAST(VD.DASHBOARD_CONFIGURATION as character) AS
		DASHBOARD_CONFIGURATION
		FROM
		VIS_DESK as VD LEFT OUTER JOIN
		VIS_DESK_GRP_MAP as VDGM ON (VD.DESK_ID = VDGM.DESK_ID)
		LEFT OUTER JOIN
		VIS_DESK_USER_MAP as VDUM ON (VD.DESK_ID = VDUM.DESK_ID)
		LEFT OUTER
		JOIN VIS_DESK_STORY_MAP as VDSM ON (VD.DESK_ID = VDSM.DESK_ID)
		LEFT
		OUTER JOIN STORY_REPORT_MAP as SRM ON (VDSM.STORY_ID =
		SRM.STORY_ID)
		LEFT OUTER JOIN STORY_TBL as ST ON (SRM.STORY_ID = ST.STORY_ID)
		LEFT OUTER JOIN (Select DESK_ID, COUNT(DESK_ID) OVER (PARTITION BY DESK_ID) AS IS_DEFAULT FROM VIS_DEFAULT_DESK_TBL WHERE DESK_ID = ?) AS VDD
		ON VD.DESK_ID = VDD.DESK_ID
		where
		VD.DESK_ID = ?
		ORDER BY VDSM.STORY_INDEX
	</query>
	<query key="IS_DESK_ACCESSIBLE">
		SELECT DESK_ID FROM VIS_DESK WHERE DESK_ID IN (SELECT
		DESK_ID FROM VIS_DESK
		WHERE lower(CREATED_BY) = lower(?)
		UNION SELECT VD.DESK_ID FROM
		VIS_DESK VD JOIN VIS_DESK_GRP_MAP VDGM ON
		VD.DESK_ID = VDGM.DESK_ID
		JOIN ADM_GRP_USR_MAP AGUM ON VDGM.GROUP_ID = AGUM.GROUP_ID WHERE
		lower(AGUM.USER_ID) = lower(?)
		UNION SELECT VD.DESK_ID FROM VIS_DESK VD JOIN
		VIS_DESK_USER_MAP VDUM ON
		VD.DESK_ID = VDUM.DESK_ID WHERE lower(VDUM.USER_ID)
		= lower(?))
		AND DESK_ID = ? AND ORG_NAME_EQUALS_CURRENT AND (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE')
		AND (coalesce(IS_DASHBOARD_DESK,'false') != ?)
		ORDER BY DESK_NAME
	</query>
	<query key="IS_DESK_ACCESSIBLE_4_MOBILE_USER">
		SELECT DESK_ID FROM VIS_DESK WHERE DESK_ID IN (SELECT
		DESK_ID FROM VIS_DESK
		WHERE lower(CREATED_BY) = lower(?)
		UNION SELECT VD.DESK_ID FROM
		VIS_DESK VD JOIN VIS_DESK_GRP_MAP VDGM ON
		VD.DESK_ID = VDGM.DESK_ID
		JOIN ADM_GRP_USR_MAP AGUM ON VDGM.GROUP_ID = AGUM.GROUP_ID WHERE
		lower(AGUM.USER_ID) = lower(?)
		UNION SELECT VD.DESK_ID FROM VIS_DESK VD JOIN
		VIS_DESK_USER_MAP VDUM ON
		VD.DESK_ID = VDUM.DESK_ID WHERE lower(VDUM.USER_ID)
		= lower(?))
		AND DESK_ID = ? AND ORG_NAME_EQUALS_CURRENT AND UPPER(TARGET_APP) = 'MOBILE'
		AND (coalesce(IS_DASHBOARD_DESK,'false') != ?)
		ORDER BY DESK_NAME
	</query>

	<query key="GET_COMPLETE_DESK_DETAILS_BY_STORY"> 
		SELECT OIMT.IMG_PATH as CUSTOM_IMG_PATH,DFLT_IMG.THUMBNAIL_PATH, COUNT(DESK.DESK_ID) OVER (partition BY DESK.DESK_ID) AS ITERATION_INDEX, DESK.ORG_NAME, DESK.STATUS,
    			DESK.DESK_ID, DESK.DESK_NAME, DESK.CREATED_BY, CAST(DESK.CREATED_ON AS TIMESTAMP) AS "CREATED_ON",
			  CAST(DESK.LAST_UPD AS TIMESTAMP)   AS "LAST_UPD", DESK.LAST_UPD_BY, DESK.LAST_CACHED_ON,
			  coalesce(DESK.IS_DASHBOARD_DESK, 'false') "IS_DASHBOARD_DESK", DESK.DASHBOARD_CONFIGURATION,
			  STY.STORY_ID, DSMAP.STORY_INDEX, STY.TITLE, STY.CREATED_BY AS STORY_AUTHOR_ID,
			  STY.ORG_NAME, SRMAP.WORKSPACE_ID, SRMAP.STORY_REPORT_ID, CAST(SRMAP.RPT_INDEX AS INTEGER) RPT_INDEX,
			  WSP.WSP_TITLE, WSP.CREATED_BY   AS WSP_AUTHOR_ID, WSP.LAST_UPD     AS WSP_LAST_UPDATED,
			  SRMAP.SELECTIONS AS STORY_SELECTIONS,DESK.RUNAS_USERID,
			  RPT_ALIAS.ALIAS_VALUE AS RPT_ALIAS_NAME,
			  WSP.WSP_DESCRIPTION,
			  SRMAP.TYPE,
			  SRMAP.VIS_REPORT_PROPERTY,
			  SRMAP.NOTES,
       		  WSP.CUBE_ID AS MODEL_ID
		FROM (Select cache_priority,
		DESK_ID,DESK_NAME,DESK_INDEX,ORG_NAME,CREATED_BY,CREATED_ON,LAST_UPD,LAST_UPD_BY,TARGET_APP,RUNAS_USERID,
		LAST_CACHED_ON,STATUS,IS_DASHBOARD_DESK,DASHBOARD_CONFIGURATION FROM
		VIS_DESK WHERE CAST(desk_id AS VARCHAR) IN (??)) as DESK left outer join
		(Select * from
		VIS_DESK_STORY_MAP WHERE STORY_ID = ? AND CAST(desk_id AS VARCHAR) IN (??))
		DSMAP ON
		DSMAP.DESK_ID = DESK.DESK_ID left outer join

		(Select * from STORY_TBL
		WHERE STORY_ID = ?) STY ON STY.STORY_ID =
		DSMAP.STORY_ID left outer
		join

		(Select * FROM STORY_REPORT_MAP WHERE STORY_ID = ? AND STORY_REPORT_ID IS NOT NULL) SRMAP ON
		SRMAP.STORY_ID =
		STY.STORY_ID left outer join
		(Select REPORT_ID, ALIAS_VALUE from (SELECT ALIAS_TBL.report_id,
		ALIAS_VALUE,
		ROW_NUMBER() OVER(PARTITION BY ALIAS_TBL.report_id ORDER
		BY
		LATEST_CREATED) ROWINDEX
		FROM VIS_ALIAS_RPT_MAP_TBL ALIAS_TBL,
		(SELECT report_id,MAX(CREATED)AS
		LATEST_CREATED FROM
		VIS_ALIAS_RPT_MAP_TBL WHERE ALIASED_COMPONENT_ID = 6 GROUP BY
		REPORT_ID) MX_ALIAS_TBL
		WHERE ALIAS_TBL.REPORT_ID =
		MX_ALIAS_TBL.REPORT_ID
		AND ALIASED_COMPONENT_ID = 6 AND
		CREATED = LATEST_CREATED) tmp WHERE
		ROWINDEX = 1) RPT_ALIAS
		ON
		RPT_ALIAS.REPORT_ID = SRMAP.STORY_REPORT_ID
		left outer join
		(Select WST.WSP_ID, WST.WSP_DESCRIPTION,WST.WSP_TITLE, WST.LAST_UPD, WST.CREATED_BY, CPT.CUBE_ID 
			FROM WSP_SUMM_TBL WST INNER JOIN WSP_PAGE_TBL WPT ON WST.WSP_ID = WPT.WSP_ID
		 						  INNER JOIN WSP_PANE_TBL WNT ON WPT.PAGE_ID = WNT.PAGE_ID
		 			 			  INNER JOIN CMN_REPORT_TBL CPT ON WNT.OBJECT_ID = CPT.REPORT_ID) WSP ON WSP.WSP_ID = SRMAP.WORKSPACE_ID left
		outer join
		OBJECT_IMG_MAP_TBL OIMT ON OIMT.OBJECT_ID = WSP.WSP_ID left
		outer join

		(SELECT DISTINCT CMN.OBJECT_ID, CHART.THUMBNAIL_PATH FROM
		VIS_CHART_MAPPING_TBL CHART,
		(SELECT MAX(KEYWORD) as KEYWORD,OBJECT_ID
		FROM CMN_SEARCH_TBL WHERE TYPE IN ('Custom Thumbnail Type', 'Thumbnail Type')
		 GROUP BY OBJECT_ID )
		CMN
		WHERE CAST(CMN.KEYWORD AS INTEGER) = CAST(CHART.CHART_MAPPING_ID AS
		INTEGER)) DFLT_IMG ON DFLT_IMG.OBJECT_ID = WSP.WSP_ID

		ORDER BY CAST(DESK.cache_priority AS INTEGER),
		CAST(DESK.DESK_ID AS INTEGER), CAST(DSMAP.STORY_INDEX AS INTEGER),
		CAST(SRMAP.RPT_INDEX AS INTEGER)
	</query>

	<query key="GET_COMPLETE_DESK_DETAILS">
		SELECT OIMT.IMG_PATH as CUSTOM_IMG_PATH,DFLT_IMG.THUMBNAIL_PATH, COUNT(DESK.DESK_ID) OVER (partition BY DESK.DESK_ID) AS ITERATION_INDEX, DESK.DESK_ID, DESK.DESK_NAME, DESK.CREATED_BY, DESK.ORG_NAME, DESK.STATUS,
    				CAST(DESK.CREATED_ON AS TIMESTAMP) AS "CREATED_ON",
			  CAST(DESK.LAST_UPD AS TIMESTAMP)   AS "LAST_UPD", DESK.LAST_UPD_BY, DESK.LAST_CACHED_ON,
			  coalesce(DESK.IS_DASHBOARD_DESK, 'false') "IS_DASHBOARD_DESK", DESK.DASHBOARD_CONFIGURATION,
			  STY.STORY_ID, DSMAP.STORY_INDEX, STY.TITLE, STY.CREATED_BY AS STORY_AUTHOR_ID,
			  STY.ORG_NAME, SRMAP.WORKSPACE_ID, SRMAP.STORY_REPORT_ID, CAST(SRMAP.RPT_INDEX AS INTEGER) RPT_INDEX,
			  WSP.WSP_TITLE, WSP.CREATED_BY   AS WSP_AUTHOR_ID, WSP.LAST_UPD     AS WSP_LAST_UPDATED,
			  SRMAP.SELECTIONS AS STORY_SELECTIONS,
			  RPT_ALIAS.ALIAS_VALUE AS RPT_ALIAS_NAME,
			  DESK.RUNAS_USERID,
			  WSP.WSP_DESCRIPTION,
			  SRMAP.TYPE,
			  SRMAP.VIS_REPORT_PROPERTY,
			  SRMAP.NOTES,
       		  WSP.CUBE_ID AS MODEL_ID
		FROM
		(Select cache_priority,
		DESK_ID,DESK_NAME,DESK_INDEX,ORG_NAME,CREATED_BY,CREATED_ON,LAST_UPD,LAST_UPD_BY,TARGET_APP,RUNAS_USERID,
		LAST_CACHED_ON,STATUS,IS_DASHBOARD_DESK,DASHBOARD_CONFIGURATION FROM
		VIS_DESK WHERE CAST(desk_id AS VARCHAR) IN (??)) DESK LEFT OUTER JOIN
		VIS_DESK_STORY_MAP DSMAP ON DSMAP.DESK_ID = DESK.DESK_ID LEFT OUTER
		JOIN
		STORY_TBL STY ON STY.STORY_ID = DSMAP.STORY_ID LEFT OUTER JOIN
		(Select * FROM STORY_REPORT_MAP WHERE STORY_REPORT_ID IS NOT NULL) SRMAP ON SRMAP.STORY_ID = STY.STORY_ID LEFT OUTER
		JOIN
		(Select REPORT_ID, ALIAS_VALUE from (SELECT ALIAS_TBL.report_id,
		ALIAS_VALUE,
		ROW_NUMBER() OVER(PARTITION BY ALIAS_TBL.report_id ORDER
		BY
		LATEST_CREATED) ROWINDEX
		FROM VIS_ALIAS_RPT_MAP_TBL ALIAS_TBL,
		(SELECT report_id,MAX(CREATED)AS
		LATEST_CREATED FROM
		VIS_ALIAS_RPT_MAP_TBL WHERE ALIASED_COMPONENT_ID = 6 GROUP BY
		REPORT_ID) MX_ALIAS_TBL
		WHERE ALIAS_TBL.REPORT_ID =
		MX_ALIAS_TBL.REPORT_ID
		AND ALIASED_COMPONENT_ID = 6 AND
		CREATED = LATEST_CREATED) tmp WHERE
		ROWINDEX = 1) RPT_ALIAS ON
		RPT_ALIAS.REPORT_ID =
		SRMAP.STORY_REPORT_ID LEFT OUTER JOIN

		(Select WST.WSP_ID, WST.WSP_DESCRIPTION,WST.WSP_TITLE, WST.LAST_UPD, WST.CREATED_BY, CPT.CUBE_ID 
			FROM WSP_SUMM_TBL WST INNER JOIN WSP_PAGE_TBL WPT ON WST.WSP_ID = WPT.WSP_ID
		 						  INNER JOIN WSP_PANE_TBL WNT ON WPT.PAGE_ID = WNT.PAGE_ID
		 			 			  INNER JOIN CMN_REPORT_TBL CPT ON WNT.OBJECT_ID = CPT.REPORT_ID) WSP ON WSP.WSP_ID = SRMAP.WORKSPACE_ID LEFT OUTER JOIN

		OBJECT_IMG_MAP_TBL OIMT ON OIMT.OBJECT_ID = WSP.WSP_ID LEFT OUTER JOIN

		(SELECT DISTINCT CMN.OBJECT_ID, CHART.THUMBNAIL_PATH FROM
		VIS_CHART_MAPPING_TBL CHART,
		(SELECT MAX(KEYWORD) as KEYWORD,OBJECT_ID
		FROM CMN_SEARCH_TBL WHERE TYPE IN ('Custom Thumbnail Type', 'Thumbnail Type')
		 GROUP BY OBJECT_ID )
		CMN
		WHERE CAST(CMN.KEYWORD AS INTEGER) = CAST(CHART.CHART_MAPPING_ID AS
		INTEGER)) DFLT_IMG ON
		DFLT_IMG.OBJECT_ID = WSP.WSP_ID

		ORDER BY CAST(DESK.cache_priority AS INTEGER),
		CAST(DESK.DESK_ID AS INTEGER), CAST(DSMAP.STORY_INDEX AS
		INTEGER),
		CAST(SRMAP.RPT_INDEX AS INTEGER)
	</query>

	<query key="GET_COMPLETE_DESK_DETAILS_BY_ORG_NAME">
		SELECT OIMT.IMG_PATH as CUSTOM_IMG_PATH,DFLT_IMG.THUMBNAIL_PATH, COUNT(DESK.DESK_ID) OVER (partition BY DESK.DESK_ID) AS ITERATION_INDEX, DESK.ORG_NAME, DESK.STATUS,
    			DESK.DESK_ID, DESK.DESK_NAME, DESK.CREATED_BY, CAST(DESK.CREATED_ON AS TIMESTAMP) AS "CREATED_ON",
			  CAST(DESK.LAST_UPD AS TIMESTAMP)   AS "LAST_UPD", DESK.LAST_UPD_BY, DESK.LAST_CACHED_ON,
			  coalesce(DESK.IS_DASHBOARD_DESK, 'false') "IS_DASHBOARD_DESK", DESK.DASHBOARD_CONFIGURATION,
			  STY.STORY_ID, DSMAP.STORY_INDEX, STY.TITLE, STY.CREATED_BY AS STORY_AUTHOR_ID,
			  STY.ORG_NAME, SRMAP.WORKSPACE_ID, SRMAP.STORY_REPORT_ID, CAST(SRMAP.RPT_INDEX AS INTEGER) RPT_INDEX,
			  WSP.WSP_TITLE, WSP.CREATED_BY   AS WSP_AUTHOR_ID, WSP.LAST_UPD     AS WSP_LAST_UPDATED,
			  SRMAP.SELECTIONS AS STORY_SELECTIONS,DESK.RUNAS_USERID,
			  RPT_ALIAS.ALIAS_VALUE AS RPT_ALIAS_NAME,
			  WSP.WSP_DESCRIPTION,
			  SRMAP.TYPE,
			  SRMAP.VIS_REPORT_PROPERTY,
			  SRMAP.NOTES,
       		  WSP.CUBE_ID AS MODEL_ID
		FROM
		(Select cache_priority,DESK_ID,DESK_NAME,DESK_INDEX,ORG_NAME,CREATED_BY,CREATED_ON,LAST_UPD,LAST_UPD_BY,TARGET_APP,RUNAS_USERID,
					LAST_CACHED_ON,STATUS,IS_DASHBOARD_DESK,DASHBOARD_CONFIGURATION FROM VIS_DESK 
					WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE') AND (IS_STATIC = 0 OR IS_STATIC IS NULL) 
					AND coalesce(lower(ORG_NAME), 'default') LIKE (lower(?))) DESK 
		LEFT OUTER JOIN
		VIS_DESK_STORY_MAP DSMAP ON DSMAP.DESK_ID = DESK.DESK_ID LEFT OUTER
		JOIN
		STORY_TBL STY ON STY.STORY_ID = DSMAP.STORY_ID LEFT OUTER JOIN
		(Select * FROM STORY_REPORT_MAP WHERE STORY_REPORT_ID IS NOT NULL) SRMAP ON SRMAP.STORY_ID = STY.STORY_ID LEFT OUTER
		JOIN
		(Select REPORT_ID, ALIAS_VALUE from (SELECT ALIAS_TBL.report_id,
		ALIAS_VALUE,
		ROW_NUMBER() OVER(PARTITION BY ALIAS_TBL.report_id ORDER
		BY
		LATEST_CREATED) ROWINDEX
		FROM VIS_ALIAS_RPT_MAP_TBL ALIAS_TBL,
		(SELECT report_id,MAX(CREATED)AS
		LATEST_CREATED FROM
		VIS_ALIAS_RPT_MAP_TBL WHERE ALIASED_COMPONENT_ID = 6 GROUP BY
		REPORT_ID) MX_ALIAS_TBL
		WHERE ALIAS_TBL.REPORT_ID =
		MX_ALIAS_TBL.REPORT_ID
		AND ALIASED_COMPONENT_ID = 6 AND
		CREATED = LATEST_CREATED) tmp WHERE
		ROWINDEX = 1) RPT_ALIAS ON
		RPT_ALIAS.REPORT_ID =
		SRMAP.STORY_REPORT_ID LEFT OUTER JOIN

		(Select WST.WSP_ID, WST.WSP_DESCRIPTION,WST.WSP_TITLE, WST.LAST_UPD, WST.CREATED_BY, CPT.CUBE_ID 
			FROM WSP_SUMM_TBL WST INNER JOIN WSP_PAGE_TBL WPT ON WST.WSP_ID = WPT.WSP_ID
		 						  INNER JOIN WSP_PANE_TBL WNT ON WPT.PAGE_ID = WNT.PAGE_ID
		 			 			  INNER JOIN CMN_REPORT_TBL CPT ON WNT.OBJECT_ID = CPT.REPORT_ID) WSP ON WSP.WSP_ID = SRMAP.WORKSPACE_ID LEFT OUTER JOIN

		OBJECT_IMG_MAP_TBL OIMT ON OIMT.OBJECT_ID = WSP.WSP_ID LEFT OUTER JOIN

		(SELECT DISTINCT CMN.OBJECT_ID, CHART.THUMBNAIL_PATH FROM
		VIS_CHART_MAPPING_TBL CHART,
		(SELECT MAX(KEYWORD) as KEYWORD,OBJECT_ID
		FROM CMN_SEARCH_TBL WHERE TYPE IN ('Custom Thumbnail Type', 'Thumbnail Type')
		 GROUP BY OBJECT_ID )
		CMN
		WHERE CAST(CMN.KEYWORD AS INTEGER) = CAST(CHART.CHART_MAPPING_ID AS
		INTEGER)) DFLT_IMG ON
		DFLT_IMG.OBJECT_ID = WSP.WSP_ID

		ORDER BY CAST(DESK.cache_priority AS INTEGER),
		CAST(DESK.DESK_ID AS INTEGER), CAST(DSMAP.STORY_INDEX AS
		INTEGER),
		CAST(SRMAP.RPT_INDEX AS INTEGER)
	</query>

	<query key="GET_COMPLETE_DESK_DETAILS_BY_MODEL">
		SELECT OIMT.IMG_PATH as CUSTOM_IMG_PATH,DFLT_IMG.THUMBNAIL_PATH, COUNT(DESK.DESK_ID) OVER (partition BY DESK.DESK_ID) AS ITERATION_INDEX, DESK.ORG_NAME, DESK.STATUS,
    			DESK.DESK_ID, DESK.DESK_NAME, DESK.CREATED_BY, CAST(DESK.CREATED_ON AS TIMESTAMP) AS "CREATED_ON",
			  CAST(DESK.LAST_UPD AS TIMESTAMP)   AS "LAST_UPD", DESK.LAST_UPD_BY, DESK.LAST_CACHED_ON,
			  coalesce(DESK.IS_DASHBOARD_DESK, 'false') "IS_DASHBOARD_DESK", DESK.DASHBOARD_CONFIGURATION,
			  STY.STORY_ID, DSMAP.STORY_INDEX, STY.TITLE, STY.CREATED_BY AS STORY_AUTHOR_ID,
			  STY.ORG_NAME, SRMAP.WORKSPACE_ID, SRMAP.STORY_REPORT_ID, CAST(SRMAP.RPT_INDEX AS INTEGER) RPT_INDEX,
			  WSP.WSP_TITLE, WSP.CREATED_BY   AS WSP_AUTHOR_ID, WSP.LAST_UPD     AS WSP_LAST_UPDATED,
			  SRMAP.SELECTIONS AS STORY_SELECTIONS,DESK.RUNAS_USERID,
			  RPT_ALIAS.ALIAS_VALUE AS RPT_ALIAS_NAME,
			  WSP.WSP_DESCRIPTION,
			  SRMAP.TYPE,
			  SRMAP.VIS_REPORT_PROPERTY,
			  SRMAP.NOTES,
       		  WSP.CUBE_ID AS MODEL_ID
		FROM
		(Select cache_priority,DESK_ID,DESK_NAME,DESK_INDEX,ORG_NAME,CREATED_BY,CREATED_ON,LAST_UPD,LAST_UPD_BY,TARGET_APP,RUNAS_USERID,
					LAST_CACHED_ON,STATUS,IS_DASHBOARD_DESK,DASHBOARD_CONFIGURATION FROM VIS_DESK 
					WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE') AND (IS_STATIC = 0 OR IS_STATIC IS NULL)) DESK 
		LEFT OUTER JOIN
		VIS_DESK_STORY_MAP DSMAP ON DSMAP.DESK_ID = DESK.DESK_ID LEFT OUTER
		JOIN
		STORY_TBL STY ON STY.STORY_ID = DSMAP.STORY_ID LEFT OUTER JOIN
		(Select * FROM STORY_REPORT_MAP WHERE STORY_REPORT_ID IS NOT NULL) SRMAP ON SRMAP.STORY_ID = STY.STORY_ID LEFT OUTER
		JOIN
		(Select REPORT_ID, ALIAS_VALUE from (SELECT ALIAS_TBL.report_id,
		ALIAS_VALUE,
		ROW_NUMBER() OVER(PARTITION BY ALIAS_TBL.report_id ORDER
		BY
		LATEST_CREATED) ROWINDEX
		FROM VIS_ALIAS_RPT_MAP_TBL ALIAS_TBL,
		(SELECT report_id,MAX(CREATED)AS
		LATEST_CREATED FROM
		VIS_ALIAS_RPT_MAP_TBL WHERE ALIASED_COMPONENT_ID = 6 GROUP BY
		REPORT_ID) MX_ALIAS_TBL
		WHERE ALIAS_TBL.REPORT_ID =
		MX_ALIAS_TBL.REPORT_ID
		AND ALIASED_COMPONENT_ID = 6 AND
		CREATED = LATEST_CREATED) tmp WHERE
		ROWINDEX = 1) RPT_ALIAS ON
		RPT_ALIAS.REPORT_ID =
		SRMAP.STORY_REPORT_ID LEFT OUTER JOIN

		(Select WST.WSP_ID, WST.WSP_DESCRIPTION,WST.WSP_TITLE, WST.LAST_UPD, WST.CREATED_BY, CPT.CUBE_ID 
			FROM WSP_SUMM_TBL WST INNER JOIN WSP_PAGE_TBL WPT ON WST.WSP_ID = WPT.WSP_ID
		 						  INNER JOIN WSP_PANE_TBL WNT ON WPT.PAGE_ID = WNT.PAGE_ID
		 			 			  INNER JOIN CMN_REPORT_TBL CPT ON WNT.OBJECT_ID = CPT.REPORT_ID
        WHERE CPT.CUBE_ID = ?) WSP ON WSP.WSP_ID = SRMAP.WORKSPACE_ID INNER JOIN

		OBJECT_IMG_MAP_TBL OIMT ON OIMT.OBJECT_ID = WSP.WSP_ID LEFT OUTER JOIN

		(SELECT DISTINCT CMN.OBJECT_ID, CHART.THUMBNAIL_PATH FROM
		VIS_CHART_MAPPING_TBL CHART,
		(SELECT MAX(KEYWORD) as KEYWORD,OBJECT_ID
		FROM CMN_SEARCH_TBL WHERE TYPE IN ('Custom Thumbnail Type', 'Thumbnail Type')
		 GROUP BY OBJECT_ID )
		CMN
		WHERE CAST(CMN.KEYWORD AS INTEGER) = CAST(CHART.CHART_MAPPING_ID AS
		INTEGER)) DFLT_IMG ON
		DFLT_IMG.OBJECT_ID = WSP.WSP_ID

		ORDER BY CAST(DESK.cache_priority AS INTEGER),
		CAST(DESK.DESK_ID AS INTEGER), CAST(DSMAP.STORY_INDEX AS
		INTEGER),
		CAST(SRMAP.RPT_INDEX AS INTEGER)
	</query>

	<query key="CHECK_DELETE_DESKS_PERMISSION">SELECT COUNT(DESK_ID) FROM VIS_DESK WHERE DESK_ID IN
		(??) AND CREATED_BY = ?
	</query>
	<query key="DELETE_DESKS_REPORT_CACHE_BY_MODEL">
				DELETE FROM VIS_DESK_REPORT_CACHE WHERE STORY_REPORT_ID IN (         
					SELECT  DISTINCT SRMAP.STORY_REPORT_ID
						FROM (Select DESK_ID FROM VIS_DESK WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE')) DESK
						RIGHT OUTER JOIN VIS_DESK_STORY_MAP DSMAP ON DSMAP.DESK_ID = DESK.DESK_ID
						RIGHT OUTER JOIN STORY_TBL STY ON STY.STORY_ID = DSMAP.STORY_ID
						RIGHT OUTER JOIN (Select * FROM STORY_REPORT_MAP WHERE STORY_REPORT_ID IS NOT NULL) SRMAP ON SRMAP.STORY_ID = STY.STORY_ID
						RIGHT OUTER JOIN (Select WST.WSP_ID FROM WSP_SUMM_TBL WST, WSP_PAGE_TBL WPT, WSP_PANE_TBL WNT, CMN_REPORT_TBL CPT
				          WHERE WST.WSP_ID = WPT.WSP_ID
				          AND WPT.PAGE_ID = WNT.PAGE_ID
				          AND WNT.OBJECT_ID = CPT.REPORT_ID
			            AND CPT.CUBE_ID = ?) WSP ON WSP.WSP_ID = SRMAP.WORKSPACE_ID
						WHERE SRMAP.STORY_REPORT_ID IS NOT NULL)
	</query>
	
		<query key="DELETE_DESKS_REPORT_CACHE_BY_MODEL_ONLY_NON_STATIC">
				DELETE FROM VIS_DESK_REPORT_CACHE WHERE STORY_REPORT_ID IN (
					SELECT  DISTINCT SRMAP.STORY_REPORT_ID
						FROM (Select DESK_ID FROM VIS_DESK WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE') AND (IS_STATIC = 0 OR IS_STATIC IS NULL)) DESK,
						RIGHT OUTER JOIN VIS_DESK_STORY_MAP DSMAP ON DSMAP.DESK_ID = DESK.DESK_ID
						RIGHT OUTER JOIN STORY_TBL STY ON STY.STORY_ID = DSMAP.STORY_ID
						RIGHT OUTER JOIN(Select * FROM STORY_REPORT_MAP WHERE STORY_REPORT_ID IS NOT NULL) SRMAP ON SRMAP.STORY_ID = STY.STORY_ID
						RIGHT OUTER JOIN(Select WST.WSP_ID FROM WSP_SUMM_TBL WST, WSP_PAGE_TBL WPT, WSP_PANE_TBL WNT, CMN_REPORT_TBL CPT
				          WHERE WST.WSP_ID = WPT.WSP_ID
				          AND WPT.PAGE_ID = WNT.PAGE_ID
				          AND WNT.OBJECT_ID = CPT.REPORT_ID
			            AND CPT.CUBE_ID = ?) WSP ON WSP.WSP_ID = SRMAP.WORKSPACE_ID
			      		WHERE SRMAP.STORY_REPORT_ID IS NOT NULL)
	</query>
	
	<query key="DELETE_DESKS_FROM_VIS_DESK">DELETE FROM VIS_DESK WHERE DESK_ID IN (??)</query>
	<query key="DELETE_DESKS_FROM_VIS_DESK_REPORT_FAV">DELETE FROM VIS_DESK_REPORT_FAV WHERE DESK_ID IN (??)</query>
	<query key="DELETE_DESKS_FROM_VIS_GRP_MAP">DELETE FROM VIS_DESK_GRP_MAP WHERE DESK_ID IN (??)
	</query>
	<query key="DELETE_DESKS_FROM_VIS_USR_MAP">DELETE FROM VIS_DESK_USER_MAP WHERE DESK_ID IN (??)
	</query>
	<query key="DELETE_DESKS_FROM_VIS_STORY_MAP">DELETE FROM VIS_DESK_STORY_MAP WHERE DESK_ID IN (??)
	</query>
	<query key="GET_DESK_SEQUENCE_ID">select nextval('DASHBOARD_ID')</query>

	<query key="CREATE_DESK">INSERT INTO VIS_DESK (DESK_ID, DESK_NAME, CREATED_BY,
		DESK_INDEX, CREATED_ON, LAST_UPD, ORG_NAME, LAST_UPD_BY, TARGET_APP,
		IS_DASHBOARD_DESK, DASHBOARD_CONFIGURATION, RUNAS_USERID, REF_DESK,
		IS_STATIC)
		VALUES (?, ?, ?,cast(? as integer), CURRENT_TIMESTAMP,
		CURRENT_TIMESTAMP,
		CURRENT_ORG_NAME, ?, ?, ?, ?, ?, ?,?)
	</query>
	<query key="CREATE_DESK_GROUPS">INSERT INTO VIS_DESK_GRP_MAP (GROUP_ID, DESK_ID,
		CREATED, CREATED_BY, LAST_UPD, LAST_UPD_BY) VALUES (?::integer, ?,
		CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)
	</query>
	<query key="CREATE_DESK_USERS">INSERT INTO VIS_DESK_USER_MAP (USER_ID, DESK_ID,
		CREATED, CREATED_BY, LAST_UPD, LAST_UPD_BY) VALUES (?, ?,
		CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP, ?)
	</query>
	<query key="CREATE_DESK_STORIES">INSERT INTO VIS_DESK_STORY_MAP (DESK_ID, STORY_ID,
		STORY_INDEX) VALUES (?, ?, ?::integer)
	</query>
	<query key="UPDATE_DESK">UPDATE VIS_DESK SET DESK_NAME = ?, LAST_UPD =
		CURRENT_TIMESTAMP, LAST_UPD_BY=?, IS_DASHBOARD_DESK=?,
		DASHBOARD_CONFIGURATION=?, RUNAS_USERID=?, IS_STATIC=?, TARGET_APP=? WHERE DESK_ID =
		?
	</query>
	<query key="UPDATE_DESK_CACHING_LOCALE">UPDATE VIS_DESK SET CACHING_LOCALE = ? WHERE DESK_ID =
		?
	</query>
	<query key="GET_DASHBORD">select distinct dash.dashboard_id,
		dash.dashboard_name,map.rpt_index,map.report_id,dash.created_on,dash.dashboard_index
		from dashboard_tbl dash,dashboard_report_map map where
		dash.dashboard_id = map.dashboard_id and dash.created_by = ? and
		dash.ORG_NAME_EQUALS_CURRENT order by dash.dashboard_index,
		dash.created_on
	</query>
	<query key="GET_DESK_CACHE_LOCALE_NAME">SELECT CACHING_LOCALE FROM VIS_DESK WHERE DESK_ID = ?
	</query>

	<query key="UPDATE_DESK_CACHE_DATA">
		INSERT INTO VIS_DESK_CACHE (DESK_ID, CACHE_DATA,
		CREATED_BY, CREATED_ON,
		STRY_IDX, STATUS_MESSAGE) VALUES
		(?,?,?,CURRENT_TIMESTAMP, ?, ?)
	</query>
	
	<query key="UPDATE_DESK_CACHE_DATA_WITH_IMG">
		UPDATE VIS_DESK_CACHE SET CACHE_DATA = ? WHERE DESK_ID = ? AND STRY_IDX = -2
	</query>

	<query key="UPDATE_DESK_CACHE_DATA_MC">
		INSERT INTO VIS_DESK_CACHE (DESK_ID, CACHE_DATA,
		CREATED_BY, CREATED_ON, STRY_IDX, SECURITY_KEY, STATUS_MESSAGE) VALUES
		(?,?,?,CURRENT_TIMESTAMP, ?, ?, ?)
	</query>

	<query key="UPDATE_PARTIAL_DESK_CACHE_DATA">
		UPDATE VIS_DESK_CACHE SET CACHE_DATA=?, CREATED_BY=?,
		CREATED_ON=CURRENT_TIMESTAMP, STATUS_MESSAGE=? WHERE DESK_ID=? AND
		STRY_IDX = ? AND SECURITY_KEY IS NULL
	</query>

	<query key="UPDATE_PARTIAL_DESK_CACHE_DATA_WITH_SECURITY">
		UPDATE VIS_DESK_CACHE SET CACHE_DATA=?, CREATED_BY=?,
		CREATED_ON=CURRENT_TIMESTAMP, STATUS_MESSAGE=? WHERE DESK_ID=? AND
		STRY_IDX = ? AND SECURITY_KEY = ?
	</query>

	<query key="DELETE_PARTIAL_DESK_CACHE_DATA_WITH_SECURITY">
		DELETE FROM VIS_DESK_CACHE WHERE DESK_ID = ? AND STRY_IDX = ? AND SECURITY_KEY = ?
	</query>
	
	<query key="DELETE_PARTIAL_DESK_CACHE_DATA">
		DELETE FROM VIS_DESK_CACHE WHERE DESK_ID = ? AND STRY_IDX = ? AND SECURITY_KEY IS NULL
	</query>
	
	<query key="DELETE_DESK_CACHE_DATA">
		DELETE FROM VIS_DESK_CACHE WHERE DESK_ID IN (??)
	</query>
	
	<query key="DELETE_DESK_CACHE_DATA_MC">
		DELETE FROM VIS_DESK_CACHE WHERE DESK_ID = ? AND SECURITY_KEY = ?
	</query>
	
	<query key="DELETE_ORG_DESK_CACHE_DATA">
		DELETE FROM VIS_DESK_CACHE WHERE DESK_ID IN (SELECT DESK_ID FROM VIS_DESK WHERE (IS_STATIC = 0 OR IS_STATIC IS NULL) AND coalesce(lower(ORG_NAME), 'default') = lower(?))
	</query>
	
	<query key="DELETE_ALL_DESK_CACHE_DATA">
		DELETE
			FROM VIS_DESK_CACHE
			WHERE DESK_ID IN
			  (SELECT DESK_ID
			  FROM VIS_DESK
			  WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE')
			  AND (IS_STATIC    = 0
			  OR IS_STATIC     IS NULL)
			  AND coalesce(lower(ORG_NAME), 'default') LIKE (lower(?))
			  )
	</query>
	<query key="DELETE_ALL_DESK_CACHE_DATA_INCLUDE_STATIC">
		DELETE
			FROM VIS_DESK_CACHE
			WHERE DESK_ID IN
			  (SELECT DESK_ID
			  FROM VIS_DESK
			  WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE')
			  AND coalesce(lower(ORG_NAME), 'default') LIKE (lower(?))
			  )
	</query>

	<!-- Desk scheduling -->
	<query key="DESK_SCHED_INFO_INSERT">
		INSERT INTO VIS_DESK_SCHED_LOG(DESK_SCHED_INST_ID,
		DESK_SCHED_NAME, ORG_NAME, START_TIME, END_TIME, NEXT_RUNTIME,
		DESK_UTILITY_URL, STATUS, MESSAGE) VALUES(?,?,?,?,?,?,?,?,?)
	</query>
	<query key="DESK_SCHED_INFO_UPDATE">
		UPDATE VIS_DESK_SCHED_LOG SET END_TIME = ?, STATUS = ?
		, MESSAGE = ?, DESK_UTILITY_URL = ? WHERE DESK_SCHED_INST_ID = ?
	</query>
	<query key="DESK_SCHED_INFO_UPDATE_STATUS">
		UPDATE VIS_DESK_SCHED_LOG SET END_TIME = ?, STATUS = ?, MESSAGE = ? WHERE DESK_SCHED_INST_ID = ? 
	</query>
	<query key="DESK_SCHED_INFO_GET_STATUS">
		SELECT START_TIME, END_TIME, DESK_UTILITY_URL, STATUS, MESSAGE FROM  VIS_DESK_SCHED_LOG WHERE DESK_SCHED_INST_ID = ? AND coalesce(lower(ORG_NAME), 'default') LIKE (lower(?))
	</query>
	<query key="DESK_CACHE_INFO_LOG_INSERT">
		INSERT INTO VIS_DESK_FILE_GEN_LOG(DESK_INST_ID,
		DESK_ID, USER_ID, DESK_FILE_PATH, START_TIME, STATUS,JOB_ID)
		VALUES(?,?,?,?,CURRENT_TIMESTAMP,?,?)
	</query>
	<query key="GET_RUNNING_DESK_DETAILS_BY_SCHEDULER">
   			SELECT QU.JOB_ID, CB.CUBE_NAME, QU.STORY_REPORT_ID, QU.WSP_ID, QU.STATUS, QU.RUN_AS_USER, QU.AS_SECURITY_KEY, QU.START_TIME, QU.ORG_NAME, QU.THREAD_NAME
			FROM VIS_DESK_REPORT_EXEC_QUEUE QU, (Select * from VIS_DESK_SCHED_LOG WHERE START_TIME > (CURRENT_TIMESTAMP - ?)) SC, CUBE_TBL CB
			WHERE QU.JOB_ID = SC.DESK_SCHED_INST_ID
			AND CB.CUBE_ID = QU.MODEL_ID
			AND QU.STATUS = 'Generating'
			ORDER BY QU.JOB_ID
    </query>
    <query key="GET_RUNNING_DESK_DETAILS_4_NON_SCHEDULER">
   			SELECT QU.JOB_ID, CB.CUBE_NAME, QU.STORY_REPORT_ID, QU.WSP_ID, QU.STATUS, QU.RUN_AS_USER, QU.AS_SECURITY_KEY, QU.START_TIME, QU.ORG_NAME, QU.THREAD_NAME
				FROM VIS_DESK_REPORT_EXEC_QUEUE QU, CUBE_TBL CB
				WHERE CB.CUBE_ID = QU.MODEL_ID
				AND QU.STATUS = 'Generating'
				AND QU.JOB_ID NOT IN (Select DESK_SCHED_INST_ID from VIS_DESK_SCHED_LOG WHERE START_TIME > (CURRENT_TIMESTAMP - ?))
				ORDER BY QU.JOB_ID
    </query>
    <query key="GET_LAST_ONE_WEEK_SCHEDULER_4_DESK">
   			Select DESK_SCHED_INST_ID, DESK_SCHED_NAME, ORG_NAME, START_TIME, END_TIME, STATUS from VIS_DESK_SCHED_LOG WHERE START_TIME > (CURRENT_TIMESTAMP - ?) ORDER BY START_TIME DESC
    </query>
	<query key="GET_LAST_DESK_CACHE_GEN_DATE">
		SELECT CAST(CURRENT_TIMESTAMP AS TIMESTAMP),
		START_TIME, END_TIME FROM VIS_DESK_FILE_GEN_LOG WHERE DESK_ID = ? AND STATUS = 'Generating' AND
		START_TIME = (SELECT MAX(START_TIME) FROM VIS_DESK_FILE_GEN_LOG WHERE
		DESK_ID = ?)
	</query>
	<query key="GET_LAST_DESK_CACHE_GEN_MESSAGE">
		SELECT DESK_ID, STATUS_MESSAGE FROM VIS_DESK_CACHE
		WHERE DESK_ID = ? AND STRY_IDX = -2
	</query>
	<query key="DESK_CACHE_INFO_LOG_UPDATE">
		UPDATE VIS_DESK_FILE_GEN_LOG SET
		END_TIME=CURRENT_TIMESTAMP, STATUS=?, MESSAGE=? WHERE DESK_INST_ID = ?
	</query>
	<query key="DESK_CACHE_INFO_UPDATE">
		UPDATE VIS_DESK SET LAST_CACHED_ON =
		CURRENT_TIMESTAMP, STATUS = ? WHERE DESK_ID = ?
	</query>
	<query key="DESK_LAST_DATE_CACHE_INFO_UPDATE">
		UPDATE VIS_DESK SET LAST_CACHED_ON = CURRENT_TIMESTAMP
		WHERE DESK_ID = ?
	</query>

	<query key="DESK_CACHE_CURR_STATUS_UPDATE">
		UPDATE VIS_DESK SET STATUS = ? WHERE DESK_ID IN (??)
	</query>

	<query key="GET_DESK_SCHED_LAST_RUNTIME_BY_ORG">
		SELECT ORG_NAME, MAX(START_TIME) AS LAST_RUNTIME
		FROM
		(SELECT ORG_NAME,
		CASE
		WHEN STATUS = 'COMPLETED'
		THEN (START_TIME +
		1/1440 )
		ELSE (START_TIME - 1/1440 )
		END AS START_TIME
		FROM
		VIS_DESK_SCHED_LOG
		) GROUP BY ORG_NAME
	</query>
	<query key="MARK_DESK_SCHED_AS_ABORTED">
		UPDATE VIS_DESK_SCHED_LOG SET STATUS = 'ABORTED' WHERE
		STATUS = 'QUEUED' OR
		STATUS = 'STARTED'
	</query>
	<query key="GET_DESK_ID_FOR_STORY_ID">
		SELECT DESK_ID FROM VIS_DESK_STORY_MAP WHERE STORY_ID
		= ?
	</query>

	<query key="INSERT_VIS_DESK_UPDATE_JOB_DETAIL">
		INSERT INTO VIS_DESK_UPDATE_JOB(DESK_UPDATE_INST_ID,
		DESK_ID, QUEUE_ID,
		STORY_ID, REQUEST_INFO, LAST_UPDATED, CREATED,
		CREATED_BY, STATUS)
		VALUES(?,?,?::numeric,?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?,?)
	</query>

	<query key="GET_VIS_DESK_UPDATE_JOB_DATA">
		SELECT * FROM VIS_DESK_UPDATE_JOB WHERE CAST(QUEUE_ID AS VARCHAR) = ?
	</query>

	<query key="UPDATE_VIS_DESK_UPDATE_JOB_DATA">
		UPDATE VIS_DESK_UPDATE_JOB SET STATUS = ?, MESSAGE =
		?, LAST_UPDATED =
		CURRENT_TIMESTAMP WHERE DESK_UPDATE_INST_ID = ?
	</query>

	<!-- End of desk queries -->

	<query key="GET_REPORT">SELECT DISTINCT SUMM.WSP_ID, SUMM.wsp_title,
		CMNSRCH.keyword, EXEC_COUNT as VIEWS, to_char(
		SUMM.last_upd,'MM/DD/YYYY HH.MI.SS')last_upd, SUMM.last_upd_by,
		SUMM.wsp_description,
		SUMM.created_by, 'report' REPORT_TYPE,
		FAV.FAVOURITE_ID
		IS_FAV,to_char(HIST1.EXECUTED_TIME,'MM/DD/YYYY
		HH.MI.SS')EXECUTED_TIME,CMNSRCH.type,OIMT1.THUMBNAIL_PATH AS img_path, SUMM.scope
		FROM
		WSP_SUMM_TBL
		SUMM
		LEFT OUTER JOIN CMN_SEARCH_TBL CMNSRCH ON CMNSRCH.OBJECT_ID =
		SUMM.WSP_ID
		LEFT OUTER JOIN FAVOURITES_TBL FAV ON FAV.OBJECT_ID =
		SUMM.WSP_ID AND
		FAV.USER_ID = ?
		LEFT OUTER JOIN
		(SELECT OBJECT_ID,
		COUNT(EXECUTED_TIME) AS EXEC_COUNT FROM
		REPORT_EXECUTION_INFO_TBL
		WHERE
		EXECUTED_TIME > (CURRENT_TIMESTAMP - INTERVAL '30 DAYS') AND
		EXECUTED_BY = ?
		GROUP BY OBJECT_ID) HIST ON HIST.object_id =
		SUMM.WSP_ID
		LEFT OUTER JOIN
		(SELECT OBJECT_ID, MAX(EXECUTED_TIME)
		EXECUTED_TIME FROM
		REPORT_EXECUTION_INFO_TBL
		WHERE EXECUTED_BY = ?
		GROUP
		BY OBJECT_ID)
		HIST1 ON HIST1.object_id = SUMM.WSP_ID
		LEFT OUTER JOIN
		(SELECT DISTINCT CMN.OBJECT_ID, CHART.THUMBNAIL_PATH FROM VIS_CHART_MAPPING_TBL CHART, 
		        (SELECT MAX(KEYWORD) as KEYWORD,OBJECT_ID FROM CMN_SEARCH_TBL 
                 WHERE TYPE IN ('Custom Thumbnail Type', 'Thumbnail Type') GROUP BY OBJECT_ID ) CMN 
		        WHERE CMN.KEYWORD = CAST(CHART.CHART_MAPPING_ID AS CHARACTER) ) OIMT1 ON
		oimt1.OBJECT_ID=summ.wsp_id
		WHERE SUMM.WSP_TYPE = 4 AND SUMM.WSP_ID IN
		(??)
		order by SUMM.WSP_ID
	</query>
	<query key="GET_REPORTS">
		SELECT rpt.wsp_title, rpt.wsp_description,rpt.created_by, rpt.created, CUBE_INFO.cube_id, img.img_path AS img_path, srch.*, fav.favourite_id,
		rpt.LAST_UPD, CurExec.countt AS VIEWS, objcolmap.collection_id, 1 AS RPT_CNT, 0 AS CACHE_RPT_CNT
		FROM
		(
		select object_id ,
			max(CASE WHEN type='AS Model Name' THEN KEYWORD	ELSE NULL END) as AS_Model_Name,
			max(CASE WHEN type='Tags' THEN KEYWORD ELSE NULL END) as Tags,
			max(CASE WHEN type='Business Issues' THEN KEYWORD ELSE NULL END) as Business_Issues,
			max(CASE WHEN type='Thumbnail Type' THEN KEYWORD ELSE NULL END) as Thumbnail_Type,
			max(CASE WHEN type='enableAsynchronousInWspProp' THEN KEYWORD ELSE NULL	END) as	enableAsynchronousInWspProp,
			max(CASE WHEN type='IsUnifyTemplate' THEN KEYWORD ELSE NULL END) as IsUnifyTemplate,
			max(CASE WHEN type='Custom Thumbnail Type' THEN KEYWORD	ELSE NULL END) as Custom_Thumbnail_Type,
			max(CASE WHEN type='IsConfigured' THEN KEYWORD ELSE NULL END) as IsConfigured
		from (
		SELECT object_id,type, keyword FROM cmn_search_tbl
			WHERE object_id IN  (
				   (SELECT object_id
				   FROM cmn_search_tbl
				   WHERE lower(Type)='object type' AND lower(Keyword)='report'
				   INTERSECT
				   SELECT DISTINCT object_id
				   FROM cmn_search_tbl
				   WHERE lower(Type) = 'isconfigured' AND lower(Keyword) IN (??)
				   AND object_id    IN
				   (SELECT WSP_ID FROM WSP_SUMM_TBL WST INNER JOIN FOLDER_OBJ_MAP FOM ON WST.WSP_ID=FOM.OBJECT_ID
				     WHERE (SCOPE =1 OR SCOPE =3 OR SCOPE =5 OR LOWER(CREATED_BY) = ?)
				     AND CAST(FOM.FOLDER_ID AS VARCHAR) IN (??) 
				     UNION 
				     SELECT WSP_ID FROM WSP_SUMM_TBL WST INNER JOIN FOLDER_OBJ_MAP FOM ON WST.WSP_ID=FOM.OBJECT_ID 
				     WHERE CAST(FOM.FOLDER_ID AS VARCHAR) IN (??)
				     AND SCOPE = 2 AND WSP_ID IN (SELECT WST.WSP_ID FROM WSP_SUMM_TBL WST, OBJ_USERGRP_MAP OGM, ADM_GRP_USR_MAP GUM
				       WHERE WST.WSP_ID = OGM.OBJECT_ID AND OGM.GROUP_ID = GUM.GROUP_ID AND LOWER (GUM.USER_ID) = ? AND SCOPE=2
				       UNION
				       SELECT WST.WSP_ID FROM WSP_SUMM_TBL WST, OBJ_USER_MAP OUM WHERE WST.WSP_ID = OUM.OBJECT_ID AND LOWER(OUM.USER_ID) = ? AND SCOPE = 2)
				       ))
				     EXCEPT
				     SELECT DISTINCT object_id FROM cmn_search_tbl WHERE type IN ('IsDisplayInReportListing', 'isDisplayInLibrary') AND keyword='false'
				   ) ) as objectidas group by
		object_id
		) srch
		INNER JOIN WSP_SUMM_TBL rpt   ON rpt.WSP_ID = srch.object_id  AND rpt.wsp_type IN (4)
		       LEFT OUTER JOIN object_img_map_tbl img  ON img.object_id = CAST(rpt.WSP_ID AS CHAR)
		       LEFT OUTER JOIN favourites_tbl fav ON srch.object_id = fav.object_id  AND LOWER(fav.user_id) = ?
		       AND fav.obj_type_id IN
		         ( SELECT obj_type_id FROM OBJ_TYPES_TBL WHERE lower(obj_type)='report'
		         )
		       LEFT OUTER JOIN
		         (SELECT COUNT(object_id) AS countt,
		           object_id
		         FROM report_execution_info_tbl
		         WHERE executed_time BETWEEN CURRENT_TIMESTAMP - INTERVAL '30 DAYS' AND CURRENT_TIMESTAMP
		         GROUP BY object_id
		         ) CurExec   ON srch.object_id = CurExec.object_id
		       LEFT OUTER JOIN
		         ( SELECT CUBE_ID,CUBE_NAME FROM cube_tbl
		         ) CUBE_INFO ON CUBE_INFO.CUBE_NAME = srch.AS_Model_Name
		       LEFT OUTER JOIN  object_collection_map objcolmap
		ON srch.object_id      = objcolmap.obj_id
	</query>
	<query key="GET_REPORTS_LIST">WITH RECURSIVE FOLDERS AS
(SELECT fol.FOLDER_ID,fol.PARENT_ID,fol.NAME FROM FOLDER_MASTER fol 
WHERE (lower(fol.CREATED_BY)= ? OR fol.SCOPE IN (1,3,5)) AND FOL.ASSET_ID  IN (0,5) AND (org_name IS NULL OR lower(org_name) = lower(CURRENT_ORG_NAME)) 
UNION 
SELECT fol.FOLDER_ID,fol.PARENT_ID,fol.NAME FROM FOLDER_MASTER fol INNER JOIN (SELECT DISTINCT FOLDER_ID FROM FOLDER_USER_MAP 
WHERE LOWER(USER_ID) = ? UNION SELECT DISTINCT FOLDER_ID FROM FOLDER_GRP_MAP FGP INNER JOIN ADM_GRP_USR_MAP AGP ON FGP.GROUP_ID=AGP.GROUP_ID
WHERE LOWER(AGP.USER_ID)=?) GRP ON fol.FOLDER_ID=GRP.FOLDER_ID WHERE fol.SCOPE IN (2,4) AND FOL.ASSET_ID  IN (0,5) AND (org_name IS NULL OR lower(org_name) = lower(CURRENT_ORG_NAME))
),
FOLDER_LIST AS (SELECT s1.FOLDER_ID FROM FOLDERS s1 WHERE PARENT_ID = 0 UNION 
SELECT s2.FOLDER_ID FROM FOLDERS s2, FOLDER_LIST s1 WHERE s2.PARENT_ID = s1.FOLDER_ID)

SELECT rpt.wsp_title, rpt.wsp_description,rpt.created_by, rpt.created, CUBE_INFO.cube_id, img.img_path AS img_path, srch.*, fav.favourite_id,
		rpt.LAST_UPD, CurExec.countt AS VIEWS, objcolmap.collection_id, 1 AS RPT_CNT, 0 AS CACHE_RPT_CNT
		FROM
		(
		select object_id ,
			max(CASE WHEN type='AS Model Name' THEN KEYWORD	ELSE NULL END) as AS_Model_Name,
			max(CASE WHEN type='Tags' THEN KEYWORD ELSE NULL END) as Tags,
			max(CASE WHEN type='Business Issues' THEN KEYWORD ELSE NULL END) as Business_Issues,
			max(CASE WHEN type='Thumbnail Type' THEN KEYWORD ELSE NULL END) as Thumbnail_Type,
			max(CASE WHEN type='enableAsynchronousInWspProp' THEN KEYWORD ELSE NULL	END) as	enableAsynchronousInWspProp,
			max(CASE WHEN type='IsUnifyTemplate' THEN KEYWORD ELSE NULL END) as IsUnifyTemplate,
			max(CASE WHEN type='Custom Thumbnail Type' THEN KEYWORD	ELSE NULL END) as Custom_Thumbnail_Type,
			max(CASE WHEN type='IsConfigured' THEN KEYWORD ELSE NULL END) as IsConfigured
		from (
		SELECT object_id,type, keyword FROM cmn_search_tbl
			WHERE object_id IN  (
				   (SELECT object_id
				   FROM cmn_search_tbl
				   WHERE lower(Type)='object type' AND lower(Keyword)='report'
				   INTERSECT
				   SELECT DISTINCT object_id
				   FROM cmn_search_tbl
				   WHERE lower(Type) = 'isconfigured' AND lower(Keyword) IN ('true')
				   AND object_id    IN
				   (SELECT WSP_ID FROM WSP_SUMM_TBL WST INNER JOIN FOLDER_OBJ_MAP FOM ON WST.WSP_ID=FOM.OBJECT_ID
				     WHERE (SCOPE =1 OR SCOPE =3 OR SCOPE =5 OR LOWER(CREATED_BY) = ?)
				     AND FOLDER_ID IN (SELECT FOLDER_ID FROM FOLDER_LIST) 
				     UNION 
				     SELECT WSP_ID FROM WSP_SUMM_TBL WST INNER JOIN FOLDER_OBJ_MAP FOM ON WST.WSP_ID=FOM.OBJECT_ID 
				     WHERE FOLDER_ID IN (SELECT FOLDER_ID FROM FOLDER_LIST)
				     AND SCOPE = 2 AND WSP_ID IN (SELECT WST.WSP_ID FROM WSP_SUMM_TBL WST, OBJ_USERGRP_MAP OGM, ADM_GRP_USR_MAP GUM
				       WHERE WST.WSP_ID = OGM.OBJECT_ID AND OGM.GROUP_ID = GUM.GROUP_ID AND LOWER (GUM.USER_ID) = ? AND SCOPE=2
				       UNION
				       SELECT WST.WSP_ID FROM WSP_SUMM_TBL WST, OBJ_USER_MAP OUM WHERE WST.WSP_ID = OUM.OBJECT_ID AND LOWER(OUM.USER_ID) = ? AND SCOPE = 2)
				       ))
				     EXCEPT
				     SELECT DISTINCT object_id FROM cmn_search_tbl WHERE type IN ('IsDisplayInReportListing', 'isDisplayInLibrary') AND keyword='false'
				   ) ) as objectidas group by
		object_id
		) srch
		INNER JOIN WSP_SUMM_TBL rpt   ON rpt.WSP_ID = srch.object_id  AND rpt.wsp_type IN (4)
		       LEFT OUTER JOIN object_img_map_tbl img  ON img.object_id = CAST(rpt.WSP_ID AS CHAR)
		       LEFT OUTER JOIN favourites_tbl fav ON srch.object_id = fav.object_id  AND LOWER(fav.user_id) = ?
		       AND fav.obj_type_id IN
		         ( SELECT obj_type_id FROM OBJ_TYPES_TBL WHERE lower(obj_type)='report'
		         )
		       LEFT OUTER JOIN
		         (SELECT COUNT(object_id) AS countt,
		           object_id
		         FROM report_execution_info_tbl
		         WHERE executed_time BETWEEN CURRENT_TIMESTAMP - INTERVAL '30 DAYS' AND CURRENT_TIMESTAMP
		         GROUP BY object_id
		         ) CurExec   ON srch.object_id = CurExec.object_id
		       LEFT OUTER JOIN
		         ( SELECT CUBE_ID,CUBE_NAME FROM cube_tbl
		         ) CUBE_INFO ON CUBE_INFO.CUBE_NAME = srch.AS_Model_Name
		       LEFT OUTER JOIN  object_collection_map objcolmap
		ON srch.object_id = objcolmap.obj_id</query>
	<query key="GET_DEFAULT_THUMBNAILS">SELECT DISTINCT CHART_MAPPING_ID,THUMBNAIL_PATH FROM
		VIS_CHART_MAPPING_TBL
	</query>
	<query key="GET_USER_ACCESSIBLE_FOLDERS">SELECT fol.FOLDER_ID, fol.PARENT_ID, fol.NAME,
		fol.SCOPE, fol.CREATED_BY, org_name FROM FOLDER_MASTER fol WHERE
		(lower(fol.CREATED_BY)=? OR fol.SCOPE = 1 OR fol.SCOPE = 3 OR
		fol.SCOPE = 5 OR (fol.SCOPE IN ('2', '4') AND fol.FOLDER_ID IN (SELECT
		DISTINCT FOLDER_ID FROM FOLDER_USER_MAP WHERE LOWER(USER_ID) = ? UNION
		SELECT DISTINCT FOLDER_ID FROM FOLDER_GRP_MAP WHERE GROUP_ID IN
		(SELECT DISTINCT GROUP_ID FROM ADM_GRP_USR_MAP WHERE
		LOWER(USER_ID)=?)))) AND FOL.ASSET_ID in (0,5) AND (org_name is null
		or lower(org_name) = lower(CURRENT_ORG_NAME))
	</query>
	<query key="GET_USER_ACCESSIBLE_OBJECTS_FOLDERS">SELECT fol.FOLDER_ID, fol.PARENT_ID, fol.NAME,
		fol.SCOPE, fol.CREATED_BY, org_name FROM FOLDER_MASTER fol WHERE
		(fol.CREATED_BY=? OR fol.SCOPE = 1 OR fol.SCOPE = 3 OR fol.SCOPE = 5
		OR (fol.SCOPE IN ('2', '4') AND fol.FOLDER_ID IN (SELECT DISTINCT
		FOLDER_ID FROM FOLDER_USER_MAP WHERE USER_ID = ? UNION SELECT DISTINCT
		FOLDER_ID FROM FOLDER_GRP_MAP WHERE GROUP_ID IN (SELECT DISTINCT
		GROUP_ID FROM ADM_GRP_USR_MAP WHERE USER_ID=?)))) AND FOL.ASSET_ID in
		(??) AND (org_name is null or lower(org_name) =
		lower(CURRENT_ORG_NAME))
	</query>
	<query key="GET_MENU_DATA">SELECT M1.MENUID, M1.TEXT, M1.PARENTID,
		E1.PAGE_CONTEXT, E1.ACTION AS CONTEXT_ACTION, E2.PRIVILEGE, E2.ACTION
		AS PRIVILEGE_ACTION, M1.MENU_INDEX FROM MENU_MASTER M1 LEFT OUTER JOIN
		MENU_CONTEXT_MAPPING E1 ON (M1.MENUID = E1.MENUID) LEFT OUTER JOIN
		MENU_PRIVILEGE_MAPPING E2 ON (M1.MENUID = E2.MENUID)
	</query>
	<query key="GET_CONTEXT_HELP_FOR_TEXT">SELECT keyTbl.KEYWORD_NAME, keyTbl.KEYWORD_TYPE,
		keyTbl.KEYWORD_VALUE, templTbl.TEMPLATE_NAME FROM VIS_KEYWORDS_TBL
		keyTbl JOIN VIS_KEYWORD_TEMPLATE_MAP_TBL templMapTbl ON
		templMapTbl.KEYWORD_NAME = keyTbl.KEYWORD_NAME JOIN
		VIS_CONTEXT_HELP_TEMPLATE_TBL templTbl ON
		templTbl.CONTEXT_HELP_TEMPLATE_ID = templMapTbl.TEMPLATE_ID ORDER BY
		KEYTBL.CONTEXT_HELP_KEYWORD_ID
	</query>
	<query key="GET_CONTEXT_HELP_FOR_MEASURES">SELECT MEASURE_MEMBER_ID, MEMBER_KEYWORD_NAME,
		MEMBER_GROUP, MEMBER_DEFINITION, MEMBER_INTERPRETATION,
		MEMBER_CALCULATION_FORMULA FROM VIS_MEASURE_DEFINITION WHERE LOCALE=?
	</query>
	<query key="GET_MODEL_METADATA">SELECT METADATA_NAME, METADATA_VALUE FROM
		VIS_METADATA_TBL WHERE MODEL_ID=?::integer
	</query>
	<query key="GET_DIMENSION_NAME_LOCALE_MAPPING">SELECT DIMENSION_NAME_KEYWORD, DIMENSION_NAME_VALUE
		FROM VIS_DIMENSIONNAME_LOOKUP WHERE LOCALE= ?
	</query>
	<query key="GET_ALL_BUSINESS_ISSUES">SELECT TYPE, KEYWORD FROM SEARCH_METADATA_TBL WHERE
		lower(TYPE) = 'business issues' AND LOCALE = ?
	</query>
	<query key="GET_ALIAS_INFO_FOR_STORY">SELECT REPORT_ID, ALIAS_ID, CHART_ID,
		ALIASED_COMPONENT_ID, ALIAS_VALUE FROM VIS_ALIAS_RPT_MAP_TBL WHERE
		REPORT_ID IN (??)
	</query>
	<query key="INSERT_COMMON_DATA_FOR_STORY">INSERT INTO CMN_SEARCH_TBL (OBJECT_ID, KEYWORD, TYPE,
		CREATED_BY, CREATED, LAST_UPD_BY, LAST_UPD) VALUES (?, ?, ?, ?,
		CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP)
	</query>
	<query key="INSERT_STORY_DATE_MODIFIED"> INSERT INTO CMN_SEARCH_TBL (OBJECT_ID, KEYWORD, TYPE
		,CREATED_BY,CREATED,LAST_UPD_BY,LAST_UPD)
		values(?,TO_CHAR(CURRENT_TIMESTAMP,'DD-MON-YYYY HH24:MI:SS'),'DateTime
		Modified',CURRENT_LOGGED_IN_USER,CURRENT_TIMESTAMP,CURRENT_LOGGED_IN_USER,CURRENT_TIMESTAMP)
	</query>
	<query key="DELETE_STORY_DATE_MODIFIED">delete from cmn_search_tbl where object_id=? and
		type='DateTime Modified'
	</query>
	<query key="DELETE_COMMON_DATA">DELETE FROM CMN_SEARCH_TBL WHERE object_id = ?</query>
	<query key="DELETE_COMMON_DATA_STORY_TITLE">DELETE FROM CMN_SEARCH_TBL WHERE OBJECT_ID = ? AND
		TYPE='Story Name'
	</query>
	<query key="INSERT_COMMON_DATA_FOR_STORY_TITLE">INSERT INTO CMN_SEARCH_TBL (OBJECT_ID, KEYWORD, TYPE,
		CREATED_BY, CREATED, LAST_UPD_BY, LAST_UPD) VALUES (?, ?, 'Story
		Name', CURRENT_LOGGED_IN_USER, CURRENT_TIMESTAMP,
		CURRENT_LOGGED_IN_USER, CURRENT_TIMESTAMP)
	</query>
	<query key="UPDATE_STORY_REPORT_MAPPING">UPDATE STORY_REPORT_MAP SET NOTES = CASE WHEN ? IS
		NULL THEN NOTES ELSE ? END, TEXT_PANE_DATA=? ,VIS_REPORT_PROPERTY=?
		WHERE STORY_ID = ? AND STORY_REPORT_ID = ?
	</query>
	<query key="UPDATED_TIME_FOR_STORY_REPORT">UPDATE STORY_REPORT_MAP SET LAST_UPDATED =
		current_timestamp(6) WHERE STORY_REPORT_ID = ?
	</query>
	<query key="UPDATED_TIME_FOR_DUPLICATED_STORY_REPORT">UPDATE STORY_REPORT_MAP SET LAST_UPDATED = ?
		WHERE STORY_REPORT_ID = ?
	</query>
	<query key="UPDATE_STORY_REPORT_SELECTIONS_WITH_STORY_ID">UPDATE STORY_REPORT_MAP SET SELECTIONS = ? WHERE STORY_REPORT_ID = ? and STORY_ID = ?</query>
	<query key="UPDATE_STORY_REPORT_SELECTIONS">UPDATE STORY_REPORT_MAP SET SELECTIONS = ? WHERE
		STORY_REPORT_ID = ? AND STORY_ID = ?
	</query>
	
	<query key="DELETE_STORY_REPORT_MAPPINGS">DELETE FROM STORY_REPORT_MAP WHERE STORY_ID = ? AND
		STORY_REPORT_ID IN (??)
	</query>
	<query key="UPDATE_STORY_REPORT_INDEX">UPDATE STORY_REPORT_MAP SET RPT_INDEX = ? WHERE
		STORY_ID = ? AND STORY_REPORT_ID = ?
	</query>
	<query key="DELETE_STORY_REPORT_MAPPING_INFO">SELECT STORY_REPORT_ID, TYPE, WORKSPACE_ID FROM
		STORY_REPORT_MAP WHERE STORY_ID = ? AND STORY_REPORT_ID NOT IN (??)
	</query>
	<query key="DELETE_STORY_REPORTS">SELECT STORY_REPORT_ID, TYPE, WORKSPACE_ID FROM
		STORY_REPORT_MAP WHERE STORY_ID = ?
	</query>
	<query key="GET_SELECTION_INFO_FOR_STORY_REPORT">SELECT SELECTIONS,
		WORKSPACE_ID,STORY_REPORT_ID,LAST_UPDATED,cast(RPT_INDEX as numeric)
		as
		POSITION,NOTES,TEXT_PANE_DATA,VIS_REPORT_PROPERTY FROM
		STORY_REPORT_MAP WHERE STORY_REPORT_ID IN (??) ORDER BY POSITION
	</query>
	<query key="LOAD_STORY_TAGS">SELECT KEYWORD FROM CMN_SEARCH_TBL WHERE OBJECT_ID =?
		AND LOWER(TYPE) = 'tags'
	</query>
	<query key="GET_LAYOUT_NAME">SELECT VIS_TEMPLATE_NAME FROM VIS_LAYOUT_TMPL_MAP_TBL
		WHERE RPM_TEMPLATE_NAME = ?
	</query>
	<query key="GET_LAYOUT_ID">SELECT RPM_TEMPLATE_NAME FROM VIS_LAYOUT_TMPL_MAP_TBL
		WHERE VIS_TEMPLATE_NAME = ? ORDER BY RPM_TEMPLATE_NAME
	</query>
	<query key="GET_CUSTOM_VISUALIZER_PROPS">SELECT PROPERTY_TYPE, PROPERTY_NAME,
		PROPERTY_VALUE,VISUALIZER_INDEX FROM VIS_CUSTOM_PROPERTIES_VIEW WHERE
		WSP_ID = ? AND PROPERTY_TYPE = ?
	</query>
	<query key="INSERT_CUSTOM_VISUALIZER_PROPS">INSERT INTO VIS_CUSTOM_PROPERTIES
		(WSP_ID,PROPERTY_TYPE,VISUALIZER_INDEX,PROPERTY_NAME,PROPERTY_VALUE,CREATED_BY,LAST_UPD)
		VALUES (?,?,?,?,?,'system',CURRENT_TIMESTAMP)
	</query>
	<query key="CLEAR_CUSTOM_VISUALIZER_PROPS">DELETE FROM VIS_CUSTOM_PROPERTIES WHERE WSP_ID = ?
	</query>
	<query key="GET_ALL_CUSTOM_VISUALIZER_BY_IDS">SELECT WSP_ID, PROPERTY_NAME,
		PROPERTY_VALUE,VISUALIZER_INDEX FROM VIS_CUSTOM_PROPERTIES WHERE
		WSP_ID IN (??) AND PROPERTY_TYPE = ?
	</query>
	<query key="GET_CUSTOM_VISUALIZER_CLASS">SELECT CLASS_NAME FROM VIS_CUSTOM_CLASS_MAP WHERE
		LOWER(VISUALIZER_TYPE) = ?
	</query>
	<query key="GET_SS_TEMPLATE">SELECT TEMPLATE_DEFINITION FROM TG_TEMPLATES WHERE
		TG_TEMPLATE_ID=? AND APP_ID=?
	</query>
	<query key="INSERT_INTO_REPORT_EXECUTION_INFO_TBL">INSERT INTO REPORT_EXECUTION_INFO_TBL
		(REPORT_EXECUTION_ID, OBJECT_ID, OBJECT_TYPE, EXECUTED_BY,
		EXECUTED_TIME, CLIENT_IP, SERVER_IP, EXECUTION_STATUS, ORG_NAME,
		APPLICATION) VALUES(?,?,?,?,CURRENT_TIMESTAMP,?,?,?,?,?)
	</query>
	<query key="SELECT_LAYOUT_FOR_MODEL_ADHOC_REPORT"> SELECT
		ALT.XAXIS,ALT.YAXIS,ALT.LEGEND,ALT.PAGE_FILTER,CHART.MODEL_ID,ACT.CHART_TYPE
		FROM VIS_ADHOC_LAYOUT_TBL ALT,(SELECT CHART_TYPE_ID,LAYOUT_ID,MODEL_ID
		FROM VIS_ADHOC_CHART_LAYOUT_MODEL INNER JOIN
		VIS_ADHOC_CHART_LAYOUT_MAP_TBL ON
		VIS_ADHOC_CHART_LAYOUT_MAP_TBL.MAPPING_ID =
		VIS_ADHOC_CHART_LAYOUT_MODEL.MAPPING_ID AND MODEL_ID ='0') chart INNER
		JOIN VIS_ADHOC_CHART_TYPE_TBL ACT ON act.chart_type_id =
		chart.CHART_TYPE_ID AND act.chart_type='GRID' WHERE chart.LAYOUT_ID =
		alt.layout_id UNION SELECT ALT.XAXIS,ALT.YAXIS,ALT.LEGEND,
		ALT.PAGE_FILTER,CHART.MODEL_ID,ACT.CHART_TYPE FROM
		VIS_ADHOC_LAYOUT_TBL ALT,(SELECT CHART_TYPE_ID,LAYOUT_ID,MODEL_ID FROM
		VIS_ADHOC_CHART_LAYOUT_MODEL INNER JOIN VIS_ADHOC_CHART_LAYOUT_MAP_TBL
		ON VIS_ADHOC_CHART_LAYOUT_MAP_TBL.MAPPING_ID =
		VIS_ADHOC_CHART_LAYOUT_MODEL.MAPPING_ID AND MODEL_ID = ?) chart INNER
		JOIN VIS_ADHOC_CHART_TYPE_TBL ACT ON act.chart_type_id =
		chart.CHART_TYPE_ID WHERE chart.LAYOUT_ID = alt.layout_id ORDER BY
		MODEL_ID
	</query>
	<!-- EXPORT -->
	<!-- <query key="GET_DOWNLOADS">
		SELECT CAST(LOG_ID as integer), FILE_DISPLAY_NAME,
		FILE_PATH, CAST(EXPORTED AS TIMESTAMP) AS CREATED_ON, EXPORT_STATUS,
		EXPORT_FORMAT, CAST(COMPLETED_ON AS TIMESTAMP) AS COMPLETED_ON FROM
		EXPORTLOGGER_TBL WHERE USER_ID = ? AND SOURCEAPPLICATION IN('UNIFY', 'AMT') 
		AND DISPATCH_STATUS ='Offline' AND EXPORT_STATUS
		IN('Successful','Downloaded', 'Failure') AND ORG_NAME_EQUALS_CURRENT
		AND EXPORTED BETWEEN CURRENT_TIMESTAMP - INTERVAL '30 DAYS' AND
		CURRENT_TIMESTAMP ORDER BY EXPORTED DESC
	</query> -->
	<query key="DOWNLOAD_FILE">SELECT FILE_PATH, FILE_DISPLAY_NAME, EXPORT_STATUS
		FROM EXPORTLOGGER_TBL WHERE LOG_ID = ? AND SOURCEAPPLICATION IN('UNIFY', 'AMT') 
		AND USER_ID = ? AND ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="UPDATE_EXPORT_STATUS">UPDATE EXPORTLOGGER_TBL SET EXPORT_STATUS = ? WHERE
		LOG_ID = ?
	</query>
	<!-- <query key="GET_EXPORT_COUNT">SELECT COUNT(1) COUNT FROM EXPORTLOGGER_TBL WHERE USER_ID=? AND 
		FILE_PATH IS NOT NULL AND EXPORT_STATUS ='Successful' AND DISPATCH_STATUS = 'Offline' 
		AND SOURCEAPPLICATION IN('UNIFY', 'AMT') AND ORG_NAME_EQUALS_CURRENT 
		AND EXPORTED BETWEEN current_timestamp - interval '30 days' AND CURRENT_TIMESTAMP
	</query>
	<query key="GET_NOTIFICATION_COUNT">SELECT COUNT(1) COUNT FROM
		VIZ_NOTIFICATION_USER_TBL USR
		INNER JOIN VIZ_NOTIFICATION_TBL MSG
		ON USR.NOTIFICATION_ID = MSG.NOTIFICATION_ID
		AND USR.IS_READ = 'N'
		AND USR.IS_DELETED = 'N'
		AND USR.USER_ID = ?
		AND MSG.ORG_NAME_EQUALS_CURRENT
		AND (((CAST(extract(days FROM CURRENT_TIMESTAMP - MSG.CREATED) as NUMERIC) &lt;= ?::integer) AND MSG.OBJECT_TYPE_ID != '7')
		OR (MSG.OBJECT_TYPE_ID = '7' AND CURRENT_TIMESTAMP BETWEEN MSG.START_DATE AND MSG.END_DATE))
	</query> -->
	<query key="GET_STORY_REPORT_IDS">SELECT STORY_REPORT_ID,cast(RPT_INDEX as numeric)
		POSITION
		FROM STORY_REPORT_MAP WHERE STORY_ID = ? ORDER BY POSITION
	</query>
	<query key="GET_EXPORT_METADATA">SELECT W.WSP_ID,CP.PROPERTIES FROM WSP_PANE_TBL PN
		,CMN_REPORT_TBL RPT , WSP_PAGE_TBL P ,CMN_PANE_PROPS_TBL CP
		,WSP_SUMM_TBL W WHERE PN.PAGE_ID = P.PAGE_ID AND W.WSP_ID IN (??) AND
		W.WSP_ID = P.WSP_ID AND PN.OBJECT_ID = RPT.REPORT_ID AND CP.PANE_ID =
		RPT.BLX_PROPS_ID AND CP.PANE_TYPE ='ChartBlox'
	</query>

	<query key="GET_MODEL_METADATA_VALUE">SELECT VMETA.MODEL_ID MODEL_ID,VMETA.METADATA_NAME
		METADATA_NAME,VDLOOK.DIMENSION_NAME_VALUE DIMENSION_NAME FROM
		VIS_METADATA_TBL VMETA, VIS_DIMENSIONNAME_LOOKUP VDLOOK WHERE
		VMETA.METADATA_VALUE = VDLOOK.DIMENSION_NAME_KEYWORD AND VDLOOK.LOCALE
		= ? AND VMETA.MODEL_ID = 0 AND VMETA.METADATA_NAME IN (??) UNION
		SELECT VMETA.MODEL_ID MODEL_ID,VMETA.METADATA_NAME
		METADATA_NAME,VMETA.METADATA_VALUE DIMENSION_NAME FROM
		VIS_METADATA_TBL VMETA WHERE VMETA.MODEL_ID = ?::integer
	</query>

	<query key="GET_STORY_REPORT_DETAILS">SELECT SELECTIONS,VIS_REPORT_PROPERTY FROM
		STORY_REPORT_MAP WHERE STORY_REPORT_ID = ?
	</query>
	<query key="GET_WORKSPACE_ID_FOR_STORY_REPORT">SELECT WORKSPACE_ID FROM STORY_REPORT_MAP WHERE
		STORY_REPORT_ID = ?
	</query>
	<query key="IS_CHART_DRILL_DOWN_ENABLED">SELECT PARAMETER_VALUE FROM VIS_REPORT_EXTN_TBL WHERE
		WSP_ID = ? AND PARAMETER_NAME='IsDrillEnabled'
	</query>
	<query key="GET_PARAM_VALUE_VIS_REPORT_EXTN_TBL">SELECT PARAMETER_VALUE FROM VIS_REPORT_EXTN_TBL WHERE
		WSP_ID = ? AND LOWER(PARAMETER_NAME)= ?
	</query>

	<!-- DEFAULT DESK -->
	<!-- <query key="GET_DEFAULT_DESK_USER">SELECT DESK_ID, CREATED_ON FROM VIS_DESK WHERE DESK_ID = (SELECT
		DESK_ID FROM VIS_DEFAULT_DESK_TBL WHERE USERID = ? AND
		ORG_NAME_EQUALS_CURRENT) AND (coalesce(IS_DASHBOARD_DESK,'false') !=
		?)
	</query> -->
	 <query key="GET_DEFAULT_DESK_LIST_BY_USER">
		SELECT VD.DESK_ID,
			  VD.DESK_NAME,
			  VDGM.GROUP_ID,
			  VDUM.USER_ID
			FROM VIS_DESK VD
			LEFT OUTER JOIN VIS_DESK_GRP_MAP VDGM ON VD.DESK_ID    = VDGM.DESK_ID
			LEFT OUTER JOIN  VIS_DESK_USER_MAP VDUM ON VD.DESK_ID    = VDUM.DESK_ID
			LEFT OUTER JOIN  VIS_DEFAULT_DESK_TBL VDD ON VD.DESK_ID    = VDD.DESK_ID
			WHERE lower(VD.CREATED_BY)  = lower(?)
    </query>
	
	<query key="GET_DEFAULT_DESK_USER">
	
							SELECT VD.DESK_ID,VD.LAST_UPD,
							  'owned' AS TYPE
							FROM VIS_DESK VD
							JOIN VIS_DEFAULT_DESK_TBL VDD
							ON VDD.DESK_ID                          = VD.DESK_ID
							WHERE LOWER(VD.CREATED_BY)              = LOWER(?)
							AND VD.ORG_NAME_EQUALS_CURRENT
							AND (VD.TARGET_APP IS NULL OR UPPER(VD.TARGET_APP) = 'MOBILE')
							AND (coalesce(VD.IS_DASHBOARD_DESK,'false') != ?)
							UNION
							SELECT VD.DESK_ID,VD.LAST_UPD,
							  'shared' AS TYPE
							FROM VIS_DESK VD
							JOIN VIS_DESK_GRP_MAP VDGM
							ON VD.DESK_ID = VDGM.DESK_ID
							JOIN ADM_GRP_USR_MAP AGUM
							ON VDGM.GROUP_ID = AGUM.GROUP_ID
							JOIN VIS_DEFAULT_DESK_TBL VDD
							ON VDD.DESK_ID                          = VD.DESK_ID
							WHERE LOWER(AGUM.USER_ID)               = LOWER(?)
							AND VD.ORG_NAME_EQUALS_CURRENT
							AND (VD.TARGET_APP IS NULL OR UPPER(VD.TARGET_APP) = 'MOBILE')
							AND (coalesce(VD.IS_DASHBOARD_DESK,'false') != ?)
							UNION
							SELECT VD.DESK_ID,VD.LAST_UPD,
							  'shared' AS TYPE
							FROM VIS_DESK VD
							JOIN VIS_DESK_USER_MAP VDUM
							ON VD.DESK_ID = VDUM.DESK_ID
							JOIN VIS_DEFAULT_DESK_TBL VDD
							ON VDD.DESK_ID                          = VD.DESK_ID
							WHERE LOWER(VDUM.USER_ID)               = LOWER(?)
							AND VD.ORG_NAME_EQUALS_CURRENT
							AND (VD.TARGET_APP IS NULL OR UPPER(VD.TARGET_APP) = 'MOBILE')
							AND (coalesce(VD.IS_DASHBOARD_DESK,'false') != ?)
	
	</query>
	<query key="GET_DEFAULT_DESK_MOBILE_USER">
	
							SELECT VD.DESK_ID,VD.LAST_UPD,
							  'owned' AS TYPE
							FROM VIS_DESK VD
							JOIN VIS_DEFAULT_DESK_TBL VDD
							ON VDD.DESK_ID                          = VD.DESK_ID
							WHERE LOWER(VD.CREATED_BY)              = LOWER(?)
							AND VD.ORG_NAME_EQUALS_CURRENT
							AND (UPPER(VD.TARGET_APP) = 'MOBILE')
							AND (coalesce(VD.IS_DASHBOARD_DESK,'false') != ?)
							UNION
							SELECT VD.DESK_ID,VD.LAST_UPD,
							  'shared' AS TYPE
							FROM VIS_DESK VD
							JOIN VIS_DESK_GRP_MAP VDGM
							ON VD.DESK_ID = VDGM.DESK_ID
							JOIN ADM_GRP_USR_MAP AGUM
							ON VDGM.GROUP_ID = AGUM.GROUP_ID
							JOIN VIS_DEFAULT_DESK_TBL VDD
							ON VDD.DESK_ID                          = VD.DESK_ID
							WHERE LOWER(AGUM.USER_ID)               = LOWER(?)
							AND VD.ORG_NAME_EQUALS_CURRENT
							AND (UPPER(VD.TARGET_APP) = 'MOBILE')
							AND (coalesce(VD.IS_DASHBOARD_DESK,'false') != ?)
							UNION
							SELECT VD.DESK_ID,VD.LAST_UPD,
							  'shared' AS TYPE
							FROM VIS_DESK VD
							JOIN VIS_DESK_USER_MAP VDUM
							ON VD.DESK_ID = VDUM.DESK_ID
							JOIN VIS_DEFAULT_DESK_TBL VDD
							ON VDD.DESK_ID                          = VD.DESK_ID
							WHERE LOWER(VDUM.USER_ID)               = LOWER(?)
							AND VD.ORG_NAME_EQUALS_CURRENT
							AND (UPPER(VD.TARGET_APP) = 'MOBILE')
							AND (coalesce(VD.IS_DASHBOARD_DESK,'false') != ?)
	
	</query>
	
	<query key="UPDATE_DEFAULT_DESK">UPDATE VIS_DEFAULT_DESK_TBL SET DESK_ID = ? WHERE
		USERID = ? AND ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="INSERT_DEFAULT_DESK">INSERT INTO
		VIS_DEFAULT_DESK_TBL(USERID,DESK_ID,ORG_NAME,CREATED,CREATED_BY)
		VALUES(?,?,CURRENT_ORG_NAME,CURRENT_TIMESTAMP,CURRENT_LOGGED_IN_USER)
	</query>
	<query key="DELETE_DEFAULT_DESK">DELETE FROM VIS_DEFAULT_DESK_TBL WHERE DESK_ID IN (??)
	</query>

	<!-- GET WORKSPACE INFORMATION QUERIES -->
<!-- 	<query key="GET_WORKSPACE_INFO">SELECT 
	WSP.WSP_TITLE,WSP.WSP_TYPE,WSP.SCOPE,PAGE.PAGE_TITLE,PANE.PANE_ID,PANE.PANE_TITLE,PANE.OBJECT_ID,RPT_DTL.ROW_COL_FIL,RPT_DTL.FUNCTION_NAME 
	,RPT_DTL.DIMENSION_NAME,WSP.LAST_UPD,WSP.CREATED FROM WSP_SUMM_TBL WSP, WSP_PAGE_TBL PAGE 
	INNER JOIN WSP_PANE_TBL PANE ON PAGE.PAGE_ID = PANE.PAGE_ID AND PANE.OBJECT_ID IS NOT NULL 
	INNER JOIN CMN_REPORT_DETAIL_TBL RPT_DTL ON RPT_DTL.REPORT_ID = PANE.OBJECT_ID WHERE WSP.WSP_ID=? AND 
	PAGE.WSP_ID=?
	AND (RPT_DTL.FUNCTION_NAME IS NULL OR RPT_DTL.FUNCTION_NAME = '')
	ORDER BY PANE.PANE_ID</query> -->
	<query key="GET_WORKSPACE_INFO">SELECT WSP.WSP_TITLE,
		WSP.WSP_TYPE,
		WSP.SCOPE,
		PAGE.PAGE_TITLE,
		PANE.PANE_ID,
		PANE.PANE_TITLE,
		PANE.OBJECT_ID,
		RPT_DTL.ROW_COL_FIL,
		RPT_DTL.DIMENSION_NAME,
		WSP.LAST_UPD,
		WSP.CREATED,
		VSD.SCHEDULE_ID
		FROM WSP_SUMM_TBL WSP,
		WSP_PAGE_TBL PAGE
		INNER JOIN WSP_PANE_TBL PANE
		ON PAGE.PAGE_ID = PANE.PAGE_ID
		AND PANE.OBJECT_ID IS NOT NULL
		INNER JOIN CMN_REPORT_DETAIL_TBL RPT_DTL
		ON RPT_DTL.REPORT_ID = PANE.OBJECT_ID
		LEFT JOIN VIS_SCHEDULE_DTL VSD
		ON VSD.OBJECT_ID = PAGE.WSP_ID
		WHERE WSP.WSP_ID =?
		AND PAGE.WSP_ID =?
		AND RPT_DTL.FUNCTION_NAME IS NULL
		ORDER BY PANE.PANE_ID
	</query>
	<query key="GET_WORKSPACE_REPORTS_VIEW_TYPE">SELECT cmn_report_tbl.report_id, pane_props.pane_type,
		pane_props.properties FROM cmn_report_tbl cmn_report_tbl INNER JOIN
		cmn_pane_props_tbl pane_props ON pane_props.pane_id =
		cmn_report_tbl.blx_props_id AND cmn_report_tbl.report_id IN(??)
	</query>
	<query key="GET_STORY_ASSOCIATION_FOR_WORKSPACE">
		SELECT stry_tbl.story_id, stry_tbl.type, stry_tbl.created_by,
		  CASE lower(stry_tbl.type)
		    WHEN 'dashboard'
		    THEN
		      (SELECT title || '.' || stry_tbl.title FROM story_tbl WHERE story_id IN
		        (SELECT story_id FROM story_report_map WHERE workspace_id = stry_tbl.story_id AND lower(type) = 'dashboard'
		        )
		      )
		    ELSE stry_tbl.title
		  END AS title
		FROM STORY_REPORT_MAP stry_rpt_map
		INNER JOIN STORY_TBL stry_tbl
		ON stry_rpt_map.story_id = stry_tbl.story_id
		AND stry_rpt_map.workspace_id = ? AND created_by = ? AND ORG_NAME_EQUALS_CURRENT
		UNION
		SELECT story_tbl.story_id, story_tbl.type, story_tbl.created_by,
		  CASE lower(story_tbl.type)
		    WHEN 'dashboard'
		    THEN
		      (SELECT title  || '.' || story_tbl.title FROM story_tbl WHERE story_id IN
		        (SELECT story_id FROM story_report_map WHERE workspace_id = story_tbl.story_id AND lower(type) = 'dashboard'
		        )
		      )
		    ELSE story_tbl.title
		  END AS title
		FROM story_tbl, story_report_map
		WHERE story_tbl.story_id IN
		  (SELECT story_id
		  FROM vis_story_user_map_tbl
		  WHERE LOWER(user_id) = ?
		  AND ORG_NAME_EQUALS_CURRENT
		  AND STORY_TYPE_ID = cast(2 as varchar)
		  UNION
		  SELECT story_id FROM vis_story_grp_map_tbl
		  WHERE group_id IN (SELECT cast(GROUP_ID as varchar) FROM ADM_GRP_USR_MAP WHERE LOWER(USER_ID) = ?)
		  AND ORG_NAME_EQUALS_CURRENT AND STORY_TYPE_ID = cast(2 as varchar)
		  )
		AND story_tbl.story_id = story_report_map.story_id
		AND story_report_map.workspace_id = ?
	</query>
	<!-- GET STORY INFORMATION QUERIES -->
	<query key="GET_STORY_MTDT_INFO">
		SELECT ST.TITLE, ST.CREATED, ST.LAST_UPD, SRM.STORY_REPORT_ID, SRM.WORKSPACE_ID, SRM.TYPE, SRM.VIS_REPORT_PROPERTY, SRM.TEXT_PANE_DATA, WSP.WSP_TITLE, WSP.WSP_DESCRIPTION, CUBE.CUBE_NAME, VARMT.ALIAS_VALUE, ST.CREATED_BY,
VSD.SCHEDULE_ID, 
SDL.STORY_REPORT_ID DIM_LINK_STORY_REPORT_ID, CAST(SRM.RPT_INDEX as INT) AS REPORT_INDEX
		FROM
    STORY_TBL ST
		LEFT JOIN STORY_REPORT_MAP SRM
		ON ST.STORY_ID = SRM.STORY_ID
		LEFT JOIN WSP_SUMM_TBL WSP
		ON SRM.WORKSPACE_ID = WSP.WSP_ID
		LEFT JOIN WSP_PAGE_TBL PAGE
		ON WSP.WSP_ID = PAGE.WSP_ID
		LEFT JOIN WSP_PANE_TBL PANE
		ON PAGE.PAGE_ID = PANE.PAGE_ID AND PANE.OBJECT_ID IS NOT NULL AND PANE.OBJECT_TYPE = 0
		LEFT JOIN CMN_REPORT_TBL REPORT
		ON PANE.OBJECT_ID = REPORT.REPORT_ID
		LEFT JOIN CUBE_TBL CUBE
		ON REPORT.CUBE_ID = CUBE.CUBE_ID
		LEFT JOIN VIS_ALIAS_RPT_MAP_TBL VARMT
		ON SRM.STORY_REPORT_ID = VARMT.REPORT_ID
		AND VARMT.ALIASED_COMPONENT_ID=6
		LEFT JOIN STORY_DIM_LINKS SDL
		ON SRM.STORY_REPORT_ID = SDL.STORY_REPORT_ID
    LEFT JOIN VIS_SCHEDULE_DTL VSD
    ON VSD.OBJECT_ID  = ST.STORY_ID
		WHERE ST.STORY_ID = ?
		ORDER BY REPORT_INDEX
	</query>
	<!--<query key="GET_STORY_DESK_ASSOCIATION">
		SELECT DESK.DESK_NAME, DESK.CREATED_BY, VDSM.DESK_ID 
		FROM VIS_DESK_STORY_MAP VDSM INNER JOIN VIS_DESK DESK 
		ON VDSM.DESK_ID = DESK.DESK_ID WHERE VDSM.STORY_ID = ?
	</query>-->
	<query key="GET_STORY_DESK_ASSOCIATION_IF_STORY_AUTHOR">
		SELECT DESK.DESK_NAME, DESK.CREATED_BY, VDSM.DESK_ID 
		FROM VIS_DESK_STORY_MAP VDSM INNER JOIN VIS_DESK DESK 
		ON VDSM.DESK_ID = DESK.DESK_ID WHERE VDSM.STORY_ID = ?
	</query>
	
	<query key="GET_STORY_DESK_ASSOCIATION">
		SELECT DESK.DESK_NAME, DESK.CREATED_BY, VDSM.DESK_ID
		FROM
		VIS_DESK_STORY_MAP VDSM INNER JOIN VIS_DESK DESK
		ON VDSM.DESK_ID =
		DESK.DESK_ID
		WHERE VDSM.STORY_ID = ?
		AND (VDSM.DESK_ID IN(SELECT
		DESK_ID FROM VIS_DESK_USER_MAP VDUM WHERE
		VDUM.USER_ID = ?)
		OR
		DESK.CREATED_BY = ?)
	</query>
	<query key="GET_STORY_TYPE">select count(*) from VIS_STORY_USER_MAP_TBL where
		story_id = ? UNION select count(*) from VIS_STORY_GRP_MAP_TBL where
		story_id = ?
	</query>

	<!-- REPORT CACHE QUERIES -->
	<query key="INSERT_NEW_CACHE">INSERT INTO VIS_REPORT_CACHE_TBL(CACHE_ID, REPORT_ID,
		ORG_NAME, CACHE_KEY, SELECTION, CREATED, CREATED_BY, NOTES,
		PRSN_RPT_CACHE_DATA) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, ?,
		?)
	</query>
	<query key="GET_CACHE_FOR_CACHE_KEY">SELECT CACHE_ID, PRSN_RPT_CACHE_DATA FROM
		VIS_REPORT_CACHE_TBL WHERE REPORT_ID = ? AND CACHE_KEY LIKE ?
	</query>
	<query key="GET_CACHE_FOR_DEFAULT">SELECT CACHE_ID, PRSN_RPT_CACHE_DATA FROM
		VIS_REPORT_CACHE_TBL WHERE REPORT_ID = ? AND SELECTION IS NULL
	</query>
	<query key="INSERT_CACHE_USAGE_STATS">INSERT INTO VIS_REPORT_CACHE_STATS_TBL(CACHE_ID,
		REPORT_ID, ORG_NAME, EXECUTED, EXECUTED_BY) VALUES (?, ?, ?,
		CURRENT_TIMESTAMP, ?)
	</query>
	<query key="DELETE_CACHE_FOR_CACHE_ID">DELETE FROM VIS_REPORT_CACHE_TBL WHERE CACHE_ID = ?
	</query>
	<query key="DELETE_CACHE_STAT_FOR_CACHE_ID">DELETE FROM VIS_REPORT_CACHE_STATS_TBL WHERE CACHE_ID
		= ?
	</query>
	<query key="DELETE_ALL_CACHE">DELETE FROM VIS_REPORT_CACHE_TBL</query>
	<query key="DELETE_ALL_CACHE_STAT">DELETE FROM VIS_REPORT_CACHE_STATS_TBL</query>
	<query key="DELETE_ALL_CACHE_FOR_ORG">DELETE FROM VIS_REPORT_CACHE_TBL WHERE
		coalesce(ORG_NAME, 'default') = ?
	</query>
	<query key="DELETE_ALL_CACHE_STAT_FOR_ORG">DELETE FROM VIS_REPORT_CACHE_STATS_TBL WHERE
		coalesce(ORG_NAME, 'default') = ?
	</query>
	<query key="GET_CACHE_FOR_REPORT_ID">SELECT CACHE_ID FROM VIS_REPORT_CACHE_TBL WHERE
		REPORT_ID = ?
	</query>
	<query key="GET_CACHE_FOR_OBJECT_ID">SELECT CACHE_ID FROM VIS_REPORT_CACHE_TBL WHERE
		CACHE_KEY LIKE = ? AND ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="DELETE_CACHE_FOR_CACHE_IDS">DELETE FROM VIS_REPORT_CACHE_TBL WHERE CACHE_ID IN
		(??)
	</query>
	<query key="DELETE_CACHE_STAT_FOR_CACHE_IDS">DELETE FROM VIS_REPORT_CACHE_STATS_TBL WHERE CACHE_ID
		IN (??)
	</query>

	<!-- DESK PERSONALIZATION QUERIES -->
	<query key="SAVE_DESK_PERSONALIZATION">INSERT INTO VIS_DESK_PERSONALIZATION_TBL (DESK_ID,
		STORY_ID, STORY_REPORT_ID, SELECTION, CREATED, CREATED_BY) VALUES (?,
		?, ?, ?, CURRENT_TIMESTAMP, ?)
	</query>
	<query key="DELETE_DESK_PERSONALIZATION">DELETE FROM VIS_DESK_PERSONALIZATION_TBL WHERE DESK_ID
		= ? AND STORY_ID = ? AND STORY_REPORT_ID = ? AND CREATED_BY = ?
	</query>

	<query key="GET_STORY_REPORT_MAPPINGS">SELECT RPT_INDEX,STORY_REPORT_ID FROM STORY_REPORT_MAP
		WHERE STORY_ID = ? ORDER BY cast(RPT_INDEX as numeric)
	</query>
	<query key="GET_STORY_REPORT_EXCEPT_DASHBOARD">SELECT RPT_INDEX,STORY_REPORT_ID FROM STORY_REPORT_MAP
		WHERE STORY_ID = ? AND TYPE IS NULL ORDER BY cast(RPT_INDEX as
		numeric)
	</query>
	<query key="DELETE_MULTIPLE_REPORT_IN_LINE_EDIT_DATA">DELETE FROM VIS_ALIAS_RPT_MAP_TBL WHERE REPORT_ID IN
		(??)
	</query>
	<query key="INSERT_INLINE_DATA">INSERT into VIS_ALIAS_RPT_MAP_TBL
		(ALIAS_ID,REPORT_ID,CHART_ID,ALIASED_COMPONENT_ID,ALIAS_VALUE,CREATED_BY,CREATED)
		values
		(?,?,?::numeric,?::numeric,?,CURRENT_LOGGED_IN_USER,CURRENT_TIMESTAMP)
	</query>
	<query key="UPDATE_INLINE_DATA">UPDATE VIS_ALIAS_RPT_MAP_TBL SET ALIAS_VALUE = ?,
		LAST_UPD_BY = CURRENT_LOGGED_IN_USER, LAST_UPD=CURRENT_TIMESTAMP WHERE
		ALIAS_ID = ? AND REPORT_ID = ?
	</query>
	<query key="DELETE_INLINE_DATA">DELETE FROM VIS_ALIAS_RPT_MAP_TBL WHERE ALIAS_ID = ?
		AND REPORT_ID = ?
	</query>
	<query key="DELETE_SHARED_STORY_USER_DATA">DELETE FROM VIS_STORY_USER_MAP_TBL WHERE STORY_ID=?
		AND STORY_TYPE_ID=?
	</query>
	<query key="DELETE_SHARED_STORY_GROUP_DATA">DELETE FROM VIS_STORY_GRP_MAP_TBL WHERE STORY_ID=? AND
		STORY_TYPE_ID=?
	</query>
	<query key="DELETE_SHARED_OBJECT_USER_DATA">DELETE FROM OBJ_USER_MAP WHERE OBJECT_ID = ?</query>
	<query key="DELETE_SHARED_OBJECT_GROUP_DATA">DELETE FROM OBJ_USERGRP_MAP WHERE OBJECT_ID = ?
	</query>
	<query key="DELETE_SHARED_STORIES_USER_DATA">DELETE FROM VIS_STORY_USER_MAP_TBL 
	    WHERE STORY_ID IN(??) AND STORY_TYPE_ID=?
	</query>	
	<query key="DELETE_SHARED_STORIES_GROUP_DATA">DELETE FROM VIS_STORY_GRP_MAP_TBL 
	    WHERE STORY_ID IN(??) AND STORY_TYPE_ID=?
	</query>
	<query key="DELETE_SHARED_OBJECTS_USER_DATA">DELETE FROM OBJ_USER_MAP 
	    WHERE OBJECT_ID IN(??)
	</query>	
	<query key="DELETE_SHARED_OBJECTS_GROUP_DATA">DELETE FROM OBJ_USERGRP_MAP
	    WHERE OBJECT_ID IN(??)
	</query>
	<query key="GET_STORY_BY_NAME">SELECT * FROM STORY_TBL WHERE LOWER(TITLE)=? AND
		STORY_ID != ? AND TYPE IS null AND CREATED_BY=? AND
		ORG_NAME_EQUALS_CURRENT AND STORY_ID NOT IN (SELECT STORY_ID FROM
		VIS_DESK_STORY_MAP VDSM, VIS_DESK VD WHERE VDSM.DESK_ID = VD.DESK_ID
		AND ORG_NAME_EQUALS_CURRENT AND VD.TARGET_APP='AE')
	</query>

	<query key="SELECT_SHARED_USERS_AND_GROUPS_FOR_STORY">SELECT 'USER' AS ITEM_TYPE, USER_ID FROM
		VIS_STORY_USER_MAP_TBL WHERE STORY_ID = ? UNION SELECT 'GROUP' AS
		ITEM_TYPE, GROUP_ID FROM VIS_STORY_GRP_MAP_TBL WHERE STORY_ID = ? AND
		STORY_TYPE_ID= ?
	</query>

	<query key="INSERT_SHARED_STORY_USER_DATA">INSERT INTO
		VIS_STORY_USER_MAP_TBL(STORY_ID,USER_ID,CREATED_BY,CREATED_DATE,LAST_UPD_BY,LAST_UPD_DATE,ORG_NAME,STORY_TYPE_ID)
		VALUES(?,?,?,CURRENT_TIMESTAMP,?,CURRENT_TIMESTAMP,CURRENT_ORG_NAME,?)
	</query>
	<query key="INSERT_SHARED_STORY_GROUP_DATA">INSERT INTO
		VIS_STORY_GRP_MAP_TBL(STORY_ID,GROUP_ID,CREATED_BY,CREATED_DATE,LAST_UPD_BY,LAST_UPD_DATE,ORG_NAME,STORY_TYPE_ID)
		VALUES(?,?,?,CURRENT_TIMESTAMP,?,CURRENT_TIMESTAMP,CURRENT_ORG_NAME,?)
	</query>
	<query key="INSERT_SHARED_OBJECT_USER_DATA">INSERT INTO OBJ_USER_MAP ( USER_ID, OBJECT_ID,
		IS_EDITABLE, CREATED, LAST_UPD, LAST_UPD_BY, GROUP_ID) VALUES (?, ?,
		?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_LOGGED_IN_USER,
		?::numeric)
	</query>
	<query key="INSERT_SHARED_OBJECT_GROUP_DATA">INSERT INTO OBJ_USERGRP_MAP ( GROUP_ID, OBJECT_ID,
		IS_EDITABLE, CREATED, LAST_UPD, LAST_UPD_BY ) VALUES ( ?::numeric, ?,
		?,
		CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_LOGGED_IN_USER )
	</query>
	<query key="GET_STORY_BY_AUTHOR_NAME">SELECT * FROM STORY_TBL WHERE STORY_ID=? AND
		CREATED_BY=?
	</query>
	<query key="GET_AUTHORED_STORIES">SELECT STORY_ID FROM STORY_TBL WHERE STORY_ID IN (??)
		AND CREATED_BY= ?
	</query>
	<query key="INSERT_STORY_EXEC_INFO">INSERT INTO STORY_EXEC_INFO_TBL (EXEC_LOG_ID,
		STORY_ID, EXECUTED_USER, EXECUTED_TIME, ORG_NAME, APPLICATION) VALUES
		(?, ?, ?, CURRENT_TIMESTAMP,?,?)
	</query>
	<query key="GET_REPORT_BUSINESS_ISSUES_INFO">SELECT KEYWORD FROM CMN_SEARCH_TBL WHERE TYPE =
		'Business Issues' AND OBJECT_ID=?
	</query>
	<query key="GET_STORY_TAGS_N_BUS_ISSUE_INFO">SELECT DISTINCT OBJECT_ID, KEYWORD, TYPE FROM
		CMN_SEARCH_TBL WHERE (OBJECT_ID =? AND lower(TYPE) in ('tags',
		'business issues')) OR (OBJECT_ID IN (??) AND TYPE IN
		('enableAsynchronousInWspProp', 'Business Issues', 'AS Model Name'))
	</query>
	<query key="GET_LINKED_DIMENSIONS_FOR_WSPIDS">SELECT DISTINCT PAGE.WSP_ID, RPT_DTL.ROW_COL_FIL,
		RPT_DTL.DIMENSION_NAME, PAGE.PAGE_ID ,RPT.CUBE_ID FROM WSP_PAGE_TBL
		PAGE INNER JOIN WSP_PANE_TBL PANE ON PAGE.PAGE_ID = PANE.PAGE_ID INNER
		JOIN CMN_REPORT_DETAIL_TBL RPT_DTL ON RPT_DTL.REPORT_ID =
		PANE.OBJECT_ID INNER JOIN CMN_REPORT_TBL RPT ON RPT.REPORT_ID =
		PANE.OBJECT_ID WHERE PAGE.WSP_ID IN (??) AND ROW_COL_FIL IN
		('F','C','R') ORDER BY PAGE.WSP_ID
	</query>
	<query key="GET_DIMENSION_LINKING_VALUES">SELECT STORY_REPORT_ID, DIM_NAME FROM STORY_DIM_LINKS
		WHERE STORY_REPORT_ID IN (??)
	</query>
	<query key="DELETE_DIMENSION_LINK_DETAILS">DELETE FROM STORY_DIM_LINKS WHERE STORY_REPORT_ID IN
		(??)
	</query>
	<query key="INSERT_DIMENSION_LINK_DETAILS">INSERT INTO STORY_DIM_LINKS VALUES
		(?,?,CURRENT_TIMESTAMP,?,CURRENT_TIMESTAMP,?)
	</query>
	<query key="DELETE_BUSINESS_ISSUES_FOR_STORY">DELETE FROM CMN_SEARCH_TBL WHERE OBJECT_ID=? AND
		LOWER(TYPE)='business issues'
	</query>
	<query key="INSERT_BUSINESS_ISSUES_FOR_STORY">INSERT INTO CMN_SEARCH_TBL (OBJECT_ID, KEYWORD, TYPE,
		CREATED_BY, CREATED, LAST_UPD_BY, LAST_UPD) VALUES (?, ?, ?, ?,
		CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP)
	</query>
	<query key="SELECT_IMG_PATH_FOR_REPORT">SELECT IMG_PATH FROM OBJECT_IMG_MAP_TBL OIMT,
		WSP_SUMM_TBL WST WHERE OIMT.OBJECT_ID = WST.WSP_ID AND WST.WSP_ID = ?
		UNION SELECT CHART.THUMBNAIL_PATH AS IMG_PATH FROM
		VIS_CHART_MAPPING_TBL CHART, CMN_SEARCH_TBL CMN WHERE CMN.OBJECT_ID =
		? AND CMN.TYPE = 'Thumbnail Type' AND CMN.KEYWORD =
		cast(CHART.CHART_MAPPING_ID as varchar) AND CMN.OBJECT_ID NOT IN
		(SELECT
		WST.WSP_ID FROM OBJECT_IMG_MAP_TBL OIMT, WSP_PAGE_TBL WST WHERE
		OIMT.OBJECT_ID = WST.WSP_ID AND WST.WSP_ID = ?)
	</query>

	<query key="GET_STORY_TITLE_FOR_STORY_REPORT_ID">SELECT ST.TITLE ,ST.CREATED_BY, SRM.LAST_UPDATED,
		SRM.CACHE_ID FROM STORY_TBL ST, STORY_REPORT_MAP SRM WHERE ST.STORY_ID
		= SRM.STORY_ID AND SRM.STORY_REPORT_ID = ?
	</query>
	<query key="GET_SHAPE_DATA">SELECT LOWER(SHAPE_KEY) ,FILE_KEY FROM SHAPE_MAP_TBL
		WHERE LOWER(SHAPE_KEY) = ?
	</query>
	<query key="GET_LEVEL_SHAPE_DATA">SELECT LOWER(LEVEL_KEY) ,FILE_KEY FROM LEVEL_MAP_TBL
		WHERE LOWER(LEVEL_KEY) = ?
	</query>
	<query key="INSERT_MISSING_SHAPE">INSERT INTO SHAPE_NONEXSISTENT_TBL(SHAPE_KEY)
		VALUES(?)
	</query>
	<query key="INSERT_MISSING_GEO_SHAPES">INSERT /*+
		IGNORE_ROW_ON_DUPKEY_INDEX(GIS_GEO_MISSING_TBL
		,GIS_GEO_MISSING_UNIQUE) */ INTO GIS_GEO_MISSING_TBL (GEO_KEY)
		VALUES(?)
	</query>
	<query key="CHECK_IF_MISSING_SHAPE_EXSIST">SELECT LOWER(SHAPE_KEY) FROM SHAPE_NONEXSISTENT_TBL
		WHERE LOWER(SHAPE_KEY)=?
	</query>
	<query key="GET_VIS_MENU_DATA">SELECT MENU_ID, MENU_TEXT, PARENT_ID, MENU_TYPE, HREF,
		TARGET, MENU_INDEX, ASSET_ID, ICON, CSS FROM VIS_MENU_MASTER ORDER BY
		PARENT_ID, MENU_INDEX
	</query>
	<query key="UPDATE_FOLDER_OBJ_MAP"> UPDATE FOLDER_OBJ_MAP SET FOLDER_ID =?::numeric WHERE
		OBJECT_ID =?
	</query>
	<query key="UPDATE_FOLDER_OBJ_MAPS"> UPDATE FOLDER_OBJ_MAP SET FOLDER_ID =?::numeric WHERE
		OBJECT_ID in (??)
	</query>
	<query key="UPDATE_WORKSPACE_SCOPE">UPDATE WSP_SUMM_TBL SET SCOPE=?::integer , LAST_UPD_BY
		=
		CURRENT_LOGGED_IN_USER, LAST_UPD = CURRENT_TIMESTAMP WHERE WSP_ID =?
	</query>
	<query key="UPDATE_WORKSPACES_SCOPE">UPDATE WSP_SUMM_TBL SET SCOPE=?::integer , LAST_UPD_BY
		=
		CURRENT_LOGGED_IN_USER, LAST_UPD = CURRENT_TIMESTAMP WHERE WSP_ID IN
		(??)
	</query>
	<query key="UPDATE_OBJECT_SCOPE">UPDATE NAMED_SELECTIONS_SUMM_TBL SET SCOPE=(?)::numeric,
		LAST_UPD_BY = CURRENT_LOGGED_IN_USER, LAST_UPD = CURRENT_TIMESTAMP
		WHERE OBJECT_ID =?
	</query>
	<query key="UPDATE_OBJECTS_SCOPE">UPDATE NAMED_SELECTIONS_SUMM_TBL SET SCOPE=(?),
		LAST_UPD_BY = CURRENT_LOGGED_IN_USER, LAST_UPD = CURRENT_TIMESTAMP
		WHERE OBJECT_ID IN (??)
	</query>
	<query key="SELECT_SHARED_USERS_AND_GROUPS_FOR_REPORT"> SELECT 'user' AS item_type, user_id ,group_id FROM
		obj_user_map WHERE object_id = ? UNION SELECT 'group' AS item_type,
		cast(group_id as character),null FROM obj_usergrp_map WHERE object_id
		= ?
	</query>
	<query key="SELECT_SHARED_USERS_AND_GROUPS_FOR_FOLDER"> 
										SELECT 'user' AS item_type,
												  user_id ,
												  group_id
												FROM FOLDER_user_map
												WHERE FOLDER_ID =
												  (SELECT FOLDER_ID FROM FOLDER_OBJ_MAP WHERE OBJECT_ID = ? AND FOLDER_ID NOT IN (??))
												UNION
												SELECT 'group' AS item_type,
												  cast(group_id as character),
												  NULL
												FROM FOLDER_GRP_map
												WHERE FOLDER_ID =
												  (SELECT FOLDER_ID FROM FOLDER_OBJ_MAP WHERE OBJECT_ID = ? AND FOLDER_ID NOT IN (??))
	</query>
	<query key="SELECT_SHARED_USERS_AND_GROUPS_FOR_OBJECTS"> SELECT 'user' AS item_type,user_id
		,group_id,object_id FROM
		obj_user_map WHERE object_id in (??) UNION
		SELECT 'group' AS item_type,
		cast(group_id as character),null,object_id
		FROM obj_usergrp_map WHERE
		object_id
		in (??) order by object_id
	</query>
	<query key="SELECT_SHARED_USERS_AND_GROUPS_FOR_STORIES">SELECT 'user' AS item_type, user_id,story_id FROM
		vis_story_user_map_tbl WHERE story_id in(??) UNION SELECT 'group' AS
		item_type, group_id,story_id FROM vis_story_grp_map_tbl WHERE story_id
		in(??) AND STORY_TYPE_ID=? ORDER by story_id
	</query>
	<!-- saved selection queries start -->
	<query key="GET_ALL_SAVED_SELECTIONS">SELECT SS.SAVED_SELECTION_ID, SS.SAVED_SELECTION_NAME,
		SS.SAVED_SELECTION_DESCRIPTION, SS.SAVED_SELECTION_MODEL_NAME FROM
		SAVED_SELECTION_DTL_TBL SS WHERE SS.SAVED_SELECTION_MODEL_NAME = ? AND
		SS.ORG_NAME_EQUALS_CURRENT AND SS.CREATED_BY=? ORDER BY
		LOWER(SS.SAVED_SELECTION_NAME)
	</query>
	<query key="GET_GLOBAL_SAVED_SELECTION">SELECT SS.SAVED_SELECTION_ID FROM
		SAVED_SELECTION_DTL_TBL SS ,VIS_WSP_SAVE_SEL_TBL VS WHERE
		SS.SAVED_SELECTION_MODEL_NAME = ? AND SS.ORG_NAME_EQUALS_CURRENT AND
		SS.CREATED_BY=? AND SS.SAVED_SELECTION_ID = VS.SAVED_SELECTION_ID AND
		LOWER(VS.SCOPE) = 'allreports'
	</query>
	<query key="GET_MEMBERS_FOR_SAVED_SELECTION">SELECT SSM.MEMBER_ID, SSM.MEMBER_NAME,
		SSM.DIMENSION_NAME, SSM.MEMBER_FULL_PATH, SSM.MEMBER_LEVEL_NAME,
		SSM.FUNCTION_NAME,SSM.FUNCTION_SELECTIONS FROM SELECTED_MEM_MAP_TBL SSM WHERE
		SSM.SELECTION_ID=? AND SSM.GROUP_ID IS NULL AND ssm.parent_group_id
		='-1' ORDER BY SSM.ID
	</query>
	<query key="GET_ALL_NAMED_SELECTIONS_MAP">SELECT OBJECT_ID,TITLE FROM NAMED_SELECTIONS_SUMM_TBL
		WHERE OBJECT_ID IN(??)
	</query>
	<query key="GET_CURRENT_REPORT_SELCTION_AND_GLOBAL_SELECTION">select ss.SAVED_SELECTION_NAME,wss.SCOPE from
		VIS_WSP_SAVE_SEL_TBL wss,SAVED_SELECTION_DTL_TBL ss where
		wss.saved_selection_id = ss.saved_selection_id and (wss.workspace_id=?
		or wss.scope = ? ) and wss.created_by = ? and
		ss.SAVED_SELECTION_MODEL_NAME = ? AND ss.ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="GET_CURRENT_REPORT_SELCTION_ID_AND_GLOBAL_SELECTION_ID">SELECT SS.SAVED_SELECTION_ID,WSS.SCOPE FROM
		VIS_WSP_SAVE_SEL_TBL WSS,SAVED_SELECTION_DTL_TBL SS WHERE
		WSS.SAVED_SELECTION_ID = SS.SAVED_SELECTION_ID AND (WSS.WORKSPACE_ID=?
		OR WSS.SCOPE = ? ) AND WSS.CREATED_BY = ? AND
		SS.SAVED_SELECTION_MODEL_NAME = ? AND SS.ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="GET_DATA_FROM_METADATA">SELECT MODEL_ID, METADATA_NAME, METADATA_VALUE FROM
		VIS_METADATA_TBL WHERE MODEL_ID=?::integer
	</query>
	<query key="GET_DIMENSION_LOOKUP_NAMES">SELECT DIMENSION_NAME_KEYWORD, DIMENSION_NAME_VALUE
		FROM VIS_DIMENSIONNAME_LOOKUP WHERE LOCALE= ?
	</query>
	<query key="GET_ALL_ASYMMETRIC_SAVED_SELECTIONS">SELECT SAVED_SELECTION_ID, SAVED_SELECTION_NAME FROM
		SAVED_SELECTION_DTL_TBL WHERE SAVED_SELECTION_MODEL_NAME = ? AND
		CREATED_BY = ?
	</query>
	<query key="GET_FIRST_ASYMMETRIC_MEMBERS_COMBINATIONS">SELECT MEMBER_ID, MEMBER_NAME, DIMENSION_NAME,
		MEMBER_LEVEL_NAME, MEMBER_FULL_PATH, GROUP_ID FROM
		SELECTED_MEM_MAP_TBL WHERE SELECTION_ID=? AND RULE_ID IS NULL AND
		DIMENSION_NAME='Measures' AND GROUP_ID IS NOT NULL AND
		PARENT_GROUP_ID='-1' ORDER BY SELECTED_MEM_MAP_TBL.ID
	</query>
	<query key="GET_SECOND_ASYMMETRIC_MEMBERS_COMBINATIONS">SELECT MEMBER_ID, MEMBER_NAME, DIMENSION_NAME,
		MEMBER_LEVEL_NAME, MEMBER_FULL_PATH, GROUP_ID FROM
		SELECTED_MEM_MAP_TBL WHERE SELECTION_ID=? AND RULE_ID IS NULL AND
		PARENT_GROUP_ID=? AND GROUP_ID IS NOT NULL ORDER BY
		SELECTED_MEM_MAP_TBL.ID
	</query>
	<query key="GET_THIRD_ASYMMETRIC_MEMBERS_COMBINATIONS">SELECT MEMBER_ID, MEMBER_NAME, DIMENSION_NAME,
		MEMBER_LEVEL_NAME, MEMBER_FULL_PATH FROM SELECTED_MEM_MAP_TBL WHERE
		SELECTION_ID=? AND RULE_ID IS NULL AND PARENT_GROUP_ID=? AND GROUP_ID
		IS NULL ORDER BY SELECTED_MEM_MAP_TBL.ID
	</query>
	<query key="DELETE_SAVED_NAMED_SELECTIONS">DELETE FROM SELECTED_MEM_MAP_TBL WHERE MEMBER_ID IN
		(??) AND (MEMBER_LEVEL_NAME LIKE 'STORE CLUSTERS' OR MEMBER_LEVEL_NAME
		LIKE 'CUSTOM AGGREGATES')
	</query>

	<query key="GET_SAVED_SELECTION_BY_NAME"> SELECT SAVED_SELECTION_ID from
		SAVED_SELECTION_DTL_TBL where lower(SAVED_SELECTION_NAME) = ? and
		lower(SAVED_SELECTION_MODEL_NAME) = ? AND created_by = ? AND
		ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="CHECK_IF_SELECTION_ID_EXISTS"> SELECT * from SAVED_SELECTION_DTL_TBL where
		SAVED_SELECTION_ID = ? and lower(SAVED_SELECTION_MODEL_NAME) = ? AND
		created_by = ? AND ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="INSERT_SAVED_SELECTION">INSERT INTO SAVED_SELECTION_DTL_TBL (saved_selection_id,saved_selection_name,saved_selection_description,saved_selection_model_name,created_by,created_on,last_upd_by,last_upd_on,org_name)
		values(?,?,?,?,?,CURRENT_TIMESTAMP,?,CURRENT_TIMESTAMP,CURRENT_ORG_NAME)
	</query>
	<query key="INSERT_MEMBER_SELECTION">insert into
		SELECTED_MEM_MAP_TBL(ID,SELECTION_ID,dimension_name,MEMBER_FULL_PATH,
		member_id, MEMBER_LEVEL_NAME,member_name, FUNCTION_NAME,FUNCTION_SELECTIONS, GROUP_ID,
		PARENT_GROUP_ID,CREATED_BY,CREATED)
		values(NEXTVAL('SELECTED_MEM_MAP_SEQ'),?,?,?,?,?,?,?,?,null,'-1',CURRENT_LOGGED_IN_USER,CURRENT_TIMESTAMP)
	</query>
	<query key="INSERT_ASYMMETRIC_MEMBER_SELECTION">insert into
		SELECTED_MEM_MAP_TBL(ID,SELECTION_ID,dimension_name,MEMBER_FULL_PATH,
		member_id, MEMBER_LEVEL_NAME,member_name, GROUP_ID,
		PARENT_GROUP_ID,CREATED_BY,CREATED)
		values(NEXTVAL('SELECTED_MEM_MAP_SEQ'),?,?,?,?,?,?,?,?,CURRENT_LOGGED_IN_USER,CURRENT_TIMESTAMP)
	</query>
	<query key="INSERT_ASYMMETRIC_MEMBER_SELECTION1">insert into
		SELECTED_MEM_MAP_TBL(ID,SELECTION_ID,dimension_name,MEMBER_FULL_PATH,
		member_id, MEMBER_LEVEL_NAME,member_name,
		PARENT_GROUP_ID,CREATED_BY,CREATED)
		values(NEXTVAL('SELECTED_MEM_MAP_SEQ'),?,?,?,?,?,?,?,CURRENT_LOGGED_IN_USER,CURRENT_TIMESTAMP)
	</query>

	<query key="DELETE_PERSONALIZED_SAVED_SELECTION_FROM_WSP_MAP_TBL">DELETE FROM VIS_WSP_SAVE_SEL_TBL WHERE (WORKSPACE_ID=?
		OR SAVED_SELECTION_ID=?) AND ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="INSERT_WSP_SAVED_SELECTION_MAP">INSERT INTO
		VIS_WSP_SAVE_SEL_TBL(WORKSPACE_ID,SAVED_SELECTION_ID,SCOPE,CREATED_BY,CREATED_ON,MODIFIED_BY,MODIFIED_ON,
		ORG_NAME) values(?,?,?,?,CURRENT_TIMESTAMP,?,CURRENT_TIMESTAMP,
		CURRENT_ORG_NAME)
	</query>
	<query key="RENAME_SAVED_SELECTION">UPDATE SAVED_SELECTION_DTL_TBL SET
		SAVED_SELECTION_NAME = ? WHERE SAVED_SELECTION_ID = ?
	</query>
	<query key="CLEAR_PERSONALIZED_SAVED_SELECTION">delete from vis_wsp_save_sel_tbl where WORKSPACE_ID=?
		and scope = ? and created_by = ?
	</query>

	<query key="DELETE_SAVED_SELECTION">DELETE FROM SAVED_SELECTION_DTL_TBL where
		SAVED_SELECTION_ID = ?
	</query>
	<query key="DELETE_SAVED_SELECTION_MEMBER">DELETE FROM SELECTED_MEM_MAP_TBL where SELECTION_ID =
		?
	</query>
	<query key="DELETE_PERSONALIZED_SAVED_SELECTION">DELETE FROM vis_wsp_save_sel_tbl where
		SAVED_SELECTION_ID = ?
	</query>
	<!-- saved selection queries end -->
	<query key = "GET_ALL_CUSTOM_OBJECTS">
	SELECT NS.object_id,
		NS.title,
		NS.scope,
		NS.created_by,
		NS.created,
		NS.is_drillable,
		OBJ.name
		FROM named_selections_summ_tbl NS
		INNER JOIN
		folder_obj_map FO
		ON
		NS.object_id = FO.object_id
		LEFT OUTER JOIN (select OCT.NAME, OCM.OBJ_ID from  OBJECT_COLLECTION_MAP OCM, OBJECT_COLLECTION_TBL OCT
		WHERE OCT.COLLECTION_ID = OCM.COLLECTION_ID
		) OBJ ON OBJ.OBJ_ID = NS.object_id
		WHERE NS.cube_id =
		?::integer
		AND
		Lower(NS.dimension_name) = ?
		AND NS.object_type = ?
		AND (
		(
		Lower(created_by) = ? )
		OR ( scope IN (1, 3, 5) )
		OR ( scope = 2
		AND
		NS.object_id IN
		(SELECT object_id FROM obj_user_map WHERE user_id = ?
		UNION
		SELECT object_id
		FROM obj_usergrp_map
		WHERE group_id IN
		(SELECT
		group_id FROM adm_grp_usr_map WHERE user_id = ?)
		)
		))
		AND
		ORG_NAME_EQUALS_CURRENT
		AND
		FO.FOLDER_ID IN
		(??)
	</query>
	<query key="GET_CUSTOM_OBJECTS">
		SELECT NS.object_id,
		NS.title,
		NS.scope,
		NS.created_by,
		NS.created,
		NS.is_drillable,
		OBJ.name
		FROM named_selections_summ_tbl NS
		INNER JOIN
		folder_obj_map FO
		ON
		NS.object_id = FO.object_id
		LEFT OUTER JOIN (select OCT.NAME, OCM.OBJ_ID from  OBJECT_COLLECTION_MAP OCM, OBJECT_COLLECTION_TBL OCT
		WHERE OCT.COLLECTION_ID = OCM.COLLECTION_ID
		) OBJ ON OBJ.OBJ_ID = NS.object_id
		WHERE NS.cube_id =
		?::integer
		AND
		Lower(NS.dimension_name) = ?
		AND NS.object_type = ?
		AND (
		(
		Lower(created_by) = ? )
		OR ( scope IN (1, 3, 5) )
		OR ( scope = 2
		AND
		NS.object_id IN
		(SELECT object_id FROM obj_user_map WHERE user_id = ?
		UNION
		SELECT object_id
		FROM obj_usergrp_map
		WHERE group_id IN
		(SELECT
		group_id FROM adm_grp_usr_map WHERE user_id = ?)
		)
		))
		AND
		ORG_NAME_EQUALS_CURRENT
		AND (1=0::integer OR NS.object_id IN (SELECT
		object_id
		FROM obj_filter_map_tbl WHERE filter_name LIKE ?))
		AND
		FO.FOLDER_ID IN
		(??)
	</query>
	<!-- <query key="GET_LIBRARY_CUSTOM_OBJECTS">
		SELECT DISTINCT NS.object_id,
		NS.title,
		NS.description,
		NS.cube_id,
		NS.dimension_name,
		NS.object_type,
		NS.scope,
		NS.created_by,
		NS.created::timestamp,'YYYY-DD-MM HH24:MI:SS.MS' created,
		NS.last_upd::timestamp,'YYYY-DD-MM HH24:MI:SS.MS'  last_upd,
		NS.last_upd_by,
		NS.is_static_object,
		NS.is_drillable,
		OFMT.filter_name,
		ft.favourite_id,
		CB.CUBE_NAME,
		CAST(oum.is_editable AS VARCHAR) as iseditableOUMTBL ,
		CAST(ougrpm.is_editable AS VARCHAR) as iseditableOUGRPMTBL,
		TM.TAG_NAME,
		objcolmap.collection_id
		FROM
		named_selections_summ_tbl NS
		INNER JOIN folder_obj_map FO ON NS.object_id = FO.object_id
		INNER JOIN CUBE_TBL CB ON CB.CUBE_ID = NS.cube_id
		LEFT OUTER JOIN obj_filter_map_tbl OFMT on NS.object_id = OFMT.object_id 
		LEFT OUTER JOIN favourites_tbl ft on NS.object_id = ft.object_id AND LOWER(ft.user_id) = ?
		LEFT OUTER JOIN TAG_MASTER TM ON NS.object_id = TM.OBJECT_ID
		LEFT OUTER JOIN (select DISTINCT OBJECT_ID, USER_ID, 'Y' AS IS_EDITABLE from (
                      Select count( IS_EDITABLE ) OVER (PARTITION BY USER_ID, OBJECT_ID) as CNT, OBJECT_ID, USER_ID, IS_EDITABLE 
                      FROM (Select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from obj_user_map 
                            WHERE LOWER(user_id) = LOWER(?))) WHERE CNT > 1
              UNION 
                    select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from (
                      Select count( IS_EDITABLE ) OVER (PARTITION BY USER_ID, OBJECT_ID) as CNT, OBJECT_ID, USER_ID, IS_EDITABLE 
                      FROM (Select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from obj_user_map 
                            WHERE LOWER(user_id) = LOWER(?))) WHERE CNT = 1) oum ON NS.object_id =  oum.object_id
		LEFT OUTER JOIN obj_usergrp_map ougrpm ON NS.object_id =  ougrpm.object_id
	    LEFT OUTER JOIN  object_collection_map objcolmap
		ON NS.object_id      = objcolmap.obj_id
		WHERE NS.object_type        = ?::integer
		AND NS.ORG_NAME_EQUALS_CURRENT
		AND ((Lower(created_by) = ?)
		OR (scope  IN (1, 3, 5))
		OR (scope = 2 and NS.object_id IN
		(SELECT object_id FROM obj_user_map WHERE user_id = ?
		UNION
		SELECT
		object_id
		FROM obj_usergrp_map
		WHERE group_id IN
		(SELECT
		group_id FROM
		adm_grp_usr_map WHERE user_id = ?)
		)
		))
		AND
		FO.FOLDER_ID IN
		(??)
	</query> -->
	<query key="GET_LIBRARY_CUSTOM_OBJECTS">
                                SELECT DISTINCT NS.object_id,
                                NS.title,
                                NS.description,
                                NS.cube_id,
                                NS.dimension_name,
                                NS.object_type,
                                NS.scope,
                                NS.created_by,
                                NS.created::timestamp,'YYYY-DD-MM HH24:MI:SS.MS' created,
                                NS.last_upd::timestamp,'YYYY-DD-MM HH24:MI:SS.MS'  last_upd,
                                NS.last_upd_by,
                                NS.is_static_object,
                                NS.is_drillable,                             
                                OFMT.filter_name,
                                ft.favourite_id,
                                CB.CUBE_NAME,
                                CAST(oum.is_editable AS VARCHAR) as iseditableOUMTBL ,
                                CAST(ougrpm.is_editable AS VARCHAR) as iseditableOUGRPMTBL,
                                TM.TAG_NAME,
                                objcolmap.collection_id
                                FROM
                                named_selections_summ_tbl NS
                                INNER JOIN folder_obj_map FO ON NS.object_id = FO.object_id
                                INNER JOIN CUBE_TBL CB ON CB.CUBE_ID = NS.cube_id
                                LEFT OUTER JOIN obj_filter_map_tbl OFMT on NS.object_id = OFMT.object_id 
                                LEFT OUTER JOIN favourites_tbl ft on NS.object_id = ft.object_id AND LOWER(ft.user_id) = ?
                                LEFT OUTER JOIN TAG_MASTER TM ON NS.object_id = TM.OBJECT_ID
                                LEFT OUTER JOIN (select DISTINCT OBJECT_ID, USER_ID, 'Y' AS IS_EDITABLE from (
                      Select count( IS_EDITABLE ) OVER (PARTITION BY USER_ID, OBJECT_ID) as CNT, OBJECT_ID, USER_ID, IS_EDITABLE 
                      FROM (Select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from obj_user_map 
                            WHERE LOWER(user_id) = LOWER(?))as FOO)as FOO WHERE CNT > 1
              UNION 
                    select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from (
                      Select count( IS_EDITABLE ) OVER (PARTITION BY USER_ID, OBJECT_ID) as CNT, OBJECT_ID, USER_ID, IS_EDITABLE 
                      FROM (Select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from obj_user_map 
                            WHERE LOWER(user_id) = LOWER(?))as FOO)as FOO WHERE CNT = 1) oum  ON NS.object_id =  oum.object_id
                                LEFT OUTER JOIN obj_usergrp_map ougrpm ON NS.object_id =  ougrpm.object_id
                    LEFT OUTER JOIN  object_collection_map objcolmap
                                ON NS.object_id      = objcolmap.obj_id
                                WHERE NS.object_type        = ?::integer
                                AND NS.ORG_NAME_EQUALS_CURRENT
                                AND ((Lower(created_by) = ?)
                                OR (scope  IN (1, 3, 5))
                                OR (scope = 2 and NS.object_id IN
                                (SELECT object_id FROM obj_user_map WHERE user_id = ?
                                UNION
                                SELECT
                                object_id
                                FROM obj_usergrp_map
                                WHERE group_id IN
                                (SELECT
                                group_id FROM
                                adm_grp_usr_map WHERE user_id = ?)
                                )
                                ))
                                AND
                                FO.FOLDER_ID IN
                                (??)
	</query>
	<query key="GET_CUSTOM_OBJECT_INFO">SELECT NS.object_id, NS.title, NS.description, NS.dimension_name, NS.object_type, NS.scope, NS.created_by,
		NS.created::timestamp,'YYYY-DD-MM HH24:MI:SS.MS' created, NS.last_upd::timestamp,'YYYY-DD-MM HH24:MI:SS.MS'  last_upd, NS.cube_id, CB.CUBE_NAME 
		FROM named_selections_summ_tbl NS INNER JOIN CUBE_TBL CB ON CB.CUBE_ID = NS.cube_id WHERE object_id = ?
	</query>
	<query key="SAVE_AS_CUSTOM_OBJECT">INSERT INTO NAMED_SELECTIONS_SUMM_TBL ( OBJECT_ID,
		TITLE, DESCRIPTION, CUBE_ID, DIMENSION_NAME, OBJECT_TYPE, SCOPE,
		CREATED, CREATED_BY, LAST_UPD, LAST_UPD_BY, IS_STATIC_OBJECT,
		IS_DRILLABLE)
		VALUES (?,?,?,?,?,?,?,current_timestamp,?,
		current_timestamp,?,?,?)
	</query>
	
	<query key="GET_TG_OBJECTS_TG3">
		SELECT A_M.AUDIENCE_ID, A_M.AUDIENCE_NAME , A_M.AUDIENCE_DESCRIPTION ,A_M. CREATED_BY , A_M.CREATED_DATE ,A_M. MODIFIED_BY 
		,A_M. MODIFIED_DATE ,A_M. MODEL_ID, A_M.TAGS, A_M.IS_FAVOURITE, A_M.IS_MEDIA_AUDIENCE, TG_A.COUNT_VALUE,'false' AS IS_LEAF 
		FROM TG_AUDIENCE_MASTER A_M left join 
		(select TAM.AUDIENCE_ID, count(TM.TG_DIM_KEY) AS COUNT_VALUE,TM.IS_USABLE from TG_AUDIENCE_MAP TAM, TG_MASTER TM WHERE TM.GROUP_ID=TAM.TG_DIM_KEY 
		GROUP BY TAM.AUDIENCE_ID, TM.IS_USABLE) TG_A on A_M.AUDIENCE_ID = TG_A.AUDIENCE_ID WHERE LOWER(A_M.created_by) = LOWER(?) AND A_M.MODEL_ID=?::integer  AND TG_A.IS_USABLE='Y' OR 
		A_M.AUDIENCE_ID IN (SELECT OBJECT_ID FROM OBJ_USERGRP_MAP WHERE  GROUP_ID IN (??)  AND TG_A.IS_USABLE='Y' UNION 
		SELECT OBJECT_ID FROM OBJ_USER_MAP WHERE  LOWER(USER_ID)= LOWER(?) AND TG_A.IS_USABLE='Y') AND A_M.MODEL_ID=?::integer 
		UNION SELECT TG_DIM_KEY AS AUDIENCE_ID, TG_NAME AS AUDIENCE_NAME,TG_DSC AS AUDIENCE_DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,
		MODIFIED_DATE,MODEL_ID,TAGS,null AS IS_FAVOURITE,'false',1,'true' AS IS_LEAF FROM TG_MASTER WHERE LOWER(CREATED_BY) = LOWER(?) AND MODEL_ID=?::integer 
		AND TG_TYPE=?::integer  AND (ORG_NAME_EQUALS_CURRENT OR LOWER(ORG_NAME) = 'default') AND IS_DRAFT IS NULL AND IS_USABLE='Y'  
		AND TG_DIM_KEY NOT IN (SELECT TG_DIM_KEY FROM TG_AUDIENCE_MAP WHERE TG_DIM_KEY IS NOT NULL)
	</query>
	<query key="GET_TG_OBJECTS_TG1">
		SELECT TG_DIM_KEY AS AUDIENCE_ID, TG_NAME AS AUDIENCE_NAME,TG_DSC AS AUDIENCE_DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,
		MODIFIED_DATE,MODEL_ID,TAGS,null AS IS_FAVOURITE,'false',1 AS COUNT_VALUE,'true' AS IS_LEAF FROM TG_MASTER WHERE LOWER(CREATED_BY) = LOWER(?) 
		AND MODEL_ID=? AND TG_TYPE=?  AND (ORG_NAME_EQUALS_CURRENT OR LOWER(ORG_NAME) = 'default') AND IS_DRAFT IS NULL AND IS_USABLE='Y'  
		AND TG_DIM_KEY NOT IN (SELECT TG_DIM_KEY FROM TG_AUDIENCE_MAP WHERE TG_DIM_KEY IS NOT NULL)
	</query>

	<query key="GET_TEXT_PANE_DATA">SELECT VARMT.ALIAS_ID, VARMT.REPORT_ID,
		VARMT.ALIAS_VALUE, SRM.TEXT_PANE_DATA, VARMT.CREATED, VARMT.CREATED_BY
		FROM STORY_REPORT_MAP SRM, VIS_ALIAS_RPT_MAP_TBL VARMT WHERE REPORT_ID
		= ? and STORY_REPORT_ID = ? AND ALIASED_COMPONENT_ID = 6
	</query>
	<query key="GET_CUSTOM_THUMBNAIL_PATH">SELECT CMN.OBJECT_ID, CHART.THUMBNAIL_PATH FROM
		CMN_SEARCH_TBL CMN, VIS_CHART_MAPPING_TBL CHART WHERE CMN.TYPE =
		'Custom Thumbnail Type' AND CAST(CHART.CHART_MAPPING_ID as VARCHAR) =
		CMN.KEYWORD AND
		CMN.OBJECT_ID IN (??)
	</query>
	<query key="GET_REPORT_LAYOUT">SELECT REPORT.REPORT_ID, DETAIL.VAL FROM WSP_PAGE_TBL
		PAGE, WSP_PANE_TBL PANE, CMN_REPORT_TBL REPORT , CMN_REPORT_DETAIL_TBL
		DETAIL WHERE PAGE.PAGE_ID = PANE.PAGE_ID AND PANE.OBJECT_ID =
		REPORT.REPORT_ID AND PAGE.WSP_ID = ? AND REPORT.REPORT_ID =
		DETAIL.REPORT_ID AND DETAIL.DIMENSION_NAME='Measures'
	</query>
	<query key="IS_STORY_ACCESS">SELECT STORY_ID FROM STORY_REPORT_MAP WHERE STORY_ID
		IN (SELECT DISTINCT A.STORY_ID FROM VIS_STORY_GRP_MAP_TBL A WHERE
		A.GROUP_ID IN ((SELECT CAST(GROUP_ID AS varchar) FROM ADM_GRP_USR_MAP WHERE USER_ID = ?
		)) AND ORG_NAME_EQUALS_CURRENT UNION ALL SELECT DISTINCT
		B.STORY_ID
		FROM VIS_STORY_USER_MAP_TBL B WHERE USER_ID = ? AND
		ORG_NAME_EQUALS_CURRENT UNION SELECT STORY_ID FROM STORY_TBL WHERE
		CREATED_BY = ? AND ORG_NAME_EQUALS_CURRENT) AND STORY_ID = ?
	</query>
	<query key="SELECT_CUBES_HISTORY">SELECT CUBE_LIST FROM CUBE_HISTORY_TBL WHERE
		LOWER(USER_ID) = ?
	</query>
	<query key="UPDATE_CUBES_HISTORY">UPDATE CUBE_HISTORY_TBL SET CUBE_LIST=? WHERE
		LOWER(USER_ID)=?
	</query>
	<query key="INSERT_CUBES_HISTORY">INSERT INTO CUBE_HISTORY_TBL(USER_ID,CUBE_LIST)
		VALUES(?,?)
	</query>
	<query key="GET_CUBES_FOR_USER_MT">SELECT DISTINCT CUBE.CUBE_ID,
		CUBE.CUBE_NAME,
		CUBE.DATASRC_NAME,
		CUBE.DESCRIPTION,
		CUGM.IS_ADHOC_ACCESS,
		CUGM.IS_EOD_ACCESS,
		VDI.LAST_UPD,
		VDI.LAST_UPD_BY,
		(CASE
		WHEN MCOUNT > 0
		THEN 'TRUE'
		ELSE 'FALSE'
		END ) as ISCONFIGURED
		FROM ADM_GRP_USR_MAP GUM,
		ADM_ORG_GRP_MAP AOG,
		CUBE_USER_GRP_MAP CUGM,
		CUBE_TBL CUBE left outer
		join (Select DISTINCT
		Model_ID, MAX(LAST_UPD) OVER(PARTITION BY
		Model_ID) AS
		LAST_UPD,LAST_UPD_BY, COUNT(Model_ID) OVER(PARTITION BY
		Model_ID) AS
		MCOUNT FROM VIS_DIMENSION_INFO) VDI ON CUBE.CUBE_ID =
		VDI.MODEL_ID,
		CUBE_LIST_MAP M ,
		CUBE_LIST_TBL L
		WHERE AOG.GROUP_ID =
		GUM.GROUP_ID
		AND
		CUGM.GROUP_ID = GUM.GROUP_ID
		AND
		CUGM.GROUP_ID =
		AOG.GROUP_ID
		AND
		CUBE.CUBE_ID = CUGM.CUBE_ID
		AND
		CUBE.CUBE_ID = M.CUBE_ID
		AND M.LIST_ID =
		L.LIST_ID
		AND
		LOWER(AOG.ORG_NAME) = ?
		AND
		LOWER(GUM.USER_ID) = ?
		AND
		CUBE.CUBE_ID IN
		(SELECT CUBE_ID
		FROM
		CUBE_USER_GRP_MAP iCUGM,
		group_master iGM
		WHERE
		iCUGM.GROUP_ID =
		iGM.GROUP_ID
		AND
		LOWER(iGM.GROUP_NAME) IN (??)
		)
	</query>

	<query key="GET_CUBES_FOR_USER">SELECT DISTINCT CUBE.CUBE_ID,
		CUBE.CUBE_NAME,
		 CUBE.DATASRC_NAME,
		CUBE.DESCRIPTION,
		CUGM.IS_ADHOC_ACCESS,
		CUGM.IS_EOD_ACCESS,
		VDI.LAST_UPD,
		VDI.LAST_UPD_BY,
		(CASE
		WHEN MCOUNT > 0
		THEN 'TRUE'
		ELSE 'FALSE'
		END ) as ISCONFIGURED
		FROM ADM_GRP_USR_MAP GUM,
		ADM_ORG_GRP_MAP AOG,
		group_master GM,
		CUBE_USER_GRP_MAP CUGM,
		CUBE_TBL
		CUBE left outer join
		(Select Model_ID, LAST_UPD,LAST_UPD_BY,
		COUNT(Model_ID) OVER(PARTITION
		BY Model_ID) AS MCOUNT FROM
		VIS_DIMENSION_INFO) VDI ON CUBE.CUBE_ID =
		VDI.MODEL_ID ,
		CUBE_LIST_MAP M
		,
		CUBE_LIST_TBL L
		WHERE AOG.GROUP_ID =
		GUM.GROUP_ID
		AND AOG.GROUP_ID =
		GM.GROUP_ID
		AND GUM.GROUP_ID =
		GM.GROUP_ID
		AND CUGM.GROUP_ID =
		GM.GROUP_ID
		AND CUGM.GROUP_ID =
		GUM.GROUP_ID
		AND CUGM.GROUP_ID =
		AOG.GROUP_ID
		AND CUBE.CUBE_ID =
		CUGM.CUBE_ID
		AND CUBE.CUBE_ID =
		M.CUBE_ID
		AND M.LIST_ID = L.LIST_ID
		AND
		LOWER(GUM.USER_ID) = ?
	</query>

	<query key="GET_DESK_LIST_FROM_CUBE">
		SELECT DSK.DESK_ID
		FROM VIS_DESK DSK left outer join
		VIS_DESK_STORY_MAP DSMAP on
		DSMAP.DESK_ID = DSK.DESK_ID left outer join
		STORY_TBL STY on
		STY.STORY_ID = DSMAP.STORY_ID left outer join
		STORY_REPORT_MAP SRMAP on
		SRMAP.STORY_ID = STY.STORY_ID

		WHERE
		WORKSPACE_ID IN
		(SELECT OBJECT_ID
		FROM
		(SELECT KEYWORD,OBJECT_ID FROM
		CMN_SEARCH_TBL WHERE TYPE = 'AS Model Name'
		) CMN,
		CUBE_TBL CUBE
		WHERE
		LOWER(CUBE.DATASRC_NAME) = LOWER(CMN.KEYWORD)
		AND
		LOWER(CUBE.DATASRC_NAME) = LOWER(?)
		)
	</query>

	<query key="GET_REPORT_IDS_FROM_WSP_ID">
		Select CRT.REPORT_ID FROM
		WSP_SUMM_TBL WSP,
		WSP_PAGE_TBL PAGE,
		WSP_PANE_TBL PANE,
		CMN_REPORT_TBL CRT
		WHERE WSP.WSP_ID
		= PAGE.WSP_ID
		AND PAGE.PAGE_ID = PANE.PAGE_ID
		AND PANE.OBJECT_ID =
		CRT.REPORT_ID
		AND WSP.WSP_ID = ?
	</query>

	<!-- Unify Office -->
	<query key="GET_VERSION_END_DATE">Select APP_NAME, END_DATE FROM APP_VERSION_TBL WHERE
		UPPER(APP_NAME)=UPPER(?) AND VERSION=? AND ORG_NAME_EQUALS_CURRENT
	</query>
	<query key="INSERT_VERSION_LOG">INSERT INTO AE_LOG
		(LOG_ID,APPLICATION_ID,VERSION,USER_ID,CLIENT_IP,HOST_IP,BROWSER_INFO,LOG_DATE_TIME,ENVIRONMENT_NAME,ADDITIONAL_DETAILS,
		STACK_TRACE, URL) VALUES (?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?,
		?, ?, ?)
	</query>
	<query key="UPDATE_EMAIL_NOTIFICATION_OPTION">Update USR_PREF_TBL set OPT_OUT_EMAIL = ? where
		USER_ID = ?
	</query>
	<query key="GET_EMAIL_NOTIFICATION_OPTION">Select OPT_OUT_EMAIL from USR_PREF_TBL where USER_ID =
		?
	</query>
	<query key="GET_OPT_OUT_USER_EMAIL_NOTIFICATION">
		Select OPT_OUT_EMAIL,USER_ID from USR_PREF_TBL where
		USER_ID IN (??)
	</query>
	<query key="GET_WSP_TITLE_DESC"> Select wsp_title, wsp_description from wsp_summ_tbl
		where wsp_id = ?
	</query>
	<query key="GET_WORKSPACES_TITLE_DESC">
		Select wsp_title, wsp_description,wsp_id from
		wsp_summ_tbl where wsp_id
		in(??)
	</query>
	<query key="SQL_CHECK_FOR_DEF_FOLDER"> SELECT FOLDER_ID FROM FOLDER_MASTER WHERE NAME= ? AND
		SCOPE=?::integer AND CREATED_BY=? AND PARENT_ID=?:numeric AND
		DEFAULT_FOLDER_STATUS=?::integer
		AND ORG_NAME IS NULL
	</query>
	<query key="SQL_CHECK_FOR_DEF_FOLDER_MT"> SELECT FOLDER_ID FROM FOLDER_MASTER WHERE NAME= ? AND
		SCOPE=?::integer AND CREATED_BY=? AND PARENT_ID=?::numeric AND
		DEFAULT_FOLDER_STATUS=?::numeric
		AND LOWER(ORG_NAME) = ?
	</query>

	<!-- Admin Tool -->
	<query key="GET_GUIDED_STORY_LIST">SELECT
		GUIDED_STORY_ID,GUIDED_STORY_TITLE,PUBLISHED,TO_CHAR(CREATED,'dd-Mon-yyyy')CREATED,LAST_UPDATED_BY
		FROM GUIDED_STORY_TBL WHERE CREATED_BY = ? AND ORG_NAME_EQUALS_CURRENT
		ORDER BY GUIDED_STORY_ID DESC
	</query>
	<query key="GET_EXTERNAL_IMAGE_PATH">SELECT IMG_PATH FROM OBJECT_IMG_MAP_TBL WHERE
		OBJECT_ID = ?
	</query>
	<query key="GET_CONFIG_REPORT_LIST">Select s.object_id,s.keyword,s.type,s.last_upd as
		config_last_upd,s.last_upd_by as
		config_last_upd_by,ws.reportID,ws.wsptitle as wsptitle, (select
		cubetbl.datasrc_name as MODEL_NAME from cmn_report_tbl report inner
		join cube_tbl cubeTbl on cubeTbl.cube_id = report.cube_id where
		report.report_id = ws.reportID) as CubeModelName, (select
		FOLDER_OBJ_MAP.FOLDER_ID as FOLDERID from FOLDER_OBJ_MAP where
		FOLDER_OBJ_MAP.OBJECT_ID = s.object_id) as FOLDERID, ws.TemplateID,
		(select OBJECT_IMG_MAP_TBL.IMG_PATH as IMGPATH from OBJECT_IMG_MAP_TBL
		where OBJECT_IMG_MAP_TBL.OBJECT_ID = cast(ws.wsID as character)) as
		IMGPATH,
		ws.PaneID, to_char(ws.last_upd, 'mm/dd/yy hh24:mi:ss')
		LAST_UPD, (case
		when ws.Last_upd_by is null then
		ws.created_by else
		ws.Last_upd_by end) as LAST_UPD_BY, ws.scope from
		cmn_search_tbl s
		inner join (SELECT wsp.WSP_ID as wsID,wsp.wsp_title as
		wsptitle,
		wsp.WSP_TYPE, page.page_id as TemplateID, pane.pane_id as
		PaneID,
		wsp.CREATED_BY, wsp.last_upd, wsp.last_upd_by, wsp.scope,
		pane.Object_ID AS reportID FROM WSP_SUMM_TBL wsp INNER JOIN
		WSP_PAGE_TBL page ON wsp.WSP_ID = page.WSP_ID and wsp.wsp_type = 4
		INNER JOIN wsp_pane_tbl pane ON page.page_id = pane.page_id and
		pane.object_type = 0 INNER JOIN (SELECT DISTINCT object_id FROM
		cmn_search_tbl WHERE Type='Object Type' AND Keyword = 'Report' ) srch
		ON wsp.WSP_ID = srch.object_id inner join (SELECT WSP_ID FROM
		WSP_SUMM_TBL WST INNER JOIN FOLDER_OBJ_MAP FOM ON WST.WSP_ID =
		FOM.OBJECT_ID
		WHERE ( SCOPE=1 OR SCOPE=3 OR LOWER(CREATED_BY) = ? OR
		(SCOPE = 2 AND
		WSP_ID IN (SELECT WST.WSP_ID FROM
		WSP_SUMM_TBL WST,
		OBJ_USERGRP_MAP OGM, ADM_GRP_USR_MAP GUM WHERE
		WST.WSP_ID =
		OGM.OBJECT_ID AND OGM.GROUP_ID = GUM.GROUP_ID AND LOWER
		(GUM.USER_ID) =
		?
		AND SCOPE = 2 UNION SELECT WST.WSP_ID FROM WSP_SUMM_TBL WST,
		OBJ_USER_MAP
		OUM
		WHERE WST.WSP_ID = OUM.OBJECT_ID AND LOWER(OUM.USER_ID)
		= ?
		AND SCOPE = 2 ) ) ) AND (FOM.FOLDER_ID IN ( ??::integer ) ))
		folder ON
		wsp.WSP_ID = folder.WSP_ID
		Where pane.object_id is not null) ws on
		ws.wsID = s.object_id where
		s.Type in('Object Type','Business
		Issues','IsConfigured',
		'IsPartOfGuidedStory',
		'IsDisplayInReportListing',
		'LastPublishedDate')
	</query>
	<query key="GET_EDIT_PAGE_CONFIG_LIST">SELECT GROUP_NAME, LABEL_TEXT, CONTROL_TYPE,
		REPORT_EXT_TABLE_KEY, FIELD_ORDER, VALUE_TEXT, DEFAULT_VALUE,
		INFO_TEXT FROM VIS_ADMIN_TOOL_CONFIG_FIELDS where GROUP_NAME =?
	</query>
	<query key="DELETE_OBJECT_FAVOURITES">DELETE FROM FAVOURITES_TBL WHERE OBJECT_ID = ? AND
		USER_ID = ?
	</query>
	<!-- Removed due to duplicate
	<query key="IS_CUSTOM_OBJECT_OWNER">SELECT OBJECT_ID FROM NAMED_SELECTIONS_SUMM_TBL WHERE
		OBJECT_ID = ? AND CREATED_BY = ?
	</query> -->
	<query key="GET_PUBLISHED_REPORT_PARAMETERS">SELECT KEYWORD, TYPE FROM CMN_SEARCH_TBL WHERE
		OBJECT_ID = ? AND TYPE IN
		('IsConfigured','IsDisplayInReportListing','isDisplayInLibrary','LastPublishedDate')
	</query>
	<!-- admin tool save operation queries -->
	<query key="DELETE_REPORT_CONFIGS_IN_CMN_SEARCH_TBL">DELETE FROM CMN_SEARCH_TBL WHERE OBJECT_ID=? AND
		TYPE=?
	</query>
	<query key="INSERT_REPORT_CONFIGS_IN_CMN_SEARCH_TBL">INSERT INTO CMN_SEARCH_TBL (OBJECT_ID, KEYWORD, TYPE,
		CREATED_BY, CREATED, LAST_UPD_BY, LAST_UPD) VALUES (?, ?, ?, ?,
		CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP)
	</query>
	<query key="DELETE_IMAGE_PATH">DELETE FROM OBJECT_IMG_MAP_TBL WHERE OBJECT_ID=?
	</query>
	<query key="INSERT_IMAGE_PATH">INSERT INTO
		OBJECT_IMG_MAP_TBL(OBJECT_ID,IMG_PATH,CREATED_BY,CREATED,LAST_UPD_BY,
		LAST_UPD) VALUES (?,?,?,CURRENT_TIMESTAMP,?,CURRENT_TIMESTAMP)
	</query>
	<query key="INSERT_DASHBOARD_MAPPING">INSERT INTO STORY_REPORT_MAP (TYPE, RPT_INDEX,
		STORY_REPORT_ID, WORKSPACE_ID, NOTES, STORY_ID, VIS_REPORT_PROPERTY) VALUES (?,?,?,?,?,?,?)
	</query>
	<query key="DELETE_DASHBOARD_MAPPING">DELETE FROM STORY_REPORT_MAP WHERE STORY_ID = ? AND
		TYPE =?
	</query>
	<query key="INSERT_DASHBOARD_PAGE_DTL">INSERT INTO DASHBOARD_PAGE_TBL (REPORT_LINKS,
		GLOBAL_LINKS, LAYOUT_DETAIL, STORY_ID,METADATA) VALUES (?,?,?,?,?)
	</query>
	<query key="DELETE_DASHBOARD_PAGE_DTL">DELETE FROM DASHBOARD_PAGE_TBL WHERE STORY_ID = ?
	</query>
	<query key="GET_DASHBOARD_PAGE_DTL">SELECT REPORT_LINKS, GLOBAL_LINKS, LAYOUT_DETAIL,METADATA FROM
		DASHBOARD_PAGE_TBL WHERE STORY_ID = ?
	</query>
	<query key="GET_DASHBOARD_REPORT_LINKS">SELECT REPORT_LINKS FROM DASHBOARD_PAGE_TBL WHERE STORY_ID = ?</query>
	<query key="GET_DASHBOARD_IDS_FOR_STORY">SELECT WORKSPACE_ID FROM STORY_REPORT_MAP WHERE TYPE=
		'dashboard' AND STORY_ID = ?
	</query>
	<query key="GET_REPORTS_BY_STORY_ID">SELECT TYPE,SELECTIONS,
		WORKSPACE_ID,STORY_REPORT_ID,LAST_UPDATED,cast(RPT_INDEX as numeric)
		as POSITION,NOTES,TEXT_PANE_DATA,VIS_REPORT_PROPERTY FROM
		STORY_REPORT_MAP WHERE STORY_ID IN (??) ORDER BY POSITION
	</query>

	<query key="GET_CUBE_ID_FROM_CUBE_NAME">SELECT CUBE_ID FROM CUBE_TBL WHERE CUBE_NAME = ?
	</query>
		<query key="UPDATE_CUBES">UPDATE CUBE_TBL SET CUBE_NAME = ?, ENVIRONMENT = ?, CUBE_DEFINITION = ?, DESCRIPTION = ?, DATASRC_NAME = ?, HOST_NAME = ?, PORT_NO = ?,  OLAP_PROVIDER = ?, SCN_DIMENSION=?, LAST_UPD = CURRENT_TIMESTAMP , LAST_UPD_BY = ?, WRITEBACK_DIMENSION = ?, ACTIVE_DIMENSION = ? WHERE CUBE_ID = ? 
	</query>

	<!-- QIRI Analysis Management -->
	<query key="INSERT_QIRI_DATA">INSERT INTO VIS_QIRI_DATA (QIRI_ID, WSP_ID,
		QIRI_JOB_STATUS, SECURITY_ID, SELECTIONS, CREATED_BY, CREATED,
		TECHNIQUE_NAME) VALUES(?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?)
	</query>
	<query key="INSERT_QIRI_ANALYSIS">INSERT INTO VIS_QIRI_ANALYSIS (ANALYSIS_ID,
		ANALYSIS_TITLE, CREATED_BY, CREATED,STATUS) VALUES(?, ?, ?,
		CURRENT_TIMESTAMP,? )
	</query>
	<query key="INSERT_ANALYIS_QIRI_MAPPING">INSERT INTO VIS_QIRI_ANALYSIS_DATA_MAP
		(ANALYSIS_ID,QIRI_ID) VALUES (?,?)
	</query>
	<query key="GET_QIRI_ANALYSIS_BY_WSPID">
		SELECT QIRIANALYSIS.ANALYSIS_ID, ANALYSIS_TITLE,
		QDATA.QIRI_JOB_STATUS,
		QIRIANALYSIS.CREATED_BY, QIRIANALYSIS.CREATED,
		QDATA.TECHNIQUE_NAME
		FROM VIS_QIRI_ANALYSIS QIRIANALYSIS,
		VIS_QIRI_ANALYSIS_DATA_MAP
		USERMAP, VIS_QIRI_DATA QDATA
		WHERE
		QDATA.WSP_ID = ? AND QIRIANALYSIS.ANALYSIS_ID = USERMAP.ANALYSIS_ID
		AND USERMAP.QIRI_ID=QDATA.QIRI_ID AND QIRIANALYSIS.CREATED_BY=? ORDER
		BY QIRIANALYSIS.CREATED DESC
	</query>
	<query key="UPDATE_QIRI_ANALYSIS_REQUEST">UPDATE VIS_QIRI_ANALYSIS SET QIRI_REQUEST = ? WHERE
		QIRI_ID = ?
	</query>
	<query key="UPDATE_QIRI_ANALYSIS_RESPONSE">UPDATE VIS_QIRI_ANALYSIS SET QIRI_RESPONSE = ?,
		QIRI_JOB_STATUS = ? WHERE QIRI_ID = ?
	</query>
	<query key="UPDATE_QIRI_ANALYSIS_STATUS">UPDATE VIS_QIRI_ANALYSIS SET STATUS = ? WHERE
		ANALYSIS_ID =?
	</query>
	<query key="DELETE_QIRI_ANALYSIS">DELETE FROM VIS_QIRI_ANALYSIS WHERE QIRI_ID = ?
	</query>
	<query key="DELETE_QIRI_ANALYSIS_USER_MAP">DELETE FROM VIS_QIRI_ANALYSIS_USER_MAP WHERE QIRI_ID =
		? AND CREATED_BY = ?
	</query>
	<query key="GET_QIRI_ANALYSIS">
		SELECT QDATA.WSP_ID,QIRIANALYSIS.ANALYSIS_ID
		,QIRIANALYSIS.ANALYSIS_TITLE ,
		QIRIANALYSIS.CREATED_BY,QIRIANALYSIS.STATUS,QDATA.QIRI_JOB_STATUS,
		QIRIANALYSIS.CREATED, QDATA.TECHNIQUE_NAME, QDATA.QIRI_RESPONSE FROM
		VIS_QIRI_ANALYSIS QIRIANALYSIS, VIS_QIRI_ANALYSIS_DATA_MAP
		USERMAP,VIS_QIRI_DATA QDATA
		WHERE QIRIANALYSIS.ANALYSIS_ID =
		USERMAP.ANALYSIS_ID AND USERMAP.QIRI_ID =
		QDATA.QIRI_ID AND
		QIRIANALYSIS.ANALYSIS_ID=?
	</query>
	<query key="GET_QIRI_ANALYSIS_USER_MAP">SELECT * FROM VIS_QIRI_ANALYSIS_USER_MAP WHERE QIRI_ID
		= ? AND CREATED_BY = ?
	</query>
	<query key="QIRI_LOCK_ANALYSIS_TABLE">LOCK TABLE VIS_QIRI_DATA IN SHARE MODE</query>
	<query key="QIRI_UPDATE_JOB_REQUEST_BY_QIRI_ID">UPDATE VIS_QIRI_DATA SET QIRI_JOB_ID = ?,
		QIRI_JOB_STATUS = ?, QIRI_REQUEST = ? WHERE QIRI_ID = ?
	</query>
	<query key="QIRI_UPDATE_JOB_RESPONSE_BY_QIRI_ID">UPDATE VIS_QIRI_DATA SET QIRI_RESPONSE = ?,
		QIRI_JOB_STATUS = ? WHERE QIRI_ID = ?
	</query>
	<query key="QIRI_UPDATE_JOB_RESPONSE_BY_JOB_ID">UPDATE VIS_QIRI_DATA SET QIRI_RESPONSE = ?,
		QIRI_JOB_STATUS = ? WHERE QIRI_JOB_ID = ?
	</query>
	<query key="QIRI_UPDATE_ORPHAN_JOBS">UPDATE VIS_QIRI_DATA SET QIRI_JOB_STATUS = 'ORPHANED'
		WHERE EXTRACT(DAY FROM (current_timestamp - CREATED)) > 5 AND
		QIRI_JOB_STATUS IN ('RUNNING')
	</query>

	<!-- New Notification services queries -->
	<query key="INSERT_NEW_NOTIFICATION">INSERT INTO VIS_NOTIFICATION_TBL (NOTIFICATION_ID,OBJECT_ID,TYPE_ID,ORG_NAME,PRIORITY,APPLICATION_NAME,CREATED_BY,START_DATE,END_DATE,TOKEN_DETAILS, CREATED) VALUES (?,?,?,?,?,?,?,?,?,?,?)</query>
	<query key="UPDATE_NOTIFICATION_PRIORITY">UPDATE VIS_NOTIFICATION_TBL SET PRIORITY = ? WHERE NOTIFICATION_ID = ?</query>
	<query key="UPDATE_NOTIFICATION">UPDATE VIS_NOTIFICATION_TBL SET START_DATE = ?,END_DATE = ? WHERE NOTIFICATION_ID = ?</query>
	<query key="DELETE_NOTIFICATION">DELETE FROM VIS_NOTIFICATION_TBL WHERE NOTIFICATION_ID = ?</query>
	<query key="GET_NOTIFICATION_ID_BY_OBJECT">SELECT NOTIFICATION_ID FROM VIS_NOTIFICATION_TBL WHERE OBJECT_ID =? AND TYPE_ID = ?</query>
	<query key="DELETE_NOTIFICATION_FOR_ALL_USERS">DELETE FROM VIS_NOTIFICATION_USER_TBL WHERE NOTIFICATION_ID = ?</query>
	<query key="INSERT_NEW_NOTIFICATION_AGAINST_USER">INSERT INTO VIS_NOTIFICATION_USER_TBL (NOTIFICATION_ID,USER_ID,IS_READ,IS_DELETED,LAST_UPD) VALUES (?,?,?,CAST(? AS SMALLINT),current_date)</query>
	<query key="UPDATE_NOTIFICATION_IS_READ_OR_UNREAD">UPDATE VIS_NOTIFICATION_USER_TBL SET IS_READ = ?,LAST_UPD = current_date WHERE NOTIFICATION_ID IN (??) AND lower(USER_ID) = lower(?)</query>
	<query key="DELETE_NOTIFICATION_BY_USER">UPDATE VIS_NOTIFICATION_USER_TBL SET IS_DELETED = 1,LAST_UPD = current_date WHERE NOTIFICATION_ID IN (??) AND lower(USER_ID) = lower(?)</query>
	<query key="GET_NOTIFICATION_SEQ">SELECT NEXTVAL('NOTIFICATION_ID_SEQ')</query>
	<query key="GET_NOTIFICATION_TYPE_DETAILS_BY_ID">SELECT TYPE_ID,NAME,CSS,ACTION_NAME,ACTION_VALUE,PRIORITY FROM VIS_NOTIFICATION_TYPES_TBL WHERE TYPE_ID = ?</query>
	<query key="GET_NOTIFICATION_TYPE_DETAILS_BY_NAME">SELECT TYPE_ID,NAME,CSS,ACTION_NAME,ACTION_VALUE,PRIORITY FROM VIS_NOTIFICATION_TYPES_TBL WHERE lower(NAME) = lower(?)</query>
	
	<query key="GET_MESSAGE_SEQ">SELECT NEXTVAL('VIS_MESSAGE_ID_SEQ')</query>
	<query key="INSERT_NEW_MESSAGE">INSERT INTO VIS_MESSAGE_TBL(MESSAGE_ID,SUBJECT,MESSAGE_BODY,CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ORG_NAME,NOTIFY_BY,APPLICATION_NAME) VALUES (?,?,?,current_date,?,current_date,?,?,?,?)</query>
	<query key="UPDATE_MESSAGE">UPDATE VIS_MESSAGE_TBL SET SUBJECT = ?,MESSAGE_BODY = ?,LAST_UPD = current_date,LAST_UPD_BY = ?,NOTIFY_BY = ? WHERE MESSAGE_ID = ? AND lower(CREATED_BY) = lower(?)</query>
	<query key="DELETE_MESSAGE">DELETE FROM VIS_MESSAGE_TBL WHERE MESSAGE_ID = ? AND lower(CREATED_BY) = lower(?)</query>
	<query key="INSERT_MESSAGE_GRP_SHARE_INFO">INSERT INTO VIS_MESSAGE_GRP_MAP (MESSAGE_ID,GROUP_ID,LAST_UPD,LAST_UPD_BY) VALUES (?,?,current_date,?)</query>
	<query key="INSERT_MESSAGE_USR_SHARE_INFO">INSERT INTO VIS_MESSAGE_USR_MAP (MESSAGE_ID,USER_ID,LAST_UPD,LAST_UPD_BY) VALUES (?,?,current_date,?)</query>
	<query key="DELETE_MESSAGE_GRP_SHARE_INFO">DELETE FROM VIS_MESSAGE_GRP_MAP WHERE MESSAGE_ID = ? </query>
	<query key="DELETE_MESSAGE_USR_SHARE_INFO">DELETE FROM VIS_MESSAGE_USR_MAP WHERE MESSAGE_ID = ?</query>
	<query key="LOAD_MESSAGE">SELECT MSG.MESSAGE_ID,
									  MSG.SUBJECT,
									  MSG.MESSAGE_BODY,
									  MSG.LAST_UPD,
									  MSG.LAST_UPD_BY,
									  VNT.START_DATE,
									  VNT.END_DATE,
									  MSG.ORG_NAME,
									  MSG.NOTIFY_BY,
									  MSG.APPLICATION_NAME,
									  USR.USER_ID    AS SHARED_USER_ID,
									  GRP.GROUP_ID   AS SHARED_GROUP_ID,
									  GRP.GROUP_NAME AS SHARED_GROUP_NAME
									FROM VIS_MESSAGE_TBL MSG,
									
									  LEFT OUTER JOIN VIS_MESSAGE_USR_MAP USR ON MSG.MESSAGE_ID = USR.MESSAGE_ID
									  LEFT OUTER JOIN VIS_NOTIFICATION_TBL VNT ON MSG.MESSAGE_ID = VNT.OBJECT_ID
									  LEFT OUTER JOIN (SELECT GM.GROUP_NAME,
									    GM.GROUP_ID,
									    M_GRP.MESSAGE_ID
									  FROM VIS_MESSAGE_GRP_MAP M_GRP,
									    GROUP_MASTER GM
									  WHERE GM.GROUP_ID = M_GRP.GROUP_ID
									  ) GRP ON MSG.MESSAGE_ID   = GRP.MESSAGE_ID
									WHERE MSG.MESSAGE_ID   = ?
	</query>
	<query key="GET_COMPLETE_CUBE_DETAILS_MT">
		 					SELECT DISTINCT CUBE.CUBE_ID,
										  CUBE.CUBE_NAME,
										  CUBE.DESCRIPTION,
										  CUBE.DATASRC_NAME,
										  CUBE.HOST_NAME,
										  CUBE.PORT_NO,
										  CUGM.IS_ADHOC_ACCESS,
										  VDI.LAST_UPD,
										  VDI.LAST_UPD_BY,
										  (CASE 
										     WHEN MCOUNT > 0 THEN 'TRUE'
										     ELSE 'FALSE' 
										     END ) as ISCONFIGURED
										FROM ADM_GRP_USR_MAP GUM,
										  ADM_ORG_GRP_MAP AOG,
										  CUBE_USER_GRP_MAP CUGM,
										   CUBE_LIST_TBL L,
										  CUBE_LIST_MAP M ,
										  CUBE_TBL CUBE LEFT OUTER JOIN 
										  (Select Model_ID, LAST_UPD,LAST_UPD_BY, COUNT(Model_ID) OVER(PARTITION BY Model_ID) AS MCOUNT FROM VIS_DIMENSION_INFO) VDI
										  ON CUBE.CUBE_ID = VDI.MODEL_ID
										WHERE AOG.GROUP_ID      = GUM.GROUP_ID
										AND CUGM.GROUP_ID       = GUM.GROUP_ID
										AND CUGM.GROUP_ID       = AOG.GROUP_ID
										AND CUBE.CUBE_ID        = CUGM.CUBE_ID
										AND CUBE.CUBE_ID        = M.CUBE_ID
										AND M.LIST_ID           = L.LIST_ID
										AND LOWER(AOG.ORG_NAME) = ?
										AND LOWER(GUM.USER_ID)  = ?
										AND CUBE.CUBE_ID  =  ?
		
	</query>
	
		<query key="GET_COMPLETE_CUBE_DETAILS">
							SELECT DISTINCT CUBE.CUBE_ID,
										  CUBE.CUBE_NAME,
										  CUBE.DESCRIPTION,
										  CUBE.DATASRC_NAME,
										  CUBE.HOST_NAME,
										  CUBE.PORT_NO,
										  CUGM.IS_ADHOC_ACCESS,
										  VDI.LAST_UPD,
										  VDI.LAST_UPD_BY,
										  (CASE 
										     WHEN MCOUNT > 0 THEN 'TRUE'
										     ELSE 'FALSE' 
										     END ) as ISCONFIGURED
										FROM ADM_GRP_USR_MAP GUM,
										  ADM_ORG_GRP_MAP AOG,
										  group_master GM,
										  CUBE_USER_GRP_MAP CUGM,
										   CUBE_LIST_TBL L,
										  CUBE_LIST_MAP M ,  CUBE_TBL CUBE LEFT OUTER JOIN 
										  (Select Model_ID, LAST_UPD,LAST_UPD_BY, COUNT(Model_ID) OVER(PARTITION BY Model_ID) AS MCOUNT FROM VIS_DIMENSION_INFO) VDI
										  ON AND CUBE.CUBE_ID = VDI.MODEL_ID
										WHERE AOG.GROUP_ID      = GUM.GROUP_ID
										AND AOG.GROUP_ID        = GM.GROUP_ID
										AND GUM.GROUP_ID        = GM.GROUP_ID
										AND CUGM.GROUP_ID       = GM.GROUP_ID
										AND CUGM.GROUP_ID       = GUM.GROUP_ID
										AND CUGM.GROUP_ID       = AOG.GROUP_ID
										AND CUBE.CUBE_ID        = CUGM.CUBE_ID
										AND CUBE.CUBE_ID 	    = M.CUBE_ID
                    					AND M.LIST_ID 	        = L.LIST_ID
										AND LOWER(GUM.USER_ID)  = ?
                  						AND  CUBE.CUBE_ID = ?
	</query>
	
	<query key="LOAD_MESSAGE_BASIC">SELECT MSG.MESSAGE_ID,
									  MSG.SUBJECT,
									  MSG.MESSAGE_BODY,
									  MSG.LAST_UPD,
									  MSG.LAST_UPD_BY,
									  MSG.ORG_NAME,
									  MSG.NOTIFY_BY,
									  MSG.APPLICATION_NAME
									FROM VIS_MESSAGE_TBL MSG
									WHERE MSG.MESSAGE_ID   = ?
	</query>
	<query key="IS_USER_VISITED_OBJECT_BEFORE">SELECT LAST_UPD FROM VIS_USR_MODULE_LAST_ACCESS WHERE VISITING_OBJ_ID = ? AND lower(USER_ID) = lower(?) AND LAST_UPD > current_date - ? </query>
	<query key="INSERT_USER_VISITING_OBJECT">INSERT INTO VIS_USR_MODULE_LAST_ACCESS (USER_ID, VISITING_OBJ_ID, LAST_UPD) VALUES (?,?,?) </query>
	<query key="UPDATE_USER_VISITING_OBJECT">UPDATE VIS_USR_MODULE_LAST_ACCESS SET LAST_UPD = ? WHERE VISITING_OBJ_ID = ? AND lower(USER_ID) = lower(?) </query>
	<query key="GET_MULTI_MODELS_METADATA">SELECT MODEL_ID,METADATA_NAME, METADATA_VALUE FROM VIS_METADATA_TBL WHERE MODEL_ID IN (??)</query>
	<query key="FETCH_NEW_NOTIFICATION_COUNT">					
							SELECT COUNT(DISTINCT VNT.NOTIFICATION_ID) AS N_COUNT
							FROM VIS_NOTIFICATION_TBL VNT,
							VIS_NOTIFICATION_USER_TBL VNUT
							WHERE VNT.NOTIFICATION_ID = VNUT.NOTIFICATION_ID
							AND lower(vnut.user_id) = lower(?)
							AND VNUT.IS_READ = 0
							AND VNUT.IS_DELETED = 0
							AND VNT.ORG_NAME_EQUALS_CURRENT
							AND CREATED >
							  (SELECT LAST_UPD
								    FROM VIS_USR_MODULE_LAST_ACCESS
								    WHERE VISITING_OBJ_ID = ?
								    AND lower(USER_ID)    = lower(?)
								)
							AND ((VNT.START_DATE IS NULL AND VNT.END_DATE IS NULL) OR (? BETWEEN VNT.START_DATE AND VNT.END_DATE)
									OR (? >= VNT.START_DATE AND VNT.END_DATE IS NULL))
	</query>
	<query key="FETCH_ONLY_NEW_NOTIFICATION_BY_USER_NO_MODULE">
SELECT VNT.NOTIFICATION_ID,VNT.OBJECT_ID,VNT.TYPE_ID,VNT.ORG_NAME,VNT.PRIORITY,
									VNT.APPLICATION_NAME,VNT.CREATED,VNT.CREATED_BY,VNUT.IS_READ,VNUT.USER_ID,
									VNUT.IS_DELETED,VNTT.NAME,VNTT.CSS,VNTT.ACTION_NAME,VNTT.ACTION_VALUE,
									VNT.TOKEN_DETAILS,WSP.WSP_TITLE AS REPORT_TITLE,STRY.TITLE AS STORY_TITLE,
									DESK.DESK_NAME,MSG.MESSAGE_ID,MSG.SUBJECT,MSG.MESSAGE_BODY,MSG.LAST_UPD,
									MSG.LAST_UPD_BY,MSG.NOTIFY_BY,VNT.START_DATE, VNT.END_DATE,
									EXPORT.LOG_ID, EXPORT.FILE_DISPLAY_NAME, EXPORT.FILE_PATH, EXPORT.CREATED_ON,
  									EXPORT.EXPORT_STATUS, EXPORT.EXPORT_FORMAT, EXPORT.COMPLETED_ON, 
  									QST.STATUS AS QUEUE_STATUS
									
								FROM VIS_NOTIFICATION_TBL VNT
								  LEFT OUTER JOIN VIS_NOTIFICATION_USER_TBL VNUT ON VNT.NOTIFICATION_ID = VNUT.NOTIFICATION_ID
                                  LEFT OUTER JOIN VIS_NOTIFICATION_TYPES_TBL VNTT ON VNT.TYPE_ID = VNTT.TYPE_ID
			                      LEFT OUTER JOIN WSP_SUMM_TBL WSP ON VNT.OBJECT_ID = WSP.WSP_ID
                                  LEFT OUTER JOIN STORY_TBL STRY ON VNT.OBJECT_ID = STRY.STORY_ID
								  LEFT OUTER JOIN VIS_DESK DESK ON VNT.OBJECT_ID = DESK.DESK_ID
								
			                    LEFT OUTER JOIN (SELECT CAST(MESSAGE_ID AS VARCHAR(50)) AS MESSAGE_ID, SUBJECT, MESSAGE_BODY,LAST_UPD, LAST_UPD_BY,NOTIFY_BY FROM VIS_MESSAGE_TBL) MSG
								 ON VNT.OBJECT_ID = MSG.MESSAGE_ID
								 
			                     LEFT OUTER JOIN  (SELECT CAST(LOG_ID AS VARCHAR(50)) AS LOG_ID,
				                        FILE_DISPLAY_NAME,
				                        FILE_PATH,
				                        CAST(EXPORTED AS TIMESTAMP) AS CREATED_ON,
				                        EXPORT_STATUS,
				                        EXPORT_FORMAT,
				                        CAST(COMPLETED_ON AS TIMESTAMP) AS COMPLETED_ON
				                      FROM EXPORTLOGGER_TBL
				                      WHERE lower(USER_ID)          = lower(?)
				                      AND SOURCEAPPLICATION IN('UNIFY', 'AMT')
				                      AND DISPATCH_STATUS    ='Offline'
				                      AND EXPORT_STATUS     IN('Successful','Downloaded', 'Failure')
				                      AND ORG_NAME_EQUALS_CURRENT
				                      AND EXPORTED BETWEEN current_date - ? AND current_date) EXPORT
									   ON  VNT.OBJECT_ID = EXPORT.LOG_ID
									   
				                  LEFT OUTER JOIN    (SELECT QM.STATUS, ARTD.REPORT_ID, WPGT.WSP_ID FROM QUEUE_MASTER QM, ASYNC_REPORT_TASK_DTL ARTD, WSP_PAGE_TBL WPGT, WSP_PANE_TBL WPNT
                  				 WHERE QM.QUEUE_ITEM_ID = ARTD.QUEUE_ITEM_ID AND ARTD.REPORT_ID = WPNT.OBJECT_ID AND WPNT.PAGE_ID = WPGT.PAGE_ID) QST
								  ON WSP.WSP_ID = QST.WSP_ID
								 
							WHERE 
								 VNUT.IS_READ = 0
									AND VNUT.IS_DELETED = 0
									AND LOWER(VNUT.USER_ID)          = LOWER(?)
									AND VNT.ORG_NAME_EQUALS_CURRENT
									AND VNT.CREATED           > current_date - ?
									AND ((VNT.START_DATE IS NULL AND VNT.END_DATE IS NULL) OR (? BETWEEN VNT.START_DATE AND VNT.END_DATE)
											OR (? >= VNT.START_DATE  AND VNT.END_DATE IS NULL))
							ORDER BY VNT.PRIORITY DESC,VNT.CREATED DESC
</query>
	<query key="FETCH_NEW_NOTIFICATION_COUNT_4_NEW_USER">					
							SELECT COUNT(DISTINCT VNT.NOTIFICATION_ID) AS N_COUNT FROM
							FROM VIS_NOTIFICATION_TBL VNT,
							VIS_NOTIFICATION_USER_TBL VNUT
							WHERE VNT.NOTIFICATION_ID = VNUT.NOTIFICATION_ID
							AND VNUT.IS_READ = 0
							AND VNUT.IS_DELETED = 0
							AND VNT.CREATED           > current_date - ?
							AND VNT.ORG_NAME_EQUALS_CURRENT
							AND lower(vnut.user_id) = lower(?)
							AND ((VNT.START_DATE IS NULL AND VNT.END_DATE IS NULL) OR (? BETWEEN VNT.START_DATE AND VNT.END_DATE)
									OR (? >= VNT.START_DATE AND VNT.END_DATE IS NULL))
	</query>
	
		<query key="FETCH_ALL_NOTIFICATION_BY_USER">
							SELECT VNT.NOTIFICATION_ID,VNT.OBJECT_ID,VNT.TYPE_ID,VNT.ORG_NAME,VNT.PRIORITY,
									VNT.APPLICATION_NAME,VNT.CREATED,VNT.CREATED_BY,VNUT.IS_READ,VNUT.USER_ID,
									VNUT.IS_DELETED,VNTT.NAME,VNTT.CSS,VNTT.ACTION_NAME,VNTT.ACTION_VALUE,
									VNT.TOKEN_DETAILS,WSP.WSP_TITLE AS REPORT_TITLE,STRY.TITLE AS STORY_TITLE,
									DESK.DESK_NAME,MSG.MESSAGE_ID,MSG.SUBJECT,MSG.MESSAGE_BODY,MSG.LAST_UPD,
									MSG.LAST_UPD_BY,MSG.NOTIFY_BY,VNT.START_DATE, VNT.END_DATE,
									EXPORT.LOG_ID, EXPORT.FILE_DISPLAY_NAME, EXPORT.FILE_PATH, EXPORT.CREATED_ON,
  									EXPORT.EXPORT_STATUS, EXPORT.EXPORT_FORMAT, EXPORT.COMPLETED_ON, 
  									QST.STATUS AS QUEUE_STATUS
							FROM 
							(Select * FROM VIS_NOTIFICATION_TBL 
									WHERE NOTIFICATION_ID IN (
              							(Select VN.NOTIFICATION_ID from VIS_NOTIFICATION_TBL VN, VIS_NOTIFICATION_USER_TBL VNU
              									WHERE VN.NOTIFICATION_ID = VNU.NOTIFICATION_ID AND ORG_NAME_EQUALS_CURRENT
              									AND LOWER(VNU.USER_ID)= LOWER(?)
                        						AND VNU.IS_DELETED = 0
              									AND VN.CREATED > current_date - ?
              									AND ((VN.START_DATE IS NULL AND VN.END_DATE IS NULL) OR (? BETWEEN VN.START_DATE AND VN.END_DATE) OR (? >= VN.START_DATE AND VN.END_DATE IS NULL)))
                      						UNION
                     					 (Select NOTIFICATION_ID from VIS_NOTIFICATION_TBL 
                     					 		WHERE LOWER(CREATED_BY) = lower(?) 
                     					 		AND CREATED > current_date - ? 
                     					 		AND TYPE_ID IN (7,8)
                     					 		AND ORG_NAME_EQUALS_CURRENT)
                     				)
                     			) VNT
							LEFT OUTER JOIN (SELECT * FROM VIS_NOTIFICATION_USER_TBL WHERE LOWER(USER_ID)= LOWER(?) AND IS_DELETED = 0) VNUT 
							ON VNT.NOTIFICATION_ID = VNUT.NOTIFICATION_ID
							LEFT OUTER JOIN VIS_NOTIFICATION_TYPES_TBL VNTT 
							ON VNT.TYPE_ID           = VNTT.TYPE_ID
			                LEFT OUTER JOIN  WSP_SUMM_TBL WSP 
							ON VNT.OBJECT_ID = WSP.WSP_ID
			                LEFT OUTER JOIN  STORY_TBL STRY
							ON VNT.OBJECT_ID = STRY.STORY_ID
			                LEFT OUTER JOIN  VIS_DESK DESK
							ON VNT.OBJECT_ID = DESK.DESK_ID
			                   
						    LEFT OUTER JOIN  (SELECT CAST(MESSAGE_ID AS VARCHAR(50)) AS MESSAGE_ID, SUBJECT, MESSAGE_BODY,LAST_UPD, LAST_UPD_BY,NOTIFY_BY FROM VIS_MESSAGE_TBL) MSG
							ON VNT.OBJECT_ID = MSG.MESSAGE_ID 
			                LEFT OUTER JOIN  (SELECT CAST(LOG_ID AS VARCHAR(50)) AS LOG_ID,
				                        FILE_DISPLAY_NAME,
				                        FILE_PATH,
				                        CAST(EXPORTED AS TIMESTAMP) AS CREATED_ON,
				                        EXPORT_STATUS,
				                        EXPORT_FORMAT,
				                        CAST(COMPLETED_ON AS TIMESTAMP) AS COMPLETED_ON
				                      FROM EXPORTLOGGER_TBL
				                      WHERE lower(USER_ID)          = lower(?)
				                      AND SOURCEAPPLICATION IN('UNIFY', 'AMT')
				                      AND DISPATCH_STATUS    ='Offline'
				                      AND EXPORT_STATUS     IN('Successful','Downloaded', 'Failure')
				                      AND ORG_NAME_EQUALS_CURRENT
				                      AND EXPORTED BETWEEN current_date - ? AND current_date) EXPORT
							  ON VNT.OBJECT_ID = EXPORT.LOG_ID
									  
				            LEFT OUTER JOIN   (SELECT QM.STATUS, ARTD.REPORT_ID, WPGT.WSP_ID FROM QUEUE_MASTER QM, ASYNC_REPORT_TASK_DTL ARTD, WSP_PAGE_TBL WPGT, WSP_PANE_TBL WPNT
                  				 WHERE QM.QUEUE_ITEM_ID = ARTD.QUEUE_ITEM_ID AND ARTD.REPORT_ID = WPNT.OBJECT_ID AND WPNT.PAGE_ID = WPGT.PAGE_ID) QST
								 ON WSP.WSP_ID = QST.WSP_ID
								 
							WHERE VNT.ORG_NAME_EQUALS_CURRENT
									AND VNT.CREATED           > current_date - ?
							ORDER BY VNT.PRIORITY DESC,VNT.CREATED DESC
	</query>
	
	<query key="FETCH_NOTIFICATION_BY_ID">
							SELECT VNT.NOTIFICATION_ID,VNT.OBJECT_ID,VNT.TYPE_ID,VNT.ORG_NAME,VNT.PRIORITY,
									VNT.APPLICATION_NAME,VNT.CREATED,VNT.CREATED_BY,VNUT.IS_READ,VNUT.USER_ID,
									VNUT.IS_DELETED,VNTT.NAME,VNTT.CSS,VNTT.ACTION_NAME,VNTT.ACTION_VALUE,
									VNT.TOKEN_DETAILS,WSP.WSP_TITLE AS REPORT_TITLE,STRY.TITLE AS STORY_TITLE,
									DESK.DESK_NAME,MSG.MESSAGE_ID,MSG.SUBJECT,MSG.MESSAGE_BODY,MSG.LAST_UPD,
									MSG.LAST_UPD_BY,MSG.NOTIFY_BY,VNT.START_DATE, VNT.END_DATE,
									EXPORT.LOG_ID, EXPORT.FILE_DISPLAY_NAME, EXPORT.FILE_PATH, EXPORT.CREATED_ON,
  									EXPORT.EXPORT_STATUS, EXPORT.EXPORT_FORMAT, EXPORT.COMPLETED_ON, 
  									QST.STATUS AS QUEUE_STATUS
							FROM VIS_NOTIFICATION_TBL VNT,
							   LEFT OUTER JOIN VIS_NOTIFICATION_USER_TBL VNUT ON VNT.NOTIFICATION_ID = VNUT.NOTIFICATION_ID
							   LEFT OUTER JOIN VIS_NOTIFICATION_TYPES_TBL VNTT ON VNT.TYPE_ID = VNTT.TYPE_ID
			                   LEFT OUTER JOIN WSP_SUMM_TBL WSP ON VNT.OBJECT_ID = WSP.WSP_ID
			                   LEFT OUTER JOIN STORY_TBL STRY ON VNT.OBJECT_ID = STRY.STORY_ID
							   LEFT OUTER JOIN VIS_DESK DESK ON VNT.OBJECT_ID = DESK.DESK_ID
								
								
			                    LEFT OUTER JOIN (SELECT CAST(MESSAGE_ID AS VARCHAR(50)) AS MESSAGE_ID, SUBJECT, MESSAGE_BODY,LAST_UPD, LAST_UPD_BY,NOTIFY_BY FROM VIS_MESSAGE_TBL) MSG
			                    ON VNT.OBJECT_ID = MSG.MESSAGE_ID
								LEFT OUTER JOIN (SELECT CAST(LOG_ID AS VARCHAR(50)) AS LOG_ID,
				                        FILE_DISPLAY_NAME,
				                        FILE_PATH,
				                        CAST(EXPORTED AS TIMESTAMP) AS CREATED_ON,
				                        EXPORT_STATUS,
				                        EXPORT_FORMAT,
				                        CAST(COMPLETED_ON AS TIMESTAMP) AS COMPLETED_ON
				                      FROM EXPORTLOGGER_TBL
				                      WHERE lower(USER_ID)          = lower(?)
				                      AND SOURCEAPPLICATION IN('UNIFY', 'AMT')
				                      AND DISPATCH_STATUS    ='Offline'
				                      AND EXPORT_STATUS     IN('Successful','Downloaded', 'Failure')
				                      AND ORG_NAME_EQUALS_CURRENT
				                      AND EXPORTED BETWEEN current_date - ? AND current_date) EXPORT
								ON  VNT.OBJECT_ID = EXPORT.LOG_ID	  
				                LEFT OUTER JOIN (SELECT QM.STATUS, ARTD.REPORT_ID, WPGT.WSP_ID FROM QUEUE_MASTER QM, ASYNC_REPORT_TASK_DTL ARTD, WSP_PAGE_TBL WPGT, WSP_PANE_TBL WPNT
                  				 WHERE QM.QUEUE_ITEM_ID = ARTD.QUEUE_ITEM_ID AND ARTD.REPORT_ID = WPNT.OBJECT_ID AND WPNT.PAGE_ID = WPGT.PAGE_ID) QST
								 ON WSP.WSP_ID = QST.WSP_ID
							WHERE   VNUT.IS_DELETED = 0
									AND LOWER(VNUT.USER_ID)          = LOWER(?)
									AND VNT.ORG_NAME_EQUALS_CURRENT
									AND VNT.CREATED           > current_date - ?
									AND VNT.NOTIFICATION_ID IN (??)
							ORDER BY VNT.PRIORITY DESC,VNT.CREATED DESC
	</query>


	<!-- Model Config Tool .... DIMENSION INFO FOR MODEL -->
	<query key="GET_DIMENSION_INFO_FOR_MODEL">SELECT DIMENSION_NAME, CATEGORY, HAS_NO_HIERARCHY,
		IS_PRIMARY, HIERARCHIES,DISPLAY_IN_TG FROM VIS_DIMENSION_INFO WHERE MODEL_ID =
		?::integer
	</query>
	<query key="GET_CATEGORIES_FOR_DIMENSION">SELECT METADATA_NAME FROM VIS_METADATA_TBL WHERE
		METADATA_TYPE='CATEGORY' AND LOCALE= ? ORDER BY METADATA_NAME ASC
	</query>


	<!-- Flag to ignore Model Configuration -->
	<query key="GET_MODEL_METADATA_WITH_LOCALE">
										SELECT CASE WHEN EXISTS (SELECT 1 FROM VIS_METADATA_TBL
												                          WHERE MODEL_ID  = CAST ( (?) AS BigInt)
												                          AND LOWER(LOCALE) = LOWER(?)
												                          AND METADATA_NAME = ?)
												  
												  THEN (SELECT METADATA_VALUE FROM VIS_METADATA_TBL
												    WHERE MODEL_ID = CAST ( (?) AS BigInt)
												    AND LOWER(LOCALE) = LOWER(?)
												    AND METADATA_NAME = ?)
												  ELSE (
												     SELECT METADATA_VALUE
												  FROM VIS_METADATA_TBL
												  WHERE MODEL_ID    = 0
												  AND METADATA_NAME = ?)
												END
												<!-- FROM DUAL -->

	</query>
	<query key="GET_METADATA_LOOKUP_NAMES_BY_KEYWORDS">SELECT DIMENSION_NAME_VALUE FROM
		VIS_DIMENSIONNAME_LOOKUP WHERE LOCALE= ? AND DIMENSION_NAME_KEYWORD IN
		(??)
	</query>

	<!--TO DO new queries to be added in dal-oracle-quries.xml here -->
	<query key="INSERT_NOTIFICATION_GROUP_MAP_TBL"> INSERT INTO
		NOTIFICATION_GROUP_MAP_TBL(NOTIFICATION_ID, GROUP_ID, CREATED,
		CREATED_BY) VALUES(?, ?, CURRENT_TIMESTAMP, ?)
	</query>
	<query key="INSERT_VIS_QIRI_ANALYSIS"> INSERT INTO VIS_QIRI_ANALYSIS(ANALYSIS_ID,
		ANALYSIS_TITLE, CREATED_BY, STATUS, CREATED)
		VALUES(?,?,?,?,CURRENT_TIMESTAMP)
	</query>
	<query key="SELECT_NEXTVAL_U_ID_SEQ"> SELECT NEXTVAL('U_ID_SEQ')</query>

	<query key="DELETE_DESK_CACHE_DATA_NO_SECURITY">
		DELETE FROM VIS_DESK_CACHE WHERE DESK_ID = ? AND
		SECURITY_KEY IS NULL
	</query>


	<query key="UPDATE_STORY_LAST_UPD">
		UPDATE STORY_TBL SET LAST_UPD=CURRENT_TIMESTAMP, LAST_ACCESSED=CURRENT_TIMESTAMP,
		LAST_UPD_BY = ? WHERE STORY_ID = ?
	</query>

	<!-- Notification queries -->
	<query key="GET_NOTIFICATION_USERIDS_LIST">SELECT USER_ID FROM VIZ_NOTIFICATION_USER_TBL where
		NOTIFICATION_ID = ?::numeric
	</query>
	<!-- UO queries -->
	<query key="INSERT_REPORT_REFRESH_JOB">INSERT INTO UO_JOB (JOB_ID,REPORT_ID,STORY_REPORT_ID,CREATED,CREATED_BY)
		VALUES(?,?,?,CURRENT_TIMESTAMP,?)
	</query>
	<query key="INSERT_REPORT_REFRESH_JOB_DETAILS">INSERT INTO UO_JOB_DETAIL
		(JOB_ID,STORY_REPORT_ID,SELECTIONS,STATUS,CREATED,CREATED_BY) VALUES (?,?,?,?,CURRENT_TIMESTAMP,?)
	</query>
	<query key="UPDATE_REPORT_REFRESH_JOB_DETAILS"> UPDATE UO_JOB_DETAIL SET
		QUEUE_ID=?,STATUS=?,FILENAME=?,ERROR_MESSAGE=?,ERROR_DETAILS=? where JOB_ID =? AND
		STORY_REPORT_ID=?
	</query>
	 <query key="UPDATE_REPORT_REFRESH_JOB_DETAILS_BY_JOB_ID"> UPDATE UO_JOB_DETAIL SET QUEUE_ID=?,STATUS=?,FILENAME=?,ERROR_MESSAGE=?,ERROR_DETAILS=? where JOB_ID =? </query>
	 <query key="GET_REPORT_REFRESH_JOB_DETAILS">SELECT
		QUEUE_ID,SELECTIONS,STATUS,FILENAME,ERROR_MESSAGE,ERROR_DETAILS FROM UO_JOB_DETAIL
		WHERE JOB_ID=?
	</query>
	<query key="UPDATE_REPORT_REFRESH_JOB_STATUS">UPDATE UO_JOB SET STATUS=? WHERE JOB_ID=?</query>
    <query key="GET_REPORT_REFRESH_JOB_STATUS">SELECT STATUS FROM UO_JOB WHERE JOB_ID=?</query>
    <query key="GET_QUEUEIDS_FOR_JOB">SELECT QUEUE_ID FROM UO_JOB_DETAIL WHERE JOB_ID=? AND STATUS= ?</query>
    <query key="UPDATE_REPORT_REFRESH_TASK_STATUS"> UPDATE UO_JOB_DETAIL SET STATUS=? WHERE STATUS IN (??) AND JOB_ID=?</query>
	
    <!-- Custom Visualizer queries -->
	<query key="GET_ALL_CUSTOM_VIS">SELECT VIS_CUSTOM_ID,NAME,DESCRIPTION,JS_CLASS_NAME,JAVA_CLASS_NAME,LOCAL_JSON_ID,CUSTOMPROPS_CONFIG,CREATED_ON,CREATED_BY,LAST_UPD,LAST_UPD_BY,CATEGORY_ID,VERSION,THUMBNAIL_PATH FROm VIS_CUSTOM_METADATA</query>
	
	<query key="GET_CUSTOM_VIS_DETAILS">SELECT VIS_CUSTOM_ID,NAME,DESCRIPTION,JS_CLASS_NAME,JAVA_CLASS_NAME,LOCAL_JSON_ID,CUSTOMPROPS_CONFIG,CREATED_ON,CREATED_BY,LAST_UPD,LAST_UPD_BY,CATEGORY_ID,VERSION,THUMBNAIL_PATH FROM VIS_CUSTOM_METADATA WHERE VIS_CUSTOM_ID = ?::numeric</query>
	
	<query key="SELECT_VIS_CUSTOM_RESOURCE_BY_VISCUSTOMID">SELECT res1.RESOURCE_ID, PATH, TYPE, SOURCE,RESMAP.INCLUDE_ORDER FROM vis_custom_resources RES1, vis_custom_resources_map RESMAP where res1.RESOURCE_ID =  resMap.resource_id and  resMap.vis_custom_id = ?::numeric ORDER BY RESMAP.INCLUDE_ORDER</query>
    
    <query key="GET_ORG_GRP_LIST_CUSTVIZ">SELECT VCOM.ORG_NAME,VCOM.GROUP_ID,GM.GROUP_NAME FROM VIS_CUSTOM_ORGNAME_MAP VCOM LEFT OUTER JOIN GROUP_MASTER GM ON VCOM.GROUP_ID=GM.GROUP_ID WHERE VIS_CUSTOM_ID = ?::integer</query>
    
    <query key="GET_ORG_GRP_LIST">SELECT AOG.ORG_NAME, G.GROUP_ID, G.GROUP_NAME FROM GROUP_MASTER G, ADM_ORG_GRP_MAP AOG WHERE G.GROUP_ID = AOG.GROUP_ID ORDER BY ORG_NAME</query>
    
    <query key="INSERT_INTO_VIS_CUSTOM_METADATA">INSERT INTO VIS_CUSTOM_METADATA(VIS_CUSTOM_ID, NAME, DESCRIPTION, JS_CLASS_NAME, JAVA_CLASS_NAME, CUSTOMPROPS_CONFIG, CATEGORY_ID, VERSION, THUMBNAIL_PATH,CREATED_BY,CREATED_ON,LAST_UPD_BY,LAST_UPD)VALUES(?::numeric, ?, ?, ?, ?, ?, ?::numeric, ?, ?,?,CURRENT_TIMESTAMP,?,CURRENT_TIMESTAMP)</query>
    
    <query key="GET_SEQ_VIS_CUSTOM_ID">SELECT MAX(VIS_CUSTOM_ID)+1 AS VIS_CUSTOM_ID FROM VIS_CUSTOM_METADATA</query>
    
    <query key="INSERT_INTO_VIS_CUSTOM_RESOURCES">INSERT INTO VIS_CUSTOM_RESOURCES(RESOURCE_ID,PATH,TYPE,SOURCE,CREATED_ON) VALUES(?::numeric, ?, ?, ?, CURRENT_TIMESTAMP)</query>
    
    <query key="GET_SEQ_VIS_RESOURCE_ID">SELECT MAX(RESOURCE_ID)+1 AS RESOURCE_ID FROM VIS_CUSTOM_RESOURCES</query>
    
    <query key="INSERT_INTO_VIS_CUSTOM_RESOURCE_MAP">INSERT INTO VIS_CUSTOM_RESOURCES_MAP(VIS_CUSTOM_ID,RESOURCE_ID, INCLUDE_ORDER) VALUES(?::numeric, ?::numeric, ?::numeric)</query>
    
    <query key="INSERT_INTO_VIS_CUSTOM_ORG_GROUP_MAP">INSERT INTO VIS_CUSTOM_ORGNAME_MAP(VIS_CUSTOM_ID,ORG_NAME, GROUP_ID) VALUES(?::integer, ?, ?::numeric)</query>
    
    <query key="UPDATE_VIS_CUSTOM_META_DATA">UPDATE VIS_CUSTOM_METADATA SET  NAME = ?, DESCRIPTION = ?, JS_CLASS_NAME=?, JAVA_CLASS_NAME=?, CUSTOMPROPS_CONFIG = ?, CATEGORY_ID = ?, LAST_UPD_BY = ?, LAST_UPD = CURRENT_TIMESTAMP, THUMBNAIL_PATH = ? WHERE VIS_CUSTOM_ID = ?::numeric</query>
    
    <query key="DELETE_VIS_CUSTOM_ORGNAME_MAP">DELETE FROM VIS_CUSTOM_ORGNAME_MAP WHERE VIS_CUSTOM_ID = ?::numeric</query>
    
    <query key="DELETE_VIS_CUSTOM_RESOURCES_MAP">DELETE FROM VIS_CUSTOM_RESOURCES_MAP WHERE VIS_CUSTOM_ID = ?::numeric </query>
    
    <query key="SELECT_VIS_CUSTOM_RESOURCE">SELECT RESOURCE_ID, SOURCE, PATH, TYPE FROM VIS_CUSTOM_RESOURCES</query>
    
    <query key="GET_CATEGORY_LIST">SELECT CATEGORY_ID, CATEGORY_NAME FROM VIS_CATEGORY_MASTER</query>
    
    <query key="GET_ALL_CUSTOM_VIS_FOR_USER">SELECT METADATA.VIS_CUSTOM_ID, METADATA.name,  METADATA.description, METADATA.customprops_config, METADATA.THUMBNAIL_PATH FROM VIS_CUSTOM_METADATA METADATA WHERE METADATA.VIS_CUSTOM_ID IN ( SELECT DISTINCT(VIS_CUSTOM_ID) FROM VIS_CUSTOM_ORGNAME_MAP ORG WHERE  LOWER (ORG.ORG_NAME) = LOWER (?) AND org.group_id in (??) )</query>
    
    <query key="GET_ALL_CUSTOM_VIS_WITH_RESOURCES">select  DATA1.NAME,DATA1.DESCRIPTION,DATA1.VERSION,DATA1.JS_CLASS_NAME,DATA1.SAMPLEJSON,vcr.PATH ||'?'|| vcr.VERSION as PATH from vis_custom_resources vcr, vis_custom_resources_map vcrmap, (SELECT METADATA.*,  RESC.PATH as samplejson, RESC.SOURCE, VISCATEGORY.CATEGORY_NAME FROM VIS_CUSTOM_METADATA METADATA LEFT OUTER JOIN VIS_CUSTOM_RESOURCES RESC ON METADATA.LOCAL_JSON_ID = RESC.RESOURCE_ID LEFT OUTER JOIN VIS_CATEGORY_MASTER VISCATEGORY ON METADATA.CATEGORY_ID = VISCATEGORY.CATEGORY_ID ) DATA1 where vcr.resource_id = vcrmap.resource_id and vcrmap.vis_custom_id = DATA1.VIS_CUSTOM_ID order by DATA1.VIS_CUSTOM_ID, vcrmap.include_order</query>
    
    <query key="CHECK_BY_NAME_FOR_EXISTING_VIS">SELECT NAME FROM VIS_CUSTOM_METADATA WHERE NAME = ?</query>
    
    <query key="UPDATE_VIS_CUSTOM_RESOURCES">UPDATE VIS_CUSTOM_RESOURCES SET VERSION=CAST(coalesce(VERSION, '0') AS integer)+1 WHERE RESOURCE_ID = ?::numeric </query>
    
    <!-- CustomObjects Tag queries -->

	<query key="INSERT_TAGS">INSERT INTO TAG_MASTER(OBJECT_ID, OBJECT_TYPE, TAG_NAME) VALUES(?,?::numeric,?)</query>

	<query key="DELETE_TAGS">DELETE FROM TAG_MASTER WHERE OBJECT_ID = ?</query>

	<query key="GET_TAG_NAMES">SELECT TAG_NAME FROM TAG_MASTER WHERE OBJECT_ID = ?</query>
	
	<query key="GET_SUGGESTED_TAGS">SELECT DISTINCT TAG_NAME FROM TAG_MASTER WHERE TAG_NAME LIKE (?)</query>
	
	<!-- New Desk Queries -->
	<query key="INSERT_REPORT_DETAILS_FOR_QUEUING">INSERT INTO VIS_DESK_REPORT_EXEC_QUEUE (QUEUE_ID, MODEL_ID, STATUS, RUN_AS_USER, AS_SECURITY_KEY, CREATED, CREATED_BY, QUEUE_INFO, ORG_NAME, STORY_REPORT_ID, WSP_ID) VALUES (?, ?::numeric, ?, ?, ?, CURRENT_TIMESTAMP, ?, ?, ?, ?, ?)</query>
	<query key="UPDATE_QUEUE_STATUS">UPDATE VIS_DESK_REPORT_EXEC_QUEUE SET STATUS = ?, END_TIME = CURRENT_TIMESTAMP, UPDATED_BY = ? WHERE QUEUE_ID = ?</query>
	<query key="UPDATE_QUEUE_STATUS_START_TIME">UPDATE VIS_DESK_REPORT_EXEC_QUEUE SET STATUS = ?, START_TIME = CURRENT_TIMESTAMP, UPDATED_BY = ?, THREAD_NAME = ?, JOB_ID = ? WHERE QUEUE_ID = ?</query>
	<query key="GET_QUEUED_REPORT_FOR_PROCESS">SELECT QUEUE_ID,
								  MODEL_ID,
								  STATUS,
								  RUN_AS_USER,
								  AS_SECURITY_KEY,
								  CREATED,
								  CREATED_BY,
								  QUEUE_INFO,
								  ORG_NAME
								FROM VIS_DESK_REPORT_EXEC_QUEUE
								WHERE MODEL_ID = ?::numeric
								AND ORG_NAME   = ?
								AND (STATUS     = 'Submitted' OR STATUS     = 'Queued')
	</query>
	
	<query key="INSERT_DESK_REPORT_CACHE">INSERT INTO VIS_DESK_REPORT_CACHE (STORY_ID,STORY_REPORT_ID,WSP_ID,CACHE_DATA,TOT_TIME,CREATED_BY,CREATED,AS_SECURITY_KEY,STATUS,STATUS_MESSAGE, DATA_FETCHED_FROM, REPORT_SIZE) VALUES (?::numeric, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?, ?, ?, ?, ?::numeric)</query>
	<query key="DELETE_DESK_REPORT_CACHE">DELETE FROM VIS_DESK_REPORT_CACHE WHERE STORY_ID = ?::numeric AND STORY_REPORT_ID = ? AND AS_SECURITY_KEY IS NULL</query>
	<query key="DELETE_DESK_REPORT_CACHE_WITH_SEC_KEY">DELETE FROM VIS_DESK_REPORT_CACHE WHERE STORY_ID = ?::numeric AND STORY_REPORT_ID = ? AND AS_SECURITY_KEY = ?</query>
	<query key="INSERT_AS_SEC_KEY">INSERT INTO USER_AS_SECURITY_MAP (USER_ID,AS_SECURITY_KEY,MODEL_ID,CREATED_BY,CREATED,GROUP_ID) VALUES (?, ?, ?::numeric, ?, CURRENT_TIMESTAMP, ?::numeric)</query>
	<query key="GET_AS_SEC_KEY">SELECT AS_SECURITY_KEY FROM USER_AS_SECURITY_MAP WHERE USER_ID = ? AND MODEL_ID = ?::numeric AND GROUP_ID = ?::numeric</query>
	<query key="GET_AS_SEC_KEY_WHEN_GRP_NULL">SELECT AS_SECURITY_KEY FROM USER_AS_SECURITY_MAP WHERE USER_ID = ? AND MODEL_ID = ?::numeric</query>
	<query key="DELETE_AS_SEC_KEY_WHEN_GRP_NULL">DELETE FROM USER_AS_SECURITY_MAP WHERE USER_ID = ? AND MODEL_ID = ?::numeric</query>
	<query key="DELETE_AS_SEC_KEY">DELETE FROM USER_AS_SECURITY_MAP WHERE USER_ID = ? AND MODEL_ID = ?::numeric AND GROUP_ID = ?::numeric</query>
	
	<query key="UPDATE_DESK_LOG_STATUS_ABORTED">UPDATE VIS_DESK_FILE_GEN_LOG SET STATUS = 'Aborted' WHERE STATUS = 'Generating'</query>
	<query key="UPDATE_DESK_STATUS_ABORTED">UPDATE VIS_DESK SET STATUS = 'Aborted' WHERE STATUS = 'Generating'</query>
	<query key="UPDATE_DESK_REPORT_QUEUE_STATUS_ABORTED">UPDATE VIS_DESK_REPORT_EXEC_QUEUE SET STATUS = 'Aborted' WHERE STATUS = 'Generating' OR STATUS = 'Queued'</query>
	
	<query key="GET_REPORT_CACHE_FOR_DESK">
		Select CACHE_DATA from VIS_DESK_REPORT_CACHE
		WHERE (AS_SECURITY_KEY = (SELECT AS_SECURITY_KEY FROM USER_AS_SECURITY_MAP WHERE USER_ID = ? AND MODEL_ID = ?::numeric))
		AND Story_Report_Id = ?
		AND WSP_ID = ?
	</query>
	<query key="GET_REPORT_CACHE_FOR_DESK_NO_AS_SEC">
		Select CACHE_DATA from VIS_DESK_REPORT_CACHE WHERE
		Story_Report_Id = ?
		AND WSP_ID  = ?
		AND AS_SECURITY_KEY IS NULL
	</query>
	<query key="GET_REPORT_CACHE_FOR_DESK_AS_SEC_KEY">
		Select CACHE_DATA from VIS_DESK_REPORT_CACHE WHERE
		Story_Report_Id = ?
		AND WSP_ID  = ?
		AND AS_SECURITY_KEY = ? 
	</query>
	<query key="GET_TEXT_REPORT_CACHE_FOR_DESK">
		Select CACHE_DATA from VIS_DESK_REPORT_CACHE WHERE 
		Story_Report_Id = ?
		AND WSP_ID IS NULL
		AND AS_SECURITY_KEY IS NULL
	</query>
	<query key="GET_TEXT_REPORT_CACHE_FOR_DESK_WITH_AS_SEC_KEY">
		Select CACHE_DATA from VIS_DESK_REPORT_CACHE WHERE 
		Story_Report_Id = ?
		AND WSP_ID IS NULL
		AND AS_SECURITY_KEY = ?
	</query>
	<query key="GET_ALL_REPORT_CACHE_FOR_REPORT">
		Select CACHE_DATA, AS_SECURITY_KEY,WSP_ID from VIS_DESK_REPORT_CACHE WHERE 
		Story_Report_Id = ?
	</query>
	<query key="UPDATE_DESK_REPORT_CACHE_WITH_SEC">
		UPDATE VIS_DESK_REPORT_CACHE SET CACHE_DATA=? WHERE Story_Report_Id = ? AND AS_SECURITY_KEY = ? AND WSP_ID = ?
	</query>
	<query key="UPDATE_DESK_REPORT_CACHE">
		UPDATE VIS_DESK_REPORT_CACHE SET CACHE_DATA=? WHERE Story_Report_Id = ? AND AS_SECURITY_KEY IS NULL AND WSP_ID = ?
	</query>
	<query key="UPDATE_DESK_TEXT_REPORT_CACHE">
		UPDATE VIS_DESK_REPORT_CACHE SET CACHE_DATA=? WHERE Story_Report_Id = ? AND AS_SECURITY_KEY IS NULL AND WSP_ID IS NULL
	</query>
	
	<query key="DELETE_ALL_DESK_CACHE_BY_ORG">
		DELETE FROM VIS_DESK_REPORT_CACHE WHERE STORY_ID IN ( SELECT DISTINCT STORY_ID FROM
			(SELECT DESK_ID
			FROM VIS_DESK
			WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE')
			AND (IS_STATIC    = 0
			OR IS_STATIC     IS NULL)
			AND coalesce(lower(ORG_NAME), 'default') LIKE (lower(?))
			) DESK INNER JOIN VIS_DESK_STORY_MAP VDSM ON DESK.DESK_ID = VDSM.DESK_ID)
	</query>
	
	<query key="GET_MODEL_ID_BY_WSP">
		Select CPT.CUBE_ID FROM WSP_SUMM_TBL WST INNER JOIN WSP_PAGE_TBL WPT ON WST.WSP_ID = WPT.WSP_ID
		 										 INNER JOIN WSP_PANE_TBL WNT ON WPT.PAGE_ID = WNT.PAGE_ID
		 										 INNER JOIN CMN_REPORT_TBL CPT ON WNT.OBJECT_ID = CPT.REPORT_ID
	          WHERE WST.WSP_ID = ?
	</query>
	
	<query key="GET_AS_SECURITY_WISE_USERS_LIST">
		Select AS_SECURITY_KEY, STRING_AGG(USER_ID::text, ',') AS USER_LIST from USER_AS_SECURITY_MAP WHERE MODEL_ID = ?::numeric GROUP BY AS_SECURITY_KEY
	</query>
	
	<!-- Object Collection queries -->
	<query key="GET_OBJ_COL_TBL">SELECT * FROM OBJECT_COLLECTION_TBL WHERE UPPER(NAME) = ?</query>
	<query key="INS_OBJ_COL_TBL">INSERT INTO OBJECT_COLLECTION_TBL(COLLECTION_ID, NAME, CREATED_BY) VALUES (?::numeric, ?, ?)</query>
	<query key="GET_OBJ_COL_MAP">SELECT * FROM OBJECT_COLLECTION_MAP WHERE OBJ_ID=? AND OBJ_TYPE_ID=?</query>
	<query key="INST_OBJ_COL_MAP">INSERT INTO OBJECT_COLLECTION_MAP(COLLECTION_ID, OBJ_ID, OBJ_TYPE_ID) VALUES(?::numeric, ?, ?)</query>
	<query key="UPD_OBJ_COL_MAP">UPDATE OBJECT_COLLECTION_MAP SET COLLECTION_ID=?::numeric WHERE OBJ_ID=? AND OBJ_TYPE_ID=?</query>
	<query key="GET_OBJ_COL_SEQ">SELECT NEXTVAL('OBJ_COL_ID_SEQ')</query>
	<query key="FILTER_OBJ_COL_REPORT">SELECT NAME AS COLLECTION_NAME, COLLECTION_ID FROM OBJECT_COLLECTION_TBL WHERE COLLECTION_ID IN (SELECT OBJ_COL.COLLECTION_ID FROM WSP_SUMM_TBL WSP, OBJECT_COLLECTION_MAP OBJ_COL WHERE WSP.WSP_ID = OBJ_COL.OBJ_ID AND WSP.CREATED_BY=? AND OBJ_COL.OBJ_TYPE_ID=?) OR COLLECTION_ID IN (SELECT OBJ_COL.COLLECTION_ID FROM OBJ_USER_MAP USER_MAP, OBJECT_COLLECTION_MAP OBJ_COL WHERE USER_MAP.OBJECT_ID = OBJ_COL.OBJ_ID AND USER_MAP.USER_ID=? AND OBJ_COL.OBJ_TYPE_ID=?)</query>
	<query key="FILTER_OBJ_COL_STORY">SELECT NAME AS COLLECTION_NAME,COLLECTION_ID FROM OBJECT_COLLECTION_TBL WHERE COLLECTION_ID IN (SELECT OBJ_COL.COLLECTION_ID FROM STORY_TBL, OBJECT_COLLECTION_MAP OBJ_COL WHERE STORY_ID = OBJ_COL.OBJ_ID AND CREATED_BY=? AND OBJ_COL.OBJ_TYPE_ID=?) OR COLLECTION_ID IN (SELECT OBJ_COL.COLLECTION_ID FROM OBJ_USER_MAP USER_MAP, OBJECT_COLLECTION_MAP OBJ_COL WHERE USER_MAP.OBJECT_ID = OBJ_COL.OBJ_ID AND USER_MAP.USER_ID=? AND OBJ_COL.OBJ_TYPE_ID=?)</query>
	<query key="FILTER_OBJ_COL_CUST_OBJ">SELECT NAME AS COLLECTION_NAME,COLLECTION_ID FROM OBJECT_COLLECTION_TBL WHERE COLLECTION_ID IN (SELECT OBJ_COL.COLLECTION_ID FROM NAMED_SELECTIONS_SUMM_TBL, OBJECT_COLLECTION_MAP OBJ_COL WHERE OBJECT_ID = OBJ_COL.OBJ_ID AND CREATED_BY=? AND OBJ_COL.OBJ_TYPE_ID=?) OR COLLECTION_ID IN (SELECT OBJ_COL.COLLECTION_ID FROM OBJ_USER_MAP USER_MAP, OBJECT_COLLECTION_MAP OBJ_COL WHERE USER_MAP.OBJECT_ID = OBJ_COL.OBJ_ID AND USER_MAP.USER_ID=? AND OBJ_COL.OBJ_TYPE_ID=?)</query>
	<query key="DEL_OBJ_COL">DELETE FROM OBJECT_COLLECTION_MAP WHERE OBJ_ID = ?</query>
	<query key="GET_FOLDER_DET">SELECT OBJ_TBL.COLLECTION_ID, OBJ_TBL.NAME AS COLLECTION_NAME FROM OBJECT_COLLECTION_TBL OBJ_TBL, OBJECT_COLLECTION_MAP OBJ_MAP WHERE OBJ_TBL.COLLECTION_ID = OBJ_MAP.COLLECTION_ID AND OBJ_MAP.OBJ_ID=?</query>
	
	<!-- <query key="GET_USERMESSAGE_COUNT">SELECT COUNT(1) COUNT FROM 
	(SELECT DISTINCT VNT.NOTIFICATION_ID from VIZ_NOTIFICATION_TBL VNT 
	join VIZ_NOTIFICATION_USER_TBL VNUT 
	on VNT.NOTIFICATION_ID = VNUT.NOTIFICATION_ID 
	WHERE VNT.OBJECT_TYPE_ID = '7' AND VNT.CREATED_BY = ? 
	AND VNT.ORG_NAME_EQUALS_CURRENT AND VNUT.IS_READ = 'N') AS COUNT
	</query> -->
	
	<query key="GET_UNREAD_AUTHOR_MESSAGES">SELECT NOTIFICATION_ID, OBJECT_TYPE_ID, CREATED_BY, CREATED, 
                                SUBJECT, MESSAGE_BODY FROM VIZ_NOTIFICATION_TBL
                                WHERE OBJECT_TYPE_ID = '7' AND CREATED_BY = ? AND ORG_NAME_EQUALS_CURRENT
                                AND NOTIFICATION_ID IN (SELECT DISTINCT NOTIFICATION_ID FROM VIZ_NOTIFICATION_USER_TBL WHERE IS_READ = 'N' AND CREATED_BY = ?)
	</query>
	
	
	 <query key="GET_FOLDERS_TGS_FOR_FOLDER">
    SELECT FOLDER_ID,FOLDER_NAME,'false' AS IS_LEAF,CREATED_BY FROM AUDIENCE_FOLDER_MASTER WHERE PARENT_ID=?
	UNION 
	SELECT AFM.TG_DIM_KEY,TGM.TG_NAME,'true' AS IS_LEAF,CREATED_BY FROM AUDIENCE_FOLDER_MAP AFM,TG_MASTER TGM 
	WHERE PARENT_ID=? AND TGM.TG_DIM_KEY=AFM.TG_DIM_KEY AND IS_USABLE='Y'
    </query>
    <query key="GET_AUDIENCE_LIST">SELECT A_M.AUDIENCE_ID ,
    A_M.AUDIENCE_NAME ,
    A_M.AUDIENCE_DESCRIPTION ,
    A_M. CREATED_BY ,
    A_M.CREATED_DATE ,
    A_M. MODIFIED_BY ,
    A_M. MODIFIED_DATE ,
    A_M. MODEL_ID,
    A_M.TAGS,
    A_M.IS_FAVOURITE,
    A_M.IS_MEDIA_AUDIENCE,
    TG_A.COUNT_VALUE,
    'false' AS IS_LEAF
    FROM TG_AUDIENCE_MASTER A_M left join (select TAM.AUDIENCE_ID, count(TM.TG_DIM_KEY) AS COUNT_VALUE from TG_AUDIENCE_MAP TAM, TG_MASTER TM WHERE TM.GROUP_ID=TAM.TG_DIM_KEY GROUP BY TAM.AUDIENCE_ID) TG_A on A_M.AUDIENCE_ID = TG_A.AUDIENCE_ID
    WHERE A_M.created_by = ? AND A_M.MODEL_ID=?::integer
    OR A_M.AUDIENCE_ID IN (SELECT OBJECT_ID FROM OBJ_USERGRP_MAP WHERE  GROUP_ID IN (??) UNION SELECT OBJECT_ID FROM OBJ_USER_MAP WHERE  USER_ID= ?) AND A_M.MODEL_ID=?::integer
	</query>   
    
   <query key="CLEAR_MAP_PLOT_OPTIONS">DELETE FROM VIS_MAP_PLOT_DATA WHERE WSP_ID = ?</query>
   <query key="INSERT_MAP_PLOT_OPTIONS">INSERT INTO VIS_MAP_PLOT_DATA (WSP_ID , VISUALIZER_INDEX, PLOT_DATA) VALUES (?, ?, ?)</query>
   <query key="GET_MAP_PLOT_OPTIONS">SELECT VISUALIZER_INDEX,PLOT_DATA FROM VIS_MAP_PLOT_DATA WHERE WSP_ID = ?</query>
   
   <query key="GET_REPORT_ID_LIST">SELECT DISTINCT CRT.REPORT_ID FROM WSP_PANE_TBL WPT, CMN_REPORT_TBL CRT WHERE WPT.PAGE_ID IN (SELECT PAGE_ID FROM WSP_PAGE_TBL WHERE WSP_ID IN (??)) AND WPT.OBJECT_ID=CRT.REPORT_ID</query>
	<query key="GET_REPORT_PART_STORY_COUNT">Select COUNT(*) from STORY_REPORT_MAP WHERE WORKSPACE_ID = ?</query>
	<query key="SET_EXEC_ORDER_FOR_DESKS">UPDATE VIS_DESK SET cache_priority = ? WHERE DESK_ID IN (??)</query>
	<query key="ADD_DESKS_REPORT_AS_FAV">INSERT INTO VIS_DESK_REPORT_FAV (DESK_ID, STORY_REPORT_ID, CREATED_BY, CREATED) VALUES (?, ?, ?, CURRENT_TIMESTAMP)</query>
	<query key="REMOVE_DESKS_REPORT_AS_FAV">DELETE FROM VIS_DESK_REPORT_FAV WHERE DESK_ID = ? AND STORY_REPORT_ID = ? AND CREATED_BY = ?</query>
	<query key="IS_FAV_REPORTS_DESK_EXISTS">SELECT DESK_ID FROM VIS_DESK WHERE CREATED_BY = ? and TARGET_APP = 'FAV'</query>
	<query key="GET_ALL_REPORTS_DESKS_AS_FAV">
			SELECT VDFAV.DESK_ID, VDFAV.STORY_REPORT_ID,
					  VDFAV.CREATED_BY,
					  VDFAV.CREATED,
					  VD.DESK_NAME || '/' || STRY.TITLE || '/' || WSP.WSP_TITLE || '/' || SRM.RPT_INDEX AS REPORT_LOCATION
					FROM VIS_DESK VD,
					  VIS_DESK_REPORT_FAV VDFAV,
					  VIS_DESK_STORY_MAP VD_STRY,
					  STORY_REPORT_MAP SRM,
					  STORY_TBL STRY,
					  WSP_SUMM_TBL WSP
					WHERE VDFAV.DESK_ID = VD.DESK_ID
					AND VDFAV.DESK_ID = VD_STRY.DESK_ID
					AND VD_STRY.STORY_ID = STRY.STORY_ID
					AND STRY.STORY_ID = SRM.STORY_ID
					AND SRM.WORKSPACE_ID = WSP.WSP_ID
					AND VDFAV.STORY_REPORT_ID = SRM.STORY_REPORT_ID
					AND VDFAV.CREATED_BY = ?
	</query>
	<query key="GET_FAV_REPORT_DESK_BLUE_PRINT_BY_STRY_RPT_ID">
		Select VD.CREATED_BY, VD.DESK_ID, VDC.CACHE_DATA 
				From VIS_DESK VD, VIS_DESK_REPORT_FAV VDFAV, VIS_DESK_CACHE VDC
				WHERE VD.CREATED_BY = VDFAV.CREATED_BY
				AND VDFAV.STORY_REPORT_ID = ?
				AND VD.TARGET_APP = 'FAV'
				AND VD.DESK_ID = VDC.DESK_ID
	</query>
	<query key="GET_TIME_AGGREGATE_CONFIG_BY_MODEL_NAMES">
		SELECT MODEL_NAME,DIMENSION,AGGREGATE_CONFIG,IS_COMPARABLE FROM
			   VIS_MODEL_AGGREGATE_CONFIG WHERE MODEL_NAME IN (??)
	</query>
	<query key="GET_TIME_AGGREGATE_CONFIG">
		SELECT MODEL_NAME,DIMENSION,AGGREGATE_CONFIG,IS_COMPARABLE FROM
			   VIS_MODEL_AGGREGATE_CONFIG
	</query>
	<query key="GET_STORY_VIS_REP_PROP_DETAILS">SELECT STORY_REPORT_ID, VIS_REPORT_PROPERTY FROM STORY_REPORT_MAP WHERE STORY_REPORT_ID = ?</query>
	<query key="UPDATE_EXPORTDETAILSLIST">UPDATE EXPORTLOGGER_TBL SET EXPORT_STATUS = ? WHERE LOG_ID IN (??)  AND USER_ID = ?</query>
	<!-- <query key="UPDATE_NOTIFICATIONLIST">UPDATE VIZ_NOTIFICATION_USER_TBL SET IS_READ = ? WHERE NOTIFICATION_ID IN (??) AND USER_ID = ?</query> -->
	<query key="IS_CUSTOM_OBJECT_OWNER">SELECT COUNT(*) FROM NAMED_SELECTIONS_SUMM_TBL WHERE OBJECT_ID IN (??)  AND CREATED_BY = ? </query>
	<query key="GET_WORKSPACE_BY_USERID">SELECT COUNT(*) FROM WSP_SUMM_TBL WHERE WSP_ID IN (??) AND CREATED_BY = ?</query>
	<query key="OWNER_OF_SAVED_SELECTION">SELECT * FROM SAVED_SELECTION_DTL_TBL WHERE SAVED_SELECTION_ID = ? AND CREATED_BY = ?</query>
	<query key="IS_AUDIENCE_OWNER">SELECT COUNT(1) FROM TG_AUDIENCE_MASTER WHERE AUDIENCE_ID IN (??) AND CREATED_BY = ? </query>
	
		<!-- GeoMap -->
	<query key="GET_DEFAULT_MODEL_METADATA">SELECT METADATA_NAME, METADATA_VALUE FROM VIS_METADATA_TBL WHERE MODEL_ID = 0 AND METADATA_NAME IN (??)</query>
	<query key="GET_DEFAULT_MODEL_METADATA_VALUE">SELECT DIMENSION_NAME_VALUE FROM VIS_DIMENSIONNAME_LOOKUP WHERE DIMENSION_NAME_KEYWORD = ? AND LOCALE  = ?</query>
	<query key="GET_MODEL_SPECIFIC_METADATA_VALUE">SELECT VMETA.MODEL_ID MODEL_ID,VMETA.METADATA_NAME METADATA_NAME,VMETA.METADATA_VALUE DIMENSION_NAME FROM VIS_METADATA_TBL VMETA WHERE VMETA.MODEL_ID = ?::bigint</query>
	
	<query key="GET_CLUSTER_STEPS">SELECT STEP_ID, OBJECT_ID, ACTION, STEP_TYPE, STEP_ORDER, NAME, OPERATOR, FROM_VALUE, TO_VALUE, ATTRIBUTE_NAME_VALUES FROM CLUSTER_STEPS_TBL WHERE OBJECT_ID=? ORDER BY STEP_ORDER ASC</query>
	<query key="GET_LIBRARY_STORECLUSTER_OBJECTS">
							SELECT DISTINCT NS.object_id,
							NS.title,
							NS.description,
							NS.cube_id,
							NS.dimension_name,
							NS.object_type,
							NS.scope,
							NS.created_by,
							NS.created::timestamp,'YYYY-DD-MM HH24:MI:SS.MS' created,
							NS.last_upd::timestamp,'YYYY-DD-MM HH24:MI:SS.MS'  last_upd,
							NS.last_upd_by,
							NS.is_static_object,
							NS.is_drillable,                             
							OFMT.filter_name,
							ft.favourite_id,
							CB.CUBE_NAME,
							CAST(oum.is_editable AS VARCHAR) as iseditableOUMTBL ,
							CAST(ougrpm.is_editable AS VARCHAR) as iseditableOUGRPMTBL,
							TM.TAG_NAME,
							objcolmap.collection_id,
							scsummtbl.STORES_COUNT,
							scsummtbl.HIERARCHY_NAME
							FROM
							named_selections_summ_tbl NS
							INNER JOIN folder_obj_map FO ON NS.object_id = FO.object_id
							INNER JOIN CUBE_TBL CB ON CB.CUBE_ID = NS.cube_id
							LEFT OUTER JOIN obj_filter_map_tbl OFMT on NS.object_id = OFMT.object_id 
							LEFT OUTER JOIN favourites_tbl ft on NS.object_id = ft.object_id AND LOWER(ft.user_id) = ?
							LEFT OUTER JOIN TAG_MASTER TM ON NS.object_id = TM.OBJECT_ID
							LEFT OUTER JOIN (select DISTINCT OBJECT_ID, USER_ID, 'Y' AS IS_EDITABLE from (
				  Select count( IS_EDITABLE ) OVER (PARTITION BY USER_ID, OBJECT_ID) as CNT, OBJECT_ID, USER_ID, IS_EDITABLE 
				  FROM (Select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from obj_user_map 
						WHERE LOWER(user_id) = LOWER(?))as FOO)as FOO WHERE CNT > 1
		  UNION 
				select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from (
				  Select count( IS_EDITABLE ) OVER (PARTITION BY USER_ID, OBJECT_ID) as CNT, OBJECT_ID, USER_ID, IS_EDITABLE 
				  FROM (Select DISTINCT OBJECT_ID, USER_ID, IS_EDITABLE from obj_user_map 
						WHERE LOWER(user_id) = LOWER(?))as FOO)as FOO WHERE CNT = 1) oum  ON NS.object_id =  oum.object_id
							LEFT OUTER JOIN obj_usergrp_map ougrpm ON NS.object_id =  ougrpm.object_id
				LEFT OUTER JOIN  object_collection_map objcolmap
							ON NS.object_id      = objcolmap.obj_id
				LEFT OUTER JOIN  STORE_CLUSTER_INFO_TBL scsummtbl
							ON NS.object_id  = scsummtbl.object_id
							WHERE NS.object_type        = ?::integer
							AND NS.ORG_NAME_EQUALS_CURRENT
							AND ((Lower(created_by) = ?)
							OR (scope  IN (1, 3, 5))
							OR (scope = 2 and NS.object_id IN
							(SELECT object_id FROM obj_user_map WHERE user_id = ?
							UNION
							SELECT
							object_id
							FROM obj_usergrp_map
							WHERE group_id IN
							(SELECT
							group_id FROM
							adm_grp_usr_map WHERE user_id = ?)
							)
							))
							AND
							FO.FOLDER_ID IN
							(??)
	</query>
	
	<!-- Hierarchy history queries -->
	<query key="DELETE_HIERARCHY_HISTORY">DELETE FROM VIS_USER_MODEL_PREFERENCE WHERE USER_ID = ?  AND MODEL_ID = ?  </query>   
    <query key="INSERT_HIERARCHY_HISTORY">INSERT INTO VIS_USER_MODEL_PREFERENCE(USER_ID,MODEL_ID,HIERARCHIES,LAST_MODIFIED) VALUES(?,?,?,CURRENT_TIMESTAMP)</query>  
    <query key="GET_HIERARCHY_HISTORY">SELECT HIERARCHIES FROM VIS_USER_MODEL_PREFERENCE WHERE USER_ID = ? AND MODEL_ID = CAST(? AS BIGINT) </query>	
    <query key="GET_NAMED_SELECTIONS_DEFINITION">SELECT DIMENSION_NAME,OBJECT_DEFINITION FROM NAMED_SELECTIONS_SUMM_TBL WHERE OBJECT_ID IN (??)</query>
    <query key="GET_OBJECT_SCOPE">SELECT SCOPE FROM NAMED_SELECTIONS_SUMM_TBL WHERE OBJECT_ID = ?</query>
	
	<query key="UPDATE_DESK_STATIC_INFO">UPDATE VIS_DESK SET IS_STATIC = ? WHERE DESK_ID = ?</query>
	<query key="GET_CUBE_ID">
		SELECT CUBE_ID FROM CUBE_TBL WHERE LOWER(CUBE_NAME) = LOWER(?)
	</query>
	<query key="GET_CUBELIST_BY_NAME">SELECT LIST_ID FROM CUBE_LIST_TBL WHERE LIST_NAME = ?</query>
	<query key="DELETE_AS_SEC_KEY_BY_MODEL">DELETE FROM USER_AS_SECURITY_MAP WHERE AND MODEL_ID = ?</query>
	<query key="DELETE_ALL_AS_SEC_KEY">DELETE FROM USER_AS_SECURITY_MAP</query>
		<query key="DELETE_ALL_DESK_CACHE_BY_ORG_INCLUDING_STATIC">
		DELETE FROM VIS_DESK_REPORT_CACHE WHERE STORY_ID IN ( SELECT DISTINCT STORY_ID FROM
			(SELECT DESK_ID
			FROM VIS_DESK
			WHERE (TARGET_APP IS NULL OR UPPER(TARGET_APP) = 'MOBILE')
			AND NVL(lower(ORG_NAME), 'default') LIKE (lower(?))
			) DESK, VIS_DESK_STORY_MAP VDSM WHERE DESK.DESK_ID = VDSM.DESK_ID)
	</query>
	<query key="GET_CUSTOM_ATTR_SEQUENCE_ID">SELECT NEXTVAL('VIS_CUST_ATTR_SEQ')</query>
	<query key="GET_CUSTOM_HIERARCHIES_SEQUENCE_ID">SELECT NEXTVAL('VIS_CUST_HIERARCHIES_SEQ')</query>
	<query key="GET_CUSTOM_ATTR_INFO_BY_NAME">Select ATTR_ID, ATTR_NAME, COL_IDX, IS_DIMENSION, LAST_UPD_BY, LAST_UPD_ON, CLIENT_ID FROM VIS_CUST_ATTR_DEF WHERE lower(ATTR_NAME) = lower(?) AND CLIENT_ID = ?</query>
	<query key="GET_CUSTOM_ATTR_INFO_BY_ID">Select ATTR_ID, ATTR_NAME, COL_IDX, IS_DIMENSION, LAST_UPD_BY, LAST_UPD_ON, CLIENT_ID FROM VIS_CUST_ATTR_DEF WHERE ATTR_ID = ?</query>
	<query key="GET_ALL_CUSTOM_ATTR_INFO">Select ATTR_ID, ATTR_NAME, COL_IDX, IS_DIMENSION, LAST_UPD_BY, LAST_UPD_ON, CLIENT_ID FROM VIS_CUST_ATTR_DEF where CLIENT_ID = ? ORDER BY ATTR_NAME</query>
	<query key="GET_CLIENT_MASTER_INFO">Select CLIENT_ID, CLIENT_NAME, CLIENT_GROUP_USERS FROM VIS_CUST_CLIENT_MASTER where CLIENT_NAME = ?</query>
	<query key="INSERT_CUSTOM_ATTR_DEF">INSERT INTO VIS_CUST_ATTR_DEF (ATTR_ID, ATTR_NAME, COL_IDX, IS_DIMENSION, LAST_UPD_BY, LAST_UPD_ON,CLIENT_ID) VALUES (?,?,?,?,?,current_date,?)</query>
	<query key="GET_NEXT_AVAILABLE_COLUMN">SELECT COL_IDX FROM VIS_CUST_ATTR_DEF</query>
	<query key="GET_UPLOAD_ACTIVITY">Select ID,CLIENT_ID, FILE_NAME,ACTUAL_FILE_NAME,RECORDS,UPDATES,ATTRIBUTES,UPLOADED_BY,UPLOAD_TIME,APPROVED_BY,APPROVED_TIME,STATUS,VALIDATION_INFO,MESSAGES FROM VIS_CUST_ATTR_UPLD_ACT WHERE ID IN (??) </query>
	<query key="GET_CURRENT_UPLOAD_BY_CLIENT">Select ID,CLIENT_ID,FILE_NAME,ACTUAL_FILE_NAME,RECORDS,UPDATES,ATTRIBUTES,UPLOADED_BY,UPLOAD_TIME,APPROVED_BY,APPROVED_TIME,STATUS,VALIDATION_INFO,MESSAGES FROM VIS_CUST_ATTR_UPLD_ACT WHERE CLIENT_ID = ? </query>
	<query key="GET_UPLOAD_ACTIVITY_FROM_HIST">Select ID,CLIENT_ID, FILE_NAME,ACTUAL_FILE_NAME,RECORDS,UPDATES,ATTRIBUTES,UPLOADED_BY,UPLOAD_TIME,APPROVED_BY,APPROVED_TIME,STATUS,VALIDATION_INFO,MESSAGES FROM VIS_CUST_ATTR_UPLD_ACT_HIST WHERE ID IN (??) </query>
	<query key="GET_UPLOAD_HISTORY_BY_CLIENT">Select ID,CLIENT_ID,FILE_NAME,ACTUAL_FILE_NAME,RECORDS,UPDATES,ATTRIBUTES,UPLOADED_BY,UPLOAD_TIME,APPROVED_BY,APPROVED_TIME,STATUS,VALIDATION_INFO,MESSAGES FROM VIS_CUST_ATTR_UPLD_ACT_HIST WHERE CLIENT_ID = ? </query>
	<query key="GET_FILE_NAME_FROM_UPLOAD_ACTIVITY">Select ACTUAL_FILE_NAME, CLIENT_ID FROM VIS_CUST_ATTR_UPLD_ACT WHERE ID = ? </query>
	<query key="INSERT_UPLOAD_ACTIVITY">INSERT INTO VIS_CUST_ATTR_UPLD_ACT (ID,CLIENT_ID,FILE_NAME,ACTUAL_FILE_NAME,UPLOADED_BY,STATUS) VALUES (?,?,?,?,?,?) </query>
	<query key="UPDATE_UPLOAD_DONE_ACTIVITY">UPDATE VIS_CUST_ATTR_UPLD_ACT SET UPLOAD_TIME=SYSDATE,STATUS=?,MESSAGES=?  WHERE ID = ? </query>
	<query key="UPDATE_ACTIVITY_STATUS">UPDATE VIS_CUST_ATTR_UPLD_ACT SET STATUS=?, MESSAGES=? WHERE ID = ? </query>
	<query key="UPDATE_VALIDATION_END_ACTIVITY">UPDATE VIS_CUST_ATTR_UPLD_ACT SET STATUS=?, VALIDATION_INFO=?,MESSAGES=?  WHERE ID = ? </query>
	<query key="UPDATE_APPROVED_ACTIVITY">UPDATE VIS_CUST_ATTR_UPLD_ACT SET RECORDS=?,UPDATES=?,ATTRIBUTES=?,STATUS=?, APPROVED_BY=?,APPROVED_TIME=current_date,MESSAGES=?  WHERE ID = ? </query>
	<query key="UPDATE_CUST_ATTR_AS_DIM">UPDATE VIS_CUST_ATTR_DEF SET IS_DIMENSION = ? WHERE ATTR_ID = ? </query>
	<query key="ID_UPLOAD_DATA_VALIDATED">Select STATUS FROM VIS_CUST_ATTR_UPLD_ACT WHERE ID = ? </query>
	<query key="UPDATE_MULTIPLE_CUST_ATTR_AS_DIM">UPDATE VIS_CUST_ATTR_DEF SET IS_DIMENSION = ? WHERE ATTR_ID IN (??) </query>
	<query key="DELETE_CUST_ATTR">DELETE FROM VIS_CUST_ATTR_DEF WHERE ATTR_ID = ? </query>
	<query key="GET_ITEM_COUNT_BY_ATTR">SELECT COUNT(ATTR_) FROM VIS_CUST_ITEM_ATTR WHERE ATTR_ IS NOT NULL AND CLIENT_ID =? </query>
	<query key="DISCARD_ACTIVITY">UPDATE VIS_CUST_ATTR_UPLD_ACT SET STATUS=?,APPROVED_BY=? WHERE ID = ? AND lower(STATUS) IN ('uploaded', 'validated', 'success', 'warning', 'completed')</query>
	<!-- <query key="UPDATE_UPLOAD_ACTIVITY">UPDATE VIS_CUST_ATTR_UPLD_ACT SET RECORDS=?,UPDATES=?,ATTRIBUTES=?,UPLOADED_BY=?,UPLOAD_TIME=?,APPROVED_BY=?,APPROVED_TIME=?,STATUS=?,VALIDATION_INFO=?,MESSAGES=?  WHERE ID = ? </query> -->
	<query key="GET_CUST_HIERARCHY_BY_ID">Select HIERARCHY_ID,NAME,CREATED_BY,CREATED_ON,LAST_UPD_BY,LAST_UPD_ON,IS_PUBLIC,CLIENT_ID FROM VIS_CUST_HIERARCHY_DEF WHERE HIERARCHY_ID = ? </query>
	<query key="GET_ALL_CUST_HIERARCHY">Select HIERARCHY_ID,NAME,CREATED_BY,CREATED_ON,LAST_UPD_BY,LAST_UPD_ON,IS_PUBLIC,CLIENT_ID FROM VIS_CUST_HIERARCHY_DEF WHERE CLIENT_ID = ?</query>
	<query key="GET_CUST_HIERARCHY_BY_NAME">Select HIERARCHY_ID,NAME,CREATED_BY,CREATED_ON,LAST_UPD_BY,LAST_UPD_ON,IS_PUBLIC,CLIENT_ID FROM VIS_CUST_HIERARCHY_DEF WHERE lower(NAME) = lower(?)</query>
	<query key="INSERT_CUST_HIERARCHY">INSERT INTO VIS_CUST_HIERARCHY_DEF (HIERARCHY_ID,NAME,CREATED_BY,CREATED_ON,LAST_UPD_BY,LAST_UPD_ON,IS_PUBLIC,CLIENT_ID) VALUES (?,?,?,SYSDATE,?,SYSDATE,?,?)</query>
	<query key="UPDATE_CUST_HIERARCHY">UPDATE VIS_CUST_HIERARCHY_DEF SET NAME = ?, LAST_UPD_BY = ?, LAST_UPD_ON = SYSDATE, IS_PUBLIC=? WHERE HIERARCHY_ID = ?</query>
	<query key="DELETE_CUST_HIERARCHY">DELETE FROM VIS_CUST_HIERARCHY_DEF WHERE HIERARCHY_ID = ?</query>
	<query key="DELETE_CUST_HIERARCHIES">DELETE FROM VIS_CUST_HIERARCHY_DEF WHERE HIERARCHY_ID IN (??)</query>
		<query key="GET_ALL_CUST_HIERARCHIES_IN_DETAILS">
										SELECT HD.HIERARCHY_ID,
											  HD.NAME,
											  HD.CREATED_BY,
											  HD.CREATED_ON,
											  HD.LAST_UPD_BY,
											  HD.LAST_UPD_ON,
											  HD.IS_PUBLIC,
											  HD.CLIENT_ID,
											  HLM.ATTR_NAME,
											  HLM.CUSTOM,
											  HLM.ORDER_BY
											FROM VIS_CUST_HIERARCHY_DEF HD LEFT OUTER JOIN
											  VIS_CUST_HIERARCHY_LVL_MAP HLM
											ON HD.HIERARCHY_ID = HLM.HIERARCHY_ID
											WHERE HD.CLIENT_ID = ?
											ORDER BY HD.HIERARCHY_ID, HLM.ORDER_BY
	</query>
	
	<query key="GET_CUST_HIERARCHIES_BY_ID_IN_DETAILS">
										SELECT HD.HIERARCHY_ID,
											  HD.NAME,
											  HD.CREATED_BY,
											  HD.CREATED_ON,
											  HD.LAST_UPD_BY,
											  HD.LAST_UPD_ON,
											  HD.IS_PUBLIC,
											  HD.CLIENT_ID,
											  HLM.ATTR_NAME,
											  HLM.CUSTOM,
											  HLM.ORDER_BY
											FROM VIS_CUST_HIERARCHY_DEF HD LEFT OUTER JOIN
											  VIS_CUST_HIERARCHY_LVL_MAP HLM
											ON HD.HIERARCHY_ID = HLM.HIERARCHY_ID
											WHERE HD.HIERARCHY_ID = ?
											ORDER BY HD.HIERARCHY_ID, HLM.ORDER_BY
	</query>
	<query key="INSERT_CUST_HIERARCHIES_LEVEL_MAP">INSERT INTO VIS_CUST_HIERARCHY_LVL_MAP (HIERARCHY_ID,ATTR_NAME,CUSTOM,ORDER_BY) VALUES (?,?,?,?) </query>
	<query key="INSERT_CUST_HIERARCHIES_LEVEL_MAP_HIST">INSERT INTO VIS_CUST_HIERARCHY_LVL_HIST (HIERARCHY_ID,ATTR_NAME,CUSTOM,ORDER_BY, CREATED_BY, CREATED) VALUES (?,?,?,?,?,current_date) </query>
	<query key="DELETE_CUST_HIERARCHIES_LEVEL_MAP">DELETE FROM VIS_CUST_HIERARCHY_LVL_MAP WHERE HIERARCHY_ID = ?</query>
	<query key="DELETE_CUST_HIERARCHIES_LEVEL_MAP_ON_DEL_ATTR">DELETE
																FROM VIS_CUST_HIERARCHY_LVL_MAP
																WHERE LOWER(ATTR_NAME) = LOWER(?)
																AND HIERARCHY_ID      IN
																  (SELECT DISTINCT HD.HIERARCHY_ID
																  FROM VIS_CUST_HIERARCHY_DEF HD,
																    VIS_CUST_HIERARCHY_LVL_MAP HLM
																  WHERE HD.HIERARCHY_ID = HLM.HIERARCHY_ID
																  AND CLIENT_ID         = ?
																  ) 
	</query>
	<query key="DELETE_MULTIPLE_CUST_HIERARCHIES_LEVEL_MAP">DELETE FROM VIS_CUST_HIERARCHY_LVL_MAP WHERE HIERARCHY_ID IN (??)</query>
	<query key="IS_ATTR_PART_OF_HIERARCHY">
										SELECT HD.HIERARCHY_ID,
												  HD.NAME
												FROM VIS_CUST_HIERARCHY_DEF HD,
												  VIS_CUST_HIERARCHY_LVL_MAP HLM,
												  VIS_CUST_ATTR_DEF CAD
												WHERE HD.HIERARCHY_ID = HLM.HIERARCHY_ID
												AND CAD.ATTR_NAME = HLM.ATTR_NAME
												AND CAD.ATTR_ID = ?
												AND HD.CLIENT_ID = ?
	</query>
	<query key="GET_CLIENT_INFO">SELECT CLIENT_ID, CLIENT_NAME, CLIENT_GROUP_USERS FROM VIS_CUST_CLIENT_MASTER WHERE LOWER(CLIENT_NAME) = LOWER(?) </query>
	<query key="INSERT_CLIENT_INFO">INSERT INTO VIS_CUST_CLIENT_MASTER (CLIENT_ID, CLIENT_NAME, CLIENT_GROUP_USERS) VALUES (?,?,?) </query>
	<query key="UPDATE_CLIENT_INFO">UPDATE VIS_CUST_CLIENT_MASTER SET CLIENT_GROUP_USERS = ? WHERE LOWER(CLIENT_NAME) = LOWER(?)</query>
	<query key="GET_NEXT_CLIENT_SEQUENCE_ID">SELECT NEXTVAL('VIS_CUST_CLIENT_ID_SEQ')</query>
	<query key="UPDATE_HISTORY_WITH_LATEST">
								INSERT
									INTO VIS_CUST_ATTR_UPLD_ACT_HIST
									  (
									    ID,
									    CLIENT_ID,
									    FILE_NAME,
									    ACTUAL_FILE_NAME,
									    RECORDS,
									    UPDATES,
									    ATTRIBUTES,
									    UPLOADED_BY,
									    UPLOAD_TIME,
									    APPROVED_BY,
									    APPROVED_TIME,
									    STATUS,
									    VALIDATION_INFO,
									    MESSAGES
									  )
									  (SELECT ID,
									      CLIENT_ID,
									      FILE_NAME,
									      ACTUAL_FILE_NAME,
									      RECORDS,
									      UPDATES,
									      ATTRIBUTES,
									      UPLOADED_BY,
									      UPLOAD_TIME,
									      APPROVED_BY,
									      APPROVED_TIME,
									      STATUS,
									      VALIDATION_INFO,
									      MESSAGES
									    FROM VIS_CUST_ATTR_UPLD_ACT
									    WHERE ID = ?
									  )
	</query>
	<query key="DELETE_UPLOAD_HIST_BY_ID">DELETE FROM VIS_CUST_ATTR_UPLD_ACT_HIST WHERE ID = ? </query>
	<query key="DELETE_UPLOADS_BY_ID">DELETE FROM VIS_CUST_ATTR_UPLD_ACT WHERE ID = ? </query>
	<query key="INSERT_UPLD_ACTIVITY_LOG">INSERT INTO VIS_CUST_ATTR_UPLD_ACT_LOG (ID,CLIENT_ID,FILE_NAME,ACTUAL_FILE_NAME,UPLOADED_BY,UPLOAD_STRT_TM,STATUS) VALUES (?,?,?,?,?,SYSDATE,?) </query>
	<query key="UPDATE_END_UPLD_ACTIVITY_LOG">UPDATE VIS_CUST_ATTR_UPLD_ACT_LOG SET UPLOAD_END_TM = SYSDATE, STATUS = ?, INFO=? WHERE ID = ? </query>
	<query key="UPDATE_VALIDATE_ACTIVITY_LOG">UPDATE VIS_CUST_ATTR_UPLD_ACT_LOG SET VALIDATED_BY = ?,VALIDATION_STRT_TM = current_date,STATUS = ? WHERE ID = ? </query>
	<query key="UPDATE_END_VALIDATE_ACTIVITY_LOG">UPDATE VIS_CUST_ATTR_UPLD_ACT_LOG SET VALIDATION_END_TM = current_date, STATUS = ?, INFO=? WHERE ID = ? </query>
	<query key="UPDATE_APPROVED_ACTIVITY_LOG">UPDATE VIS_CUST_ATTR_UPLD_ACT_LOG SET APPROVED_BY = ?,APPROVED_STRT_TM = current_date,STATUS = ? WHERE ID = ? </query>
	<query key="UPDATE_END_APPROVED_ACTIVITY_LOG">UPDATE VIS_CUST_ATTR_UPLD_ACT_LOG SET APPROVED_END_TM = current_date, STATUS = ?, INFO=?, RECORDS = ?, UPDATES = ?, ATTRIBUTES = ? WHERE ID = ? </query>
	<query key="DROP_TEMP_TABLE">DROP TABLE ?? PURGE</query>
	<query key="CREATE_TEMP_TABLE_INDEX">ALTER TABLE ?? ADD CONSTRAINT ??_U UNIQUE (ITEM_ID, CLIENT_ID)</query>
	<query key="REMOVE_DUPLICATE_FROM_TEMP_TABLE">DELETE FROM ?? WHERE rowid not in (SELECT max(rowid) FROM ?? GROUP BY ITEM_ID)</query>
	<query key="INSERT_TO_VIS_CUST_ITEM_ATTR_FROM_TEMP">
		INSERT INTO VIS_CUST_ITEM_ATTR (Select * from ?? WHERE CLIENT_ID = ? AND ITEM_ID IS NOT NULL AND ITEM_ID NOT IN (SELECT ITEM_ID FROM VIS_CUST_ITEM_ATTR WHERE CLIENT_ID = ?))
	</query>
	<query key="UPDATE_CLIENT_ID_TO_TEMP_TABLE">UPDATE ?? SET CLIENT_ID = ?</query>
	<query key="REMOVE_UNMATCHED_FROM_TEMP_TABLE">DELETE FROM ?? WHERE ITEM_ID IN </query>
	<query key="CREATE_TEMP_TABLE">CREATE TABLE ??
									(
									  ITEM_ID    VARCHAR2(100),
									  ATTR_1     VARCHAR2(100),
									  ATTR_2     VARCHAR2(100),
									  ATTR_3     VARCHAR2(100),
									  ATTR_4     VARCHAR2(100),
									  ATTR_5     VARCHAR2(100),
									  ATTR_6     VARCHAR2(100),
									  ATTR_7     VARCHAR2(100),
									  ATTR_8     VARCHAR2(100),
									  ATTR_9     VARCHAR2(100),
									  ATTR_10    VARCHAR2(100),
									  ATTR_11    VARCHAR2(100),
									  ATTR_12    VARCHAR2(100),
									  ATTR_13    VARCHAR2(100),
									  ATTR_14    VARCHAR2(100),
									  ATTR_15    VARCHAR2(100),
									  ATTR_16    VARCHAR2(100),
									  ATTR_17    VARCHAR2(100),
									  ATTR_18    VARCHAR2(100),
									  ATTR_19    VARCHAR2(100),
									  ATTR_20    VARCHAR2(100),
									  ATTR_21    VARCHAR2(100),
									  ATTR_22    VARCHAR2(100),
									  ATTR_23    VARCHAR2(100),
									  ATTR_24    VARCHAR2(100),
									  ATTR_25    VARCHAR2(100),
									  ATTR_26    VARCHAR2(100),
									  ATTR_27    VARCHAR2(100),
									  ATTR_28    VARCHAR2(100),
									  ATTR_29    VARCHAR2(100),
									  ATTR_30    VARCHAR2(100),
									  ATTR_31    VARCHAR2(100),
									  ATTR_32    VARCHAR2(100),
									  ATTR_33    VARCHAR2(100),
									  ATTR_34    VARCHAR2(100),
									  ATTR_35    VARCHAR2(100),
									  ATTR_36    VARCHAR2(100),
									  ATTR_37    VARCHAR2(100),
									  ATTR_38    VARCHAR2(100),
									  ATTR_39    VARCHAR2(100),
									  ATTR_40    VARCHAR2(100),
									  ATTR_41    VARCHAR2(100),
									  ATTR_42    VARCHAR2(100),
									  ATTR_43    VARCHAR2(100),
									  ATTR_44    VARCHAR2(100),
									  ATTR_45    VARCHAR2(100),
									  ATTR_46    VARCHAR2(100),
									  ATTR_47    VARCHAR2(100),
									  ATTR_48    VARCHAR2(100),
									  ATTR_49    VARCHAR2(100),
									  ATTR_50    VARCHAR2(100),
									  CREATED    TIMESTAMP,
									  CREATED_BY VARCHAR2(50),
									  UPDATED    TIMESTAMP,
									  UPDATED_BY VARCHAR2(50),
									  CLIENT_ID  NUMBER(3)
									)
			</query>
	<query key="INSERT_INTO_VIS_SCHEDULE_DTL">INSERT INTO VIS_SCHEDULE_DTL( SCHEDULE_ID , SCHEDULE_TYPE , OBJECT_ID , SCHEDULE_OPTION ) VALUES (? , ? , ? , ?)</query>
	<query key="INSERT_INTO_VIS_SCHEDULE_SHARE_DTL">INSERT INTO VIS_SCHEDULE_SHARE_DTL( SCHEDULE_ID , TARGET_ID , TARGET_TYPE  ) VALUES (? , ? , ?)</query>
		<query key="GET_SCHEDULE_REPORT_SCHEDULER_ID">
		SELECT RGT.RPT_ID,
		RGT.TASK_ID,
		VSD.SCHEDULE_OPTION
		FROM VIS_SCHEDULE_DTL VSD
		LEFT OUTER JOIN RPT_GEN_TBL RGT
		ON VSD.SCHEDULE_ID  = RGT.RPT_ID
		WHERE VSD.OBJECT_ID = ? and RGT.CREATED_BY = ?</query>
		
	<query key="INSERT_INTO_RPT_GEN_DTL_TBL">INSERT INTO RPT_GEN_TBL(RPT_ID,STATUS,TASK_ID,TYPE,CREATED_BY)  VALUES (?,?,?,?,?)</query>
	<query key="GET_SELECTION_INFO_FOR_SCHEDULED_STORY_REPORT">SELECT SELECTIONS,WORKSPACE_ID,STORY_REPORT_ID,LAST_UPDATED,TO_NUMBER(RPT_INDEX) POSITION,NOTES,TEXT_PANE_DATA,VIS_REPORT_PROPERTY,TYPE FROM STORY_REPORT_MAP WHERE STORY_REPORT_ID  IN (??) AND STORY_ID = ? ORDER BY POSITION</query>
	<query key="DELETE_FROM_VIS_SCHEDULE_DTL">DELETE from VIS_SCHEDULE_DTL where SCHEDULE_ID = ?</query>
	<query key="DELETE_FROM_RPT_GEN_DTL_TBL">DELETE from RPT_GEN_TBL where RPT_ID= ?</query>
	<query key="UPDATE_VIS_SCHEDULE_DTL">UPDATE VIS_SCHEDULE_DTL SET SCHEDULE_OPTION = ? WHERE SCHEDULE_ID = ?</query>
	<query key="UDATE_RPT_GEN_DTL_TBL">UPDATE RPT_GEN_TBL SET TASK_ID = ? WHERE RPT_ID = ?</query>
	<query key="GET_REPORT_GEN_DTL">select task_id from RPT_GEN_TBL where rpt_id = ? and CREATED_BY = ?</query>
	<query key="GET_SCHEDULE_REPORT_DETAIL">select SCHEDULE_TYPE , OBJECT_ID , SCHEDULE_OPTION from VIS_SCHEDULE_DTL where SCHEDULE_ID = ?</query>
	<query key="GET_CUBE_DETAIL_FOR_WORKSPACE">SELECT CBT.CUBE_ID, CBT.CUBE_NAME, CBT.ENVIRONMENT, CBT.DESCRIPTION, CBT.DATASRC_NAME, CBT.HOST_NAME, CBT.PORT_NO, CBT.OLAP_PROVIDER FROM CUBE_TBL CBT, CMN_REPORT_TBL CRT WHERE CRT.CUBE_ID  = CBT.CUBE_ID AND CRT.REPORT_ID IN(SELECT WPNT.OBJECT_ID FROM WSP_SUMM_TBL WST, WSP_PAGE_TBL WPT, WSP_PANE_TBL WPNT WHERE WST.WSP_ID = ? AND WST.WSP_ID   = WPT.WSP_ID AND WPT.PAGE_ID  = WPNT.PAGE_ID )</query>
	<query key="GET_ALL_USER_ID_FOR_SCHEDULE_REPORT">select AGUM.user_id from VIS_SCHEDULE_SHARE_DTL VSSD , ADM_GRP_USR_MAP AGUM 
			where VSSD.TARGET_TYPE = 1 and VSSD.TARGET_ID = AGUM.GROUP_ID and VSSD.SCHEDULE_ID = ?
			UNION
			select VSSD.TARGET_ID  from VIS_SCHEDULE_SHARE_DTL VSSD 
			where VSSD.TARGET_TYPE = 0 and VSSD.SCHEDULE_ID = ?
			UNION 
			select AGUM.user_id from VIS_SCHEDULE_SHARE_DTL VSSD , ADM_GRP_USR_MAP AGUM 
			where VSSD.TARGET_TYPE = 2 and VSSD.TARGET_ID = AGUM.GROUP_ID and VSSD.SCHEDULE_ID = ?</query>
	<query key="GET_TOTAL_NO_OF_SCHEDULED_REPORT_BY_USER" >select count(*) as TOTAL_COUNT from rpt_gen_tbl where created_by = ?</query>
	<query key="GET_TOTAL_NO_OF_SCHEDULED_REPORT_IN_ORGNIZATION">select count(*) as TOTAL_COUNT from rpt_gen_tbl rgt inner join SCHED_TASK_TBL stt on rgt.TASK_ID = stt.TASK_ID where stt.ORG_NAME = ?</query>
	<query key="DELETE_FROM_VIS_SCHEDULE_SHARE_DTL">DELETE FROM VIS_SCHEDULE_SHARE_DTL WHERE SCHEDULE_ID = ?</query>
    <query key="UPDATE_VIS_SCHEDULE_SHARE_DTL">UPDATE VIS_SCHEDULE_SHARE_DTL VSSD SET VSSD.TARGET_ID = ?,VSSD.TARGET_TYPE = ? WHERE SCHEDULE_ID = ?</query>
    <query key="GET_VIS_SCHEDULE_SHARE_DTL">SELECT SCHEDULE_ID,TARGET_ID,TARGET_TYPE FROM VIS_SCHEDULE_SHARE_DTL WHERE SCHEDULE_ID = ?</query>
    <query key="GET_EXPORT_LOGGER_INFO_BY_ID">SELECT REPORT_TITLE,FILE_PATH,DISPATCH_STATUS,OBJECT_TYPE,OBJECT_ID FROM EXPORTLOGGER_TBL WHERE LOG_ID = ?</query>    
    <query key="GET_ALL_TASK">SELECT TASK_ID , TASK_DESC , NEXT_RUN_TIME , LAST_RUN_TIME FROM SCHED_TASK_TBL where OWNER='SYSTEM' AND SCHEDULER_TYPE = ? AND MTHD_NAME = ?</query>
    <query key="GET_ITEM_ATTR_BY_KEY">SELECT * FROM VIS_CUST_ITEM_ATTR WHERE lower(ITEM_ID) = lower(?)</query>
	<query key="COUNT_ITEM_ATTR_BY_CLIENT">SELECT COUNT(1) FROM VIS_CUST_ITEM_ATTR WHERE CLIENT_ID = ?</query>
	<query key="DELETE_ITEM_ATTR_BY_KEY">DELETE FROM VIS_CUST_ITEM_ATTR WHERE lower(ITEM_ID) IN (??)</query>
	<query key="GET_STORY_REPORT_IDS_FOR_DASHBOARD">SELECT STORY_REPORT_ID,TO_NUMBER(RPT_INDEX) POSITION FROM STORY_REPORT_MAP WHERE STORY_ID = ? AND type='dashboard' ORDER BY POSITION</query>
</queries>